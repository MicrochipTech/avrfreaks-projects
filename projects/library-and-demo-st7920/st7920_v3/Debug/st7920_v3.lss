
st7920_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001696  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001696  0000170a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012fc  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000916  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003326  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
       4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
       6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
       8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
       a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
       c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
       e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
      10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
      12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
      14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
      16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
      18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
      1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
      1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
      1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
      20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
      22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
      24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e6 e9       	ldi	r30, 0x96	; 150
      3a:	f6 e1       	ldi	r31, 0x16	; 22
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	aa 36       	cpi	r26, 0x6A	; 106
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
      48:	1e d5       	rcall	.+2620   	; 0xa86 <main>
      4a:	23 cb       	rjmp	.-2490   	; 0xfffff692 <__eeprom_end+0xff7ef692>

0000004c <__bad_interrupt>:
      4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <rs_hi>:
#define delay_time	80		// default settling time in uS after a command is sent

int x = 0xffff;

void rs_hi()
{
      4e:	0f 93       	push	r16
      50:	1f 93       	push	r17
      52:	cf 93       	push	r28
      54:	df 93       	push	r29
      56:	cd b7       	in	r28, 0x3d	; 61
      58:	de b7       	in	r29, 0x3e	; 62
      5a:	68 97       	sbiw	r28, 0x18	; 24
      5c:	0f b6       	in	r0, 0x3f	; 63
      5e:	f8 94       	cli
      60:	de bf       	out	0x3e, r29	; 62
      62:	0f be       	out	0x3f, r0	; 63
      64:	cd bf       	out	0x3d, r28	; 61
	COMMAND_PORT |= RS;
      66:	85 e3       	ldi	r24, 0x35	; 53
      68:	90 e0       	ldi	r25, 0x00	; 0
      6a:	25 e3       	ldi	r18, 0x35	; 53
      6c:	30 e0       	ldi	r19, 0x00	; 0
      6e:	f9 01       	movw	r30, r18
      70:	20 81       	ld	r18, Z
      72:	21 60       	ori	r18, 0x01	; 1
      74:	fc 01       	movw	r30, r24
      76:	20 83       	st	Z, r18
      78:	80 e0       	ldi	r24, 0x00	; 0
      7a:	90 e0       	ldi	r25, 0x00	; 0
      7c:	a0 ea       	ldi	r26, 0xA0	; 160
      7e:	b2 e4       	ldi	r27, 0x42	; 66
      80:	89 83       	std	Y+1, r24	; 0x01
      82:	9a 83       	std	Y+2, r25	; 0x02
      84:	ab 83       	std	Y+3, r26	; 0x03
      86:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
      88:	2b ea       	ldi	r18, 0xAB	; 171
      8a:	3a ea       	ldi	r19, 0xAA	; 170
      8c:	4a e2       	ldi	r20, 0x2A	; 42
      8e:	50 e4       	ldi	r21, 0x40	; 64
      90:	69 81       	ldd	r22, Y+1	; 0x01
      92:	7a 81       	ldd	r23, Y+2	; 0x02
      94:	8b 81       	ldd	r24, Y+3	; 0x03
      96:	9c 81       	ldd	r25, Y+4	; 0x04
      98:	ec d6       	rcall	.+3544   	; 0xe72 <__mulsf3>
      9a:	dc 01       	movw	r26, r24
      9c:	cb 01       	movw	r24, r22
      9e:	8d 83       	std	Y+5, r24	; 0x05
      a0:	9e 83       	std	Y+6, r25	; 0x06
      a2:	af 83       	std	Y+7, r26	; 0x07
      a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      a6:	20 e0       	ldi	r18, 0x00	; 0
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	40 e8       	ldi	r20, 0x80	; 128
      ac:	5f e3       	ldi	r21, 0x3F	; 63
      ae:	6d 81       	ldd	r22, Y+5	; 0x05
      b0:	7e 81       	ldd	r23, Y+6	; 0x06
      b2:	8f 81       	ldd	r24, Y+7	; 0x07
      b4:	98 85       	ldd	r25, Y+8	; 0x08
      b6:	af d8       	rcall	.-3746   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      b8:	88 23       	and	r24, r24
      ba:	1c f4       	brge	.+6      	; 0xc2 <rs_hi+0x74>
		__ticks = 1;
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	89 87       	std	Y+9, r24	; 0x09
      c0:	8e c0       	rjmp	.+284    	; 0x1de <rs_hi+0x190>
	else if (__tmp > 255)
      c2:	20 e0       	ldi	r18, 0x00	; 0
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	4f e7       	ldi	r20, 0x7F	; 127
      c8:	53 e4       	ldi	r21, 0x43	; 67
      ca:	6d 81       	ldd	r22, Y+5	; 0x05
      cc:	7e 81       	ldd	r23, Y+6	; 0x06
      ce:	8f 81       	ldd	r24, Y+7	; 0x07
      d0:	98 85       	ldd	r25, Y+8	; 0x08
      d2:	4d d8       	rcall	.-3942   	; 0xfffff16e <__eeprom_end+0xff7ef16e>
      d4:	18 16       	cp	r1, r24
      d6:	0c f0       	brlt	.+2      	; 0xda <rs_hi+0x8c>
      d8:	7a c0       	rjmp	.+244    	; 0x1ce <rs_hi+0x180>
	{
		_delay_ms(__us / 1000.0);
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	4a e7       	ldi	r20, 0x7A	; 122
      e0:	54 e4       	ldi	r21, 0x44	; 68
      e2:	69 81       	ldd	r22, Y+1	; 0x01
      e4:	7a 81       	ldd	r23, Y+2	; 0x02
      e6:	8b 81       	ldd	r24, Y+3	; 0x03
      e8:	9c 81       	ldd	r25, Y+4	; 0x04
      ea:	a3 d7       	rcall	.+3910   	; 0x1032 <__divsf3>
      ec:	dc 01       	movw	r26, r24
      ee:	cb 01       	movw	r24, r22
      f0:	8a 87       	std	Y+10, r24	; 0x0a
      f2:	9b 87       	std	Y+11, r25	; 0x0b
      f4:	ac 87       	std	Y+12, r26	; 0x0c
      f6:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a ef       	ldi	r20, 0xFA	; 250
      fe:	54 e4       	ldi	r21, 0x44	; 68
     100:	6a 85       	ldd	r22, Y+10	; 0x0a
     102:	7b 85       	ldd	r23, Y+11	; 0x0b
     104:	8c 85       	ldd	r24, Y+12	; 0x0c
     106:	9d 85       	ldd	r25, Y+13	; 0x0d
     108:	b4 d6       	rcall	.+3432   	; 0xe72 <__mulsf3>
     10a:	dc 01       	movw	r26, r24
     10c:	cb 01       	movw	r24, r22
     10e:	8e 87       	std	Y+14, r24	; 0x0e
     110:	9f 87       	std	Y+15, r25	; 0x0f
     112:	a8 8b       	std	Y+16, r26	; 0x10
     114:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5f e3       	ldi	r21, 0x3F	; 63
     11e:	6e 85       	ldd	r22, Y+14	; 0x0e
     120:	7f 85       	ldd	r23, Y+15	; 0x0f
     122:	88 89       	ldd	r24, Y+16	; 0x10
     124:	99 89       	ldd	r25, Y+17	; 0x11
     126:	77 d8       	rcall	.-3858   	; 0xfffff216 <__eeprom_end+0xff7ef216>
     128:	88 23       	and	r24, r24
     12a:	2c f4       	brge	.+10     	; 0x136 <rs_hi+0xe8>
		__ticks = 1;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	9b 8b       	std	Y+19, r25	; 0x13
     132:	8a 8b       	std	Y+18, r24	; 0x12
     134:	3e c0       	rjmp	.+124    	; 0x1b2 <rs_hi+0x164>
	else if (__tmp > 65535)
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	3f ef       	ldi	r19, 0xFF	; 255
     13a:	4f e7       	ldi	r20, 0x7F	; 127
     13c:	57 e4       	ldi	r21, 0x47	; 71
     13e:	6e 85       	ldd	r22, Y+14	; 0x0e
     140:	7f 85       	ldd	r23, Y+15	; 0x0f
     142:	88 89       	ldd	r24, Y+16	; 0x10
     144:	99 89       	ldd	r25, Y+17	; 0x11
     146:	13 d8       	rcall	.-4058   	; 0xfffff16e <__eeprom_end+0xff7ef16e>
     148:	18 16       	cp	r1, r24
     14a:	54 f5       	brge	.+84     	; 0x1a0 <rs_hi+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e2       	ldi	r20, 0x20	; 32
     152:	51 e4       	ldi	r21, 0x41	; 65
     154:	6a 85       	ldd	r22, Y+10	; 0x0a
     156:	7b 85       	ldd	r23, Y+11	; 0x0b
     158:	8c 85       	ldd	r24, Y+12	; 0x0c
     15a:	9d 85       	ldd	r25, Y+13	; 0x0d
     15c:	8a d6       	rcall	.+3348   	; 0xe72 <__mulsf3>
     15e:	dc 01       	movw	r26, r24
     160:	cb 01       	movw	r24, r22
     162:	bc 01       	movw	r22, r24
     164:	cd 01       	movw	r24, r26
     166:	bc d4       	rcall	.+2424   	; 0xae0 <__fixunssfsi>
     168:	dc 01       	movw	r26, r24
     16a:	cb 01       	movw	r24, r22
     16c:	9b 8b       	std	Y+19, r25	; 0x13
     16e:	8a 8b       	std	Y+18, r24	; 0x12
     170:	12 c0       	rjmp	.+36     	; 0x196 <rs_hi+0x148>
     172:	88 ec       	ldi	r24, 0xC8	; 200
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	9d 8b       	std	Y+21, r25	; 0x15
     178:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17a:	8c 89       	ldd	r24, Y+20	; 0x14
     17c:	9d 89       	ldd	r25, Y+21	; 0x15
     17e:	8c 01       	movw	r16, r24
     180:	c8 01       	movw	r24, r16
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <rs_hi+0x134>
     186:	8c 01       	movw	r16, r24
     188:	1d 8b       	std	Y+21, r17	; 0x15
     18a:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     18c:	8a 89       	ldd	r24, Y+18	; 0x12
     18e:	9b 89       	ldd	r25, Y+19	; 0x13
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	9b 8b       	std	Y+19, r25	; 0x13
     194:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     196:	8a 89       	ldd	r24, Y+18	; 0x12
     198:	9b 89       	ldd	r25, Y+19	; 0x13
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	51 f7       	brne	.-44     	; 0x172 <rs_hi+0x124>
     19e:	26 c0       	rjmp	.+76     	; 0x1ec <rs_hi+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1a0:	6e 85       	ldd	r22, Y+14	; 0x0e
     1a2:	7f 85       	ldd	r23, Y+15	; 0x0f
     1a4:	88 89       	ldd	r24, Y+16	; 0x10
     1a6:	99 89       	ldd	r25, Y+17	; 0x11
     1a8:	9b d4       	rcall	.+2358   	; 0xae0 <__fixunssfsi>
     1aa:	dc 01       	movw	r26, r24
     1ac:	cb 01       	movw	r24, r22
     1ae:	9b 8b       	std	Y+19, r25	; 0x13
     1b0:	8a 8b       	std	Y+18, r24	; 0x12
     1b2:	8a 89       	ldd	r24, Y+18	; 0x12
     1b4:	9b 89       	ldd	r25, Y+19	; 0x13
     1b6:	9f 8b       	std	Y+23, r25	; 0x17
     1b8:	8e 8b       	std	Y+22, r24	; 0x16
     1ba:	8e 89       	ldd	r24, Y+22	; 0x16
     1bc:	9f 89       	ldd	r25, Y+23	; 0x17
     1be:	8c 01       	movw	r16, r24
     1c0:	f8 01       	movw	r30, r16
     1c2:	31 97       	sbiw	r30, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <rs_hi+0x174>
     1c6:	8f 01       	movw	r16, r30
     1c8:	1f 8b       	std	Y+23, r17	; 0x17
     1ca:	0e 8b       	std	Y+22, r16	; 0x16
     1cc:	0f c0       	rjmp	.+30     	; 0x1ec <rs_hi+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     1ce:	6d 81       	ldd	r22, Y+5	; 0x05
     1d0:	7e 81       	ldd	r23, Y+6	; 0x06
     1d2:	8f 81       	ldd	r24, Y+7	; 0x07
     1d4:	98 85       	ldd	r25, Y+8	; 0x08
     1d6:	84 d4       	rcall	.+2312   	; 0xae0 <__fixunssfsi>
     1d8:	dc 01       	movw	r26, r24
     1da:	cb 01       	movw	r24, r22
     1dc:	89 87       	std	Y+9, r24	; 0x09
     1de:	89 85       	ldd	r24, Y+9	; 0x09
     1e0:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1e2:	88 8d       	ldd	r24, Y+24	; 0x18
     1e4:	18 2f       	mov	r17, r24
     1e6:	1a 95       	dec	r17
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <rs_hi+0x198>
     1ea:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(delay_time);
}
     1ec:	68 96       	adiw	r28, 0x18	; 24
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	08 95       	ret

00000202 <rs_lo>:

void rs_lo()
{
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	68 97       	sbiw	r28, 0x18	; 24
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
	COMMAND_PORT &= ~RS;	//
     21a:	85 e3       	ldi	r24, 0x35	; 53
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	25 e3       	ldi	r18, 0x35	; 53
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	f9 01       	movw	r30, r18
     224:	20 81       	ld	r18, Z
     226:	2e 7f       	andi	r18, 0xFE	; 254
     228:	fc 01       	movw	r30, r24
     22a:	20 83       	st	Z, r18
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	a0 ea       	ldi	r26, 0xA0	; 160
     232:	b2 e4       	ldi	r27, 0x42	; 66
     234:	89 83       	std	Y+1, r24	; 0x01
     236:	9a 83       	std	Y+2, r25	; 0x02
     238:	ab 83       	std	Y+3, r26	; 0x03
     23a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     23c:	2b ea       	ldi	r18, 0xAB	; 171
     23e:	3a ea       	ldi	r19, 0xAA	; 170
     240:	4a e2       	ldi	r20, 0x2A	; 42
     242:	50 e4       	ldi	r21, 0x40	; 64
     244:	69 81       	ldd	r22, Y+1	; 0x01
     246:	7a 81       	ldd	r23, Y+2	; 0x02
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	9c 81       	ldd	r25, Y+4	; 0x04
     24c:	12 d6       	rcall	.+3108   	; 0xe72 <__mulsf3>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	8d 83       	std	Y+5, r24	; 0x05
     254:	9e 83       	std	Y+6, r25	; 0x06
     256:	af 83       	std	Y+7, r26	; 0x07
     258:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e8       	ldi	r20, 0x80	; 128
     260:	5f e3       	ldi	r21, 0x3F	; 63
     262:	6d 81       	ldd	r22, Y+5	; 0x05
     264:	7e 81       	ldd	r23, Y+6	; 0x06
     266:	8f 81       	ldd	r24, Y+7	; 0x07
     268:	98 85       	ldd	r25, Y+8	; 0x08
     26a:	d5 d7       	rcall	.+4010   	; 0x1216 <__ltsf2>
     26c:	88 23       	and	r24, r24
     26e:	1c f4       	brge	.+6      	; 0x276 <rs_lo+0x74>
		__ticks = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	89 87       	std	Y+9, r24	; 0x09
     274:	8e c0       	rjmp	.+284    	; 0x392 <rs_lo+0x190>
	else if (__tmp > 255)
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	4f e7       	ldi	r20, 0x7F	; 127
     27c:	53 e4       	ldi	r21, 0x43	; 67
     27e:	6d 81       	ldd	r22, Y+5	; 0x05
     280:	7e 81       	ldd	r23, Y+6	; 0x06
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	73 d7       	rcall	.+3814   	; 0x116e <__gtsf2>
     288:	18 16       	cp	r1, r24
     28a:	0c f0       	brlt	.+2      	; 0x28e <rs_lo+0x8c>
     28c:	7a c0       	rjmp	.+244    	; 0x382 <rs_lo+0x180>
	{
		_delay_ms(__us / 1000.0);
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	4a e7       	ldi	r20, 0x7A	; 122
     294:	54 e4       	ldi	r21, 0x44	; 68
     296:	69 81       	ldd	r22, Y+1	; 0x01
     298:	7a 81       	ldd	r23, Y+2	; 0x02
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	9c 81       	ldd	r25, Y+4	; 0x04
     29e:	c9 d6       	rcall	.+3474   	; 0x1032 <__divsf3>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	8a 87       	std	Y+10, r24	; 0x0a
     2a6:	9b 87       	std	Y+11, r25	; 0x0b
     2a8:	ac 87       	std	Y+12, r26	; 0x0c
     2aa:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	4a ef       	ldi	r20, 0xFA	; 250
     2b2:	54 e4       	ldi	r21, 0x44	; 68
     2b4:	6a 85       	ldd	r22, Y+10	; 0x0a
     2b6:	7b 85       	ldd	r23, Y+11	; 0x0b
     2b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     2ba:	9d 85       	ldd	r25, Y+13	; 0x0d
     2bc:	da d5       	rcall	.+2996   	; 0xe72 <__mulsf3>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	8e 87       	std	Y+14, r24	; 0x0e
     2c4:	9f 87       	std	Y+15, r25	; 0x0f
     2c6:	a8 8b       	std	Y+16, r26	; 0x10
     2c8:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e8       	ldi	r20, 0x80	; 128
     2d0:	5f e3       	ldi	r21, 0x3F	; 63
     2d2:	6e 85       	ldd	r22, Y+14	; 0x0e
     2d4:	7f 85       	ldd	r23, Y+15	; 0x0f
     2d6:	88 89       	ldd	r24, Y+16	; 0x10
     2d8:	99 89       	ldd	r25, Y+17	; 0x11
     2da:	9d d7       	rcall	.+3898   	; 0x1216 <__ltsf2>
     2dc:	88 23       	and	r24, r24
     2de:	2c f4       	brge	.+10     	; 0x2ea <rs_lo+0xe8>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9b 8b       	std	Y+19, r25	; 0x13
     2e6:	8a 8b       	std	Y+18, r24	; 0x12
     2e8:	3e c0       	rjmp	.+124    	; 0x366 <rs_lo+0x164>
	else if (__tmp > 65535)
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	3f ef       	ldi	r19, 0xFF	; 255
     2ee:	4f e7       	ldi	r20, 0x7F	; 127
     2f0:	57 e4       	ldi	r21, 0x47	; 71
     2f2:	6e 85       	ldd	r22, Y+14	; 0x0e
     2f4:	7f 85       	ldd	r23, Y+15	; 0x0f
     2f6:	88 89       	ldd	r24, Y+16	; 0x10
     2f8:	99 89       	ldd	r25, Y+17	; 0x11
     2fa:	39 d7       	rcall	.+3698   	; 0x116e <__gtsf2>
     2fc:	18 16       	cp	r1, r24
     2fe:	54 f5       	brge	.+84     	; 0x354 <rs_lo+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e2       	ldi	r20, 0x20	; 32
     306:	51 e4       	ldi	r21, 0x41	; 65
     308:	6a 85       	ldd	r22, Y+10	; 0x0a
     30a:	7b 85       	ldd	r23, Y+11	; 0x0b
     30c:	8c 85       	ldd	r24, Y+12	; 0x0c
     30e:	9d 85       	ldd	r25, Y+13	; 0x0d
     310:	b0 d5       	rcall	.+2912   	; 0xe72 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	bc 01       	movw	r22, r24
     318:	cd 01       	movw	r24, r26
     31a:	e2 d3       	rcall	.+1988   	; 0xae0 <__fixunssfsi>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	9b 8b       	std	Y+19, r25	; 0x13
     322:	8a 8b       	std	Y+18, r24	; 0x12
     324:	12 c0       	rjmp	.+36     	; 0x34a <rs_lo+0x148>
     326:	88 ec       	ldi	r24, 0xC8	; 200
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	9d 8b       	std	Y+21, r25	; 0x15
     32c:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     32e:	8c 89       	ldd	r24, Y+20	; 0x14
     330:	9d 89       	ldd	r25, Y+21	; 0x15
     332:	8c 01       	movw	r16, r24
     334:	c8 01       	movw	r24, r16
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <rs_lo+0x134>
     33a:	8c 01       	movw	r16, r24
     33c:	1d 8b       	std	Y+21, r17	; 0x15
     33e:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     340:	8a 89       	ldd	r24, Y+18	; 0x12
     342:	9b 89       	ldd	r25, Y+19	; 0x13
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	9b 8b       	std	Y+19, r25	; 0x13
     348:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34a:	8a 89       	ldd	r24, Y+18	; 0x12
     34c:	9b 89       	ldd	r25, Y+19	; 0x13
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	51 f7       	brne	.-44     	; 0x326 <rs_lo+0x124>
     352:	26 c0       	rjmp	.+76     	; 0x3a0 <rs_lo+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     354:	6e 85       	ldd	r22, Y+14	; 0x0e
     356:	7f 85       	ldd	r23, Y+15	; 0x0f
     358:	88 89       	ldd	r24, Y+16	; 0x10
     35a:	99 89       	ldd	r25, Y+17	; 0x11
     35c:	c1 d3       	rcall	.+1922   	; 0xae0 <__fixunssfsi>
     35e:	dc 01       	movw	r26, r24
     360:	cb 01       	movw	r24, r22
     362:	9b 8b       	std	Y+19, r25	; 0x13
     364:	8a 8b       	std	Y+18, r24	; 0x12
     366:	8a 89       	ldd	r24, Y+18	; 0x12
     368:	9b 89       	ldd	r25, Y+19	; 0x13
     36a:	9f 8b       	std	Y+23, r25	; 0x17
     36c:	8e 8b       	std	Y+22, r24	; 0x16
     36e:	8e 89       	ldd	r24, Y+22	; 0x16
     370:	9f 89       	ldd	r25, Y+23	; 0x17
     372:	8c 01       	movw	r16, r24
     374:	f8 01       	movw	r30, r16
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <rs_lo+0x174>
     37a:	8f 01       	movw	r16, r30
     37c:	1f 8b       	std	Y+23, r17	; 0x17
     37e:	0e 8b       	std	Y+22, r16	; 0x16
     380:	0f c0       	rjmp	.+30     	; 0x3a0 <rs_lo+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     382:	6d 81       	ldd	r22, Y+5	; 0x05
     384:	7e 81       	ldd	r23, Y+6	; 0x06
     386:	8f 81       	ldd	r24, Y+7	; 0x07
     388:	98 85       	ldd	r25, Y+8	; 0x08
     38a:	aa d3       	rcall	.+1876   	; 0xae0 <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	89 87       	std	Y+9, r24	; 0x09
     392:	89 85       	ldd	r24, Y+9	; 0x09
     394:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     396:	88 8d       	ldd	r24, Y+24	; 0x18
     398:	18 2f       	mov	r17, r24
     39a:	1a 95       	dec	r17
     39c:	f1 f7       	brne	.-4      	; 0x39a <rs_lo+0x198>
     39e:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(delay_time);
}
     3a0:	68 96       	adiw	r28, 0x18	; 24
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <rw_hi>:

void rw_hi()
{
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	68 97       	sbiw	r28, 0x18	; 24
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
	COMMAND_PORT |= RW;
     3ce:	85 e3       	ldi	r24, 0x35	; 53
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	25 e3       	ldi	r18, 0x35	; 53
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	22 60       	ori	r18, 0x02	; 2
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	a0 ea       	ldi	r26, 0xA0	; 160
     3e6:	b2 e4       	ldi	r27, 0x42	; 66
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	ab 83       	std	Y+3, r26	; 0x03
     3ee:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     3f0:	2b ea       	ldi	r18, 0xAB	; 171
     3f2:	3a ea       	ldi	r19, 0xAA	; 170
     3f4:	4a e2       	ldi	r20, 0x2A	; 42
     3f6:	50 e4       	ldi	r21, 0x40	; 64
     3f8:	69 81       	ldd	r22, Y+1	; 0x01
     3fa:	7a 81       	ldd	r23, Y+2	; 0x02
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	9c 81       	ldd	r25, Y+4	; 0x04
     400:	38 d5       	rcall	.+2672   	; 0xe72 <__mulsf3>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	8d 83       	std	Y+5, r24	; 0x05
     408:	9e 83       	std	Y+6, r25	; 0x06
     40a:	af 83       	std	Y+7, r26	; 0x07
     40c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	40 e8       	ldi	r20, 0x80	; 128
     414:	5f e3       	ldi	r21, 0x3F	; 63
     416:	6d 81       	ldd	r22, Y+5	; 0x05
     418:	7e 81       	ldd	r23, Y+6	; 0x06
     41a:	8f 81       	ldd	r24, Y+7	; 0x07
     41c:	98 85       	ldd	r25, Y+8	; 0x08
     41e:	fb d6       	rcall	.+3574   	; 0x1216 <__ltsf2>
     420:	88 23       	and	r24, r24
     422:	1c f4       	brge	.+6      	; 0x42a <rw_hi+0x74>
		__ticks = 1;
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	89 87       	std	Y+9, r24	; 0x09
     428:	8e c0       	rjmp	.+284    	; 0x546 <__stack+0xe7>
	else if (__tmp > 255)
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	4f e7       	ldi	r20, 0x7F	; 127
     430:	53 e4       	ldi	r21, 0x43	; 67
     432:	6d 81       	ldd	r22, Y+5	; 0x05
     434:	7e 81       	ldd	r23, Y+6	; 0x06
     436:	8f 81       	ldd	r24, Y+7	; 0x07
     438:	98 85       	ldd	r25, Y+8	; 0x08
     43a:	99 d6       	rcall	.+3378   	; 0x116e <__gtsf2>
     43c:	18 16       	cp	r1, r24
     43e:	0c f0       	brlt	.+2      	; 0x442 <rw_hi+0x8c>
     440:	7a c0       	rjmp	.+244    	; 0x536 <__stack+0xd7>
	{
		_delay_ms(__us / 1000.0);
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	4a e7       	ldi	r20, 0x7A	; 122
     448:	54 e4       	ldi	r21, 0x44	; 68
     44a:	69 81       	ldd	r22, Y+1	; 0x01
     44c:	7a 81       	ldd	r23, Y+2	; 0x02
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	9c 81       	ldd	r25, Y+4	; 0x04
     452:	ef d5       	rcall	.+3038   	; 0x1032 <__divsf3>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	8a 87       	std	Y+10, r24	; 0x0a
     45a:	9b 87       	std	Y+11, r25	; 0x0b
     45c:	ac 87       	std	Y+12, r26	; 0x0c
     45e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4a ef       	ldi	r20, 0xFA	; 250
     466:	54 e4       	ldi	r21, 0x44	; 68
     468:	6a 85       	ldd	r22, Y+10	; 0x0a
     46a:	7b 85       	ldd	r23, Y+11	; 0x0b
     46c:	8c 85       	ldd	r24, Y+12	; 0x0c
     46e:	9d 85       	ldd	r25, Y+13	; 0x0d
     470:	00 d5       	rcall	.+2560   	; 0xe72 <__mulsf3>
     472:	dc 01       	movw	r26, r24
     474:	cb 01       	movw	r24, r22
     476:	8e 87       	std	Y+14, r24	; 0x0e
     478:	9f 87       	std	Y+15, r25	; 0x0f
     47a:	a8 8b       	std	Y+16, r26	; 0x10
     47c:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e8       	ldi	r20, 0x80	; 128
     484:	5f e3       	ldi	r21, 0x3F	; 63
     486:	6e 85       	ldd	r22, Y+14	; 0x0e
     488:	7f 85       	ldd	r23, Y+15	; 0x0f
     48a:	88 89       	ldd	r24, Y+16	; 0x10
     48c:	99 89       	ldd	r25, Y+17	; 0x11
     48e:	c3 d6       	rcall	.+3462   	; 0x1216 <__ltsf2>
     490:	88 23       	and	r24, r24
     492:	2c f4       	brge	.+10     	; 0x49e <__stack+0x3f>
		__ticks = 1;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9b 8b       	std	Y+19, r25	; 0x13
     49a:	8a 8b       	std	Y+18, r24	; 0x12
     49c:	3e c0       	rjmp	.+124    	; 0x51a <__stack+0xbb>
	else if (__tmp > 65535)
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	3f ef       	ldi	r19, 0xFF	; 255
     4a2:	4f e7       	ldi	r20, 0x7F	; 127
     4a4:	57 e4       	ldi	r21, 0x47	; 71
     4a6:	6e 85       	ldd	r22, Y+14	; 0x0e
     4a8:	7f 85       	ldd	r23, Y+15	; 0x0f
     4aa:	88 89       	ldd	r24, Y+16	; 0x10
     4ac:	99 89       	ldd	r25, Y+17	; 0x11
     4ae:	5f d6       	rcall	.+3262   	; 0x116e <__gtsf2>
     4b0:	18 16       	cp	r1, r24
     4b2:	54 f5       	brge	.+84     	; 0x508 <__stack+0xa9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e2       	ldi	r20, 0x20	; 32
     4ba:	51 e4       	ldi	r21, 0x41	; 65
     4bc:	6a 85       	ldd	r22, Y+10	; 0x0a
     4be:	7b 85       	ldd	r23, Y+11	; 0x0b
     4c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     4c2:	9d 85       	ldd	r25, Y+13	; 0x0d
     4c4:	d6 d4       	rcall	.+2476   	; 0xe72 <__mulsf3>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	08 d3       	rcall	.+1552   	; 0xae0 <__fixunssfsi>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	9b 8b       	std	Y+19, r25	; 0x13
     4d6:	8a 8b       	std	Y+18, r24	; 0x12
     4d8:	12 c0       	rjmp	.+36     	; 0x4fe <__stack+0x9f>
     4da:	88 ec       	ldi	r24, 0xC8	; 200
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	9d 8b       	std	Y+21, r25	; 0x15
     4e0:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4e2:	8c 89       	ldd	r24, Y+20	; 0x14
     4e4:	9d 89       	ldd	r25, Y+21	; 0x15
     4e6:	8c 01       	movw	r16, r24
     4e8:	c8 01       	movw	r24, r16
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <__stack+0x8b>
     4ee:	8c 01       	movw	r16, r24
     4f0:	1d 8b       	std	Y+21, r17	; 0x15
     4f2:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	9b 89       	ldd	r25, Y+19	; 0x13
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	9b 8b       	std	Y+19, r25	; 0x13
     4fc:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fe:	8a 89       	ldd	r24, Y+18	; 0x12
     500:	9b 89       	ldd	r25, Y+19	; 0x13
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	51 f7       	brne	.-44     	; 0x4da <__stack+0x7b>
     506:	26 c0       	rjmp	.+76     	; 0x554 <__stack+0xf5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     508:	6e 85       	ldd	r22, Y+14	; 0x0e
     50a:	7f 85       	ldd	r23, Y+15	; 0x0f
     50c:	88 89       	ldd	r24, Y+16	; 0x10
     50e:	99 89       	ldd	r25, Y+17	; 0x11
     510:	e7 d2       	rcall	.+1486   	; 0xae0 <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	9b 8b       	std	Y+19, r25	; 0x13
     518:	8a 8b       	std	Y+18, r24	; 0x12
     51a:	8a 89       	ldd	r24, Y+18	; 0x12
     51c:	9b 89       	ldd	r25, Y+19	; 0x13
     51e:	9f 8b       	std	Y+23, r25	; 0x17
     520:	8e 8b       	std	Y+22, r24	; 0x16
     522:	8e 89       	ldd	r24, Y+22	; 0x16
     524:	9f 89       	ldd	r25, Y+23	; 0x17
     526:	8c 01       	movw	r16, r24
     528:	f8 01       	movw	r30, r16
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <__stack+0xcb>
     52e:	8f 01       	movw	r16, r30
     530:	1f 8b       	std	Y+23, r17	; 0x17
     532:	0e 8b       	std	Y+22, r16	; 0x16
     534:	0f c0       	rjmp	.+30     	; 0x554 <__stack+0xf5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     536:	6d 81       	ldd	r22, Y+5	; 0x05
     538:	7e 81       	ldd	r23, Y+6	; 0x06
     53a:	8f 81       	ldd	r24, Y+7	; 0x07
     53c:	98 85       	ldd	r25, Y+8	; 0x08
     53e:	d0 d2       	rcall	.+1440   	; 0xae0 <__fixunssfsi>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	89 87       	std	Y+9, r24	; 0x09
     546:	89 85       	ldd	r24, Y+9	; 0x09
     548:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     54a:	88 8d       	ldd	r24, Y+24	; 0x18
     54c:	18 2f       	mov	r17, r24
     54e:	1a 95       	dec	r17
     550:	f1 f7       	brne	.-4      	; 0x54e <__stack+0xef>
     552:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(delay_time);
}
     554:	68 96       	adiw	r28, 0x18	; 24
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <rw_lo>:

void rw_lo()
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	68 97       	sbiw	r28, 0x18	; 24
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
	COMMAND_PORT &= ~RW;
     582:	85 e3       	ldi	r24, 0x35	; 53
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	25 e3       	ldi	r18, 0x35	; 53
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	f9 01       	movw	r30, r18
     58c:	20 81       	ld	r18, Z
     58e:	2d 7f       	andi	r18, 0xFD	; 253
     590:	fc 01       	movw	r30, r24
     592:	20 83       	st	Z, r18
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	a0 ea       	ldi	r26, 0xA0	; 160
     59a:	b2 e4       	ldi	r27, 0x42	; 66
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	ab 83       	std	Y+3, r26	; 0x03
     5a2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     5a4:	2b ea       	ldi	r18, 0xAB	; 171
     5a6:	3a ea       	ldi	r19, 0xAA	; 170
     5a8:	4a e2       	ldi	r20, 0x2A	; 42
     5aa:	50 e4       	ldi	r21, 0x40	; 64
     5ac:	69 81       	ldd	r22, Y+1	; 0x01
     5ae:	7a 81       	ldd	r23, Y+2	; 0x02
     5b0:	8b 81       	ldd	r24, Y+3	; 0x03
     5b2:	9c 81       	ldd	r25, Y+4	; 0x04
     5b4:	5e d4       	rcall	.+2236   	; 0xe72 <__mulsf3>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	8d 83       	std	Y+5, r24	; 0x05
     5bc:	9e 83       	std	Y+6, r25	; 0x06
     5be:	af 83       	std	Y+7, r26	; 0x07
     5c0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e8       	ldi	r20, 0x80	; 128
     5c8:	5f e3       	ldi	r21, 0x3F	; 63
     5ca:	6d 81       	ldd	r22, Y+5	; 0x05
     5cc:	7e 81       	ldd	r23, Y+6	; 0x06
     5ce:	8f 81       	ldd	r24, Y+7	; 0x07
     5d0:	98 85       	ldd	r25, Y+8	; 0x08
     5d2:	21 d6       	rcall	.+3138   	; 0x1216 <__ltsf2>
     5d4:	88 23       	and	r24, r24
     5d6:	1c f4       	brge	.+6      	; 0x5de <rw_lo+0x74>
		__ticks = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	89 87       	std	Y+9, r24	; 0x09
     5dc:	8e c0       	rjmp	.+284    	; 0x6fa <rw_lo+0x190>
	else if (__tmp > 255)
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4f e7       	ldi	r20, 0x7F	; 127
     5e4:	53 e4       	ldi	r21, 0x43	; 67
     5e6:	6d 81       	ldd	r22, Y+5	; 0x05
     5e8:	7e 81       	ldd	r23, Y+6	; 0x06
     5ea:	8f 81       	ldd	r24, Y+7	; 0x07
     5ec:	98 85       	ldd	r25, Y+8	; 0x08
     5ee:	bf d5       	rcall	.+2942   	; 0x116e <__gtsf2>
     5f0:	18 16       	cp	r1, r24
     5f2:	0c f0       	brlt	.+2      	; 0x5f6 <rw_lo+0x8c>
     5f4:	7a c0       	rjmp	.+244    	; 0x6ea <rw_lo+0x180>
	{
		_delay_ms(__us / 1000.0);
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4a e7       	ldi	r20, 0x7A	; 122
     5fc:	54 e4       	ldi	r21, 0x44	; 68
     5fe:	69 81       	ldd	r22, Y+1	; 0x01
     600:	7a 81       	ldd	r23, Y+2	; 0x02
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	15 d5       	rcall	.+2602   	; 0x1032 <__divsf3>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	8a 87       	std	Y+10, r24	; 0x0a
     60e:	9b 87       	std	Y+11, r25	; 0x0b
     610:	ac 87       	std	Y+12, r26	; 0x0c
     612:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	4a ef       	ldi	r20, 0xFA	; 250
     61a:	54 e4       	ldi	r21, 0x44	; 68
     61c:	6a 85       	ldd	r22, Y+10	; 0x0a
     61e:	7b 85       	ldd	r23, Y+11	; 0x0b
     620:	8c 85       	ldd	r24, Y+12	; 0x0c
     622:	9d 85       	ldd	r25, Y+13	; 0x0d
     624:	26 d4       	rcall	.+2124   	; 0xe72 <__mulsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	8e 87       	std	Y+14, r24	; 0x0e
     62c:	9f 87       	std	Y+15, r25	; 0x0f
     62e:	a8 8b       	std	Y+16, r26	; 0x10
     630:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 e8       	ldi	r20, 0x80	; 128
     638:	5f e3       	ldi	r21, 0x3F	; 63
     63a:	6e 85       	ldd	r22, Y+14	; 0x0e
     63c:	7f 85       	ldd	r23, Y+15	; 0x0f
     63e:	88 89       	ldd	r24, Y+16	; 0x10
     640:	99 89       	ldd	r25, Y+17	; 0x11
     642:	e9 d5       	rcall	.+3026   	; 0x1216 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <rw_lo+0xe8>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9b 8b       	std	Y+19, r25	; 0x13
     64e:	8a 8b       	std	Y+18, r24	; 0x12
     650:	3e c0       	rjmp	.+124    	; 0x6ce <rw_lo+0x164>
	else if (__tmp > 65535)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	3f ef       	ldi	r19, 0xFF	; 255
     656:	4f e7       	ldi	r20, 0x7F	; 127
     658:	57 e4       	ldi	r21, 0x47	; 71
     65a:	6e 85       	ldd	r22, Y+14	; 0x0e
     65c:	7f 85       	ldd	r23, Y+15	; 0x0f
     65e:	88 89       	ldd	r24, Y+16	; 0x10
     660:	99 89       	ldd	r25, Y+17	; 0x11
     662:	85 d5       	rcall	.+2826   	; 0x116e <__gtsf2>
     664:	18 16       	cp	r1, r24
     666:	54 f5       	brge	.+84     	; 0x6bc <rw_lo+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e2       	ldi	r20, 0x20	; 32
     66e:	51 e4       	ldi	r21, 0x41	; 65
     670:	6a 85       	ldd	r22, Y+10	; 0x0a
     672:	7b 85       	ldd	r23, Y+11	; 0x0b
     674:	8c 85       	ldd	r24, Y+12	; 0x0c
     676:	9d 85       	ldd	r25, Y+13	; 0x0d
     678:	fc d3       	rcall	.+2040   	; 0xe72 <__mulsf3>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	2e d2       	rcall	.+1116   	; 0xae0 <__fixunssfsi>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	9b 8b       	std	Y+19, r25	; 0x13
     68a:	8a 8b       	std	Y+18, r24	; 0x12
     68c:	12 c0       	rjmp	.+36     	; 0x6b2 <rw_lo+0x148>
     68e:	88 ec       	ldi	r24, 0xC8	; 200
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	9d 8b       	std	Y+21, r25	; 0x15
     694:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     696:	8c 89       	ldd	r24, Y+20	; 0x14
     698:	9d 89       	ldd	r25, Y+21	; 0x15
     69a:	8c 01       	movw	r16, r24
     69c:	c8 01       	movw	r24, r16
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <rw_lo+0x134>
     6a2:	8c 01       	movw	r16, r24
     6a4:	1d 8b       	std	Y+21, r17	; 0x15
     6a6:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a8:	8a 89       	ldd	r24, Y+18	; 0x12
     6aa:	9b 89       	ldd	r25, Y+19	; 0x13
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9b 8b       	std	Y+19, r25	; 0x13
     6b0:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b2:	8a 89       	ldd	r24, Y+18	; 0x12
     6b4:	9b 89       	ldd	r25, Y+19	; 0x13
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	51 f7       	brne	.-44     	; 0x68e <rw_lo+0x124>
     6ba:	26 c0       	rjmp	.+76     	; 0x708 <rw_lo+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6bc:	6e 85       	ldd	r22, Y+14	; 0x0e
     6be:	7f 85       	ldd	r23, Y+15	; 0x0f
     6c0:	88 89       	ldd	r24, Y+16	; 0x10
     6c2:	99 89       	ldd	r25, Y+17	; 0x11
     6c4:	0d d2       	rcall	.+1050   	; 0xae0 <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9b 8b       	std	Y+19, r25	; 0x13
     6cc:	8a 8b       	std	Y+18, r24	; 0x12
     6ce:	8a 89       	ldd	r24, Y+18	; 0x12
     6d0:	9b 89       	ldd	r25, Y+19	; 0x13
     6d2:	9f 8b       	std	Y+23, r25	; 0x17
     6d4:	8e 8b       	std	Y+22, r24	; 0x16
     6d6:	8e 89       	ldd	r24, Y+22	; 0x16
     6d8:	9f 89       	ldd	r25, Y+23	; 0x17
     6da:	8c 01       	movw	r16, r24
     6dc:	f8 01       	movw	r30, r16
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <rw_lo+0x174>
     6e2:	8f 01       	movw	r16, r30
     6e4:	1f 8b       	std	Y+23, r17	; 0x17
     6e6:	0e 8b       	std	Y+22, r16	; 0x16
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <rw_lo+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6ea:	6d 81       	ldd	r22, Y+5	; 0x05
     6ec:	7e 81       	ldd	r23, Y+6	; 0x06
     6ee:	8f 81       	ldd	r24, Y+7	; 0x07
     6f0:	98 85       	ldd	r25, Y+8	; 0x08
     6f2:	f6 d1       	rcall	.+1004   	; 0xae0 <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	89 87       	std	Y+9, r24	; 0x09
     6fa:	89 85       	ldd	r24, Y+9	; 0x09
     6fc:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6fe:	88 8d       	ldd	r24, Y+24	; 0x18
     700:	18 2f       	mov	r17, r24
     702:	1a 95       	dec	r17
     704:	f1 f7       	brne	.-4      	; 0x702 <rw_lo+0x198>
     706:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(delay_time);
}
     708:	68 96       	adiw	r28, 0x18	; 24
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <e_hi>:

void e_hi()
{
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	68 97       	sbiw	r28, 0x18	; 24
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
	COMMAND_PORT |= E;
     736:	85 e3       	ldi	r24, 0x35	; 53
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	25 e3       	ldi	r18, 0x35	; 53
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	24 60       	ori	r18, 0x04	; 4
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 ea       	ldi	r26, 0xA0	; 160
     74e:	b2 e4       	ldi	r27, 0x42	; 66
     750:	89 83       	std	Y+1, r24	; 0x01
     752:	9a 83       	std	Y+2, r25	; 0x02
     754:	ab 83       	std	Y+3, r26	; 0x03
     756:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     758:	2b ea       	ldi	r18, 0xAB	; 171
     75a:	3a ea       	ldi	r19, 0xAA	; 170
     75c:	4a e2       	ldi	r20, 0x2A	; 42
     75e:	50 e4       	ldi	r21, 0x40	; 64
     760:	69 81       	ldd	r22, Y+1	; 0x01
     762:	7a 81       	ldd	r23, Y+2	; 0x02
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	84 d3       	rcall	.+1800   	; 0xe72 <__mulsf3>
     76a:	dc 01       	movw	r26, r24
     76c:	cb 01       	movw	r24, r22
     76e:	8d 83       	std	Y+5, r24	; 0x05
     770:	9e 83       	std	Y+6, r25	; 0x06
     772:	af 83       	std	Y+7, r26	; 0x07
     774:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e8       	ldi	r20, 0x80	; 128
     77c:	5f e3       	ldi	r21, 0x3F	; 63
     77e:	6d 81       	ldd	r22, Y+5	; 0x05
     780:	7e 81       	ldd	r23, Y+6	; 0x06
     782:	8f 81       	ldd	r24, Y+7	; 0x07
     784:	98 85       	ldd	r25, Y+8	; 0x08
     786:	47 d5       	rcall	.+2702   	; 0x1216 <__ltsf2>
     788:	88 23       	and	r24, r24
     78a:	1c f4       	brge	.+6      	; 0x792 <e_hi+0x74>
		__ticks = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	89 87       	std	Y+9, r24	; 0x09
     790:	8e c0       	rjmp	.+284    	; 0x8ae <e_hi+0x190>
	else if (__tmp > 255)
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4f e7       	ldi	r20, 0x7F	; 127
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	6d 81       	ldd	r22, Y+5	; 0x05
     79c:	7e 81       	ldd	r23, Y+6	; 0x06
     79e:	8f 81       	ldd	r24, Y+7	; 0x07
     7a0:	98 85       	ldd	r25, Y+8	; 0x08
     7a2:	e5 d4       	rcall	.+2506   	; 0x116e <__gtsf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	0c f0       	brlt	.+2      	; 0x7aa <e_hi+0x8c>
     7a8:	7a c0       	rjmp	.+244    	; 0x89e <e_hi+0x180>
	{
		_delay_ms(__us / 1000.0);
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	4a e7       	ldi	r20, 0x7A	; 122
     7b0:	54 e4       	ldi	r21, 0x44	; 68
     7b2:	69 81       	ldd	r22, Y+1	; 0x01
     7b4:	7a 81       	ldd	r23, Y+2	; 0x02
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	3b d4       	rcall	.+2166   	; 0x1032 <__divsf3>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	8a 87       	std	Y+10, r24	; 0x0a
     7c2:	9b 87       	std	Y+11, r25	; 0x0b
     7c4:	ac 87       	std	Y+12, r26	; 0x0c
     7c6:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	4a ef       	ldi	r20, 0xFA	; 250
     7ce:	54 e4       	ldi	r21, 0x44	; 68
     7d0:	6a 85       	ldd	r22, Y+10	; 0x0a
     7d2:	7b 85       	ldd	r23, Y+11	; 0x0b
     7d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d6:	9d 85       	ldd	r25, Y+13	; 0x0d
     7d8:	4c d3       	rcall	.+1688   	; 0xe72 <__mulsf3>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	8e 87       	std	Y+14, r24	; 0x0e
     7e0:	9f 87       	std	Y+15, r25	; 0x0f
     7e2:	a8 8b       	std	Y+16, r26	; 0x10
     7e4:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	6e 85       	ldd	r22, Y+14	; 0x0e
     7f0:	7f 85       	ldd	r23, Y+15	; 0x0f
     7f2:	88 89       	ldd	r24, Y+16	; 0x10
     7f4:	99 89       	ldd	r25, Y+17	; 0x11
     7f6:	0f d5       	rcall	.+2590   	; 0x1216 <__ltsf2>
     7f8:	88 23       	and	r24, r24
     7fa:	2c f4       	brge	.+10     	; 0x806 <e_hi+0xe8>
		__ticks = 1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	9b 8b       	std	Y+19, r25	; 0x13
     802:	8a 8b       	std	Y+18, r24	; 0x12
     804:	3e c0       	rjmp	.+124    	; 0x882 <e_hi+0x164>
	else if (__tmp > 65535)
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	3f ef       	ldi	r19, 0xFF	; 255
     80a:	4f e7       	ldi	r20, 0x7F	; 127
     80c:	57 e4       	ldi	r21, 0x47	; 71
     80e:	6e 85       	ldd	r22, Y+14	; 0x0e
     810:	7f 85       	ldd	r23, Y+15	; 0x0f
     812:	88 89       	ldd	r24, Y+16	; 0x10
     814:	99 89       	ldd	r25, Y+17	; 0x11
     816:	ab d4       	rcall	.+2390   	; 0x116e <__gtsf2>
     818:	18 16       	cp	r1, r24
     81a:	54 f5       	brge	.+84     	; 0x870 <e_hi+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e2       	ldi	r20, 0x20	; 32
     822:	51 e4       	ldi	r21, 0x41	; 65
     824:	6a 85       	ldd	r22, Y+10	; 0x0a
     826:	7b 85       	ldd	r23, Y+11	; 0x0b
     828:	8c 85       	ldd	r24, Y+12	; 0x0c
     82a:	9d 85       	ldd	r25, Y+13	; 0x0d
     82c:	22 d3       	rcall	.+1604   	; 0xe72 <__mulsf3>
     82e:	dc 01       	movw	r26, r24
     830:	cb 01       	movw	r24, r22
     832:	bc 01       	movw	r22, r24
     834:	cd 01       	movw	r24, r26
     836:	54 d1       	rcall	.+680    	; 0xae0 <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9b 8b       	std	Y+19, r25	; 0x13
     83e:	8a 8b       	std	Y+18, r24	; 0x12
     840:	12 c0       	rjmp	.+36     	; 0x866 <e_hi+0x148>
     842:	88 ec       	ldi	r24, 0xC8	; 200
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9d 8b       	std	Y+21, r25	; 0x15
     848:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     84a:	8c 89       	ldd	r24, Y+20	; 0x14
     84c:	9d 89       	ldd	r25, Y+21	; 0x15
     84e:	8c 01       	movw	r16, r24
     850:	c8 01       	movw	r24, r16
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	f1 f7       	brne	.-4      	; 0x852 <e_hi+0x134>
     856:	8c 01       	movw	r16, r24
     858:	1d 8b       	std	Y+21, r17	; 0x15
     85a:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     85c:	8a 89       	ldd	r24, Y+18	; 0x12
     85e:	9b 89       	ldd	r25, Y+19	; 0x13
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	9b 8b       	std	Y+19, r25	; 0x13
     864:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     866:	8a 89       	ldd	r24, Y+18	; 0x12
     868:	9b 89       	ldd	r25, Y+19	; 0x13
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	51 f7       	brne	.-44     	; 0x842 <e_hi+0x124>
     86e:	26 c0       	rjmp	.+76     	; 0x8bc <e_hi+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     870:	6e 85       	ldd	r22, Y+14	; 0x0e
     872:	7f 85       	ldd	r23, Y+15	; 0x0f
     874:	88 89       	ldd	r24, Y+16	; 0x10
     876:	99 89       	ldd	r25, Y+17	; 0x11
     878:	33 d1       	rcall	.+614    	; 0xae0 <__fixunssfsi>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	9b 8b       	std	Y+19, r25	; 0x13
     880:	8a 8b       	std	Y+18, r24	; 0x12
     882:	8a 89       	ldd	r24, Y+18	; 0x12
     884:	9b 89       	ldd	r25, Y+19	; 0x13
     886:	9f 8b       	std	Y+23, r25	; 0x17
     888:	8e 8b       	std	Y+22, r24	; 0x16
     88a:	8e 89       	ldd	r24, Y+22	; 0x16
     88c:	9f 89       	ldd	r25, Y+23	; 0x17
     88e:	8c 01       	movw	r16, r24
     890:	f8 01       	movw	r30, r16
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <e_hi+0x174>
     896:	8f 01       	movw	r16, r30
     898:	1f 8b       	std	Y+23, r17	; 0x17
     89a:	0e 8b       	std	Y+22, r16	; 0x16
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <e_hi+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     89e:	6d 81       	ldd	r22, Y+5	; 0x05
     8a0:	7e 81       	ldd	r23, Y+6	; 0x06
     8a2:	8f 81       	ldd	r24, Y+7	; 0x07
     8a4:	98 85       	ldd	r25, Y+8	; 0x08
     8a6:	1c d1       	rcall	.+568    	; 0xae0 <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	89 87       	std	Y+9, r24	; 0x09
     8ae:	89 85       	ldd	r24, Y+9	; 0x09
     8b0:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8b2:	88 8d       	ldd	r24, Y+24	; 0x18
     8b4:	18 2f       	mov	r17, r24
     8b6:	1a 95       	dec	r17
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <e_hi+0x198>
     8ba:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(delay_time);
}
     8bc:	68 96       	adiw	r28, 0x18	; 24
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <e_lo>:

void e_lo()
{
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	68 97       	sbiw	r28, 0x18	; 24
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
	COMMAND_PORT &= ~E;
     8ea:	85 e3       	ldi	r24, 0x35	; 53
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	25 e3       	ldi	r18, 0x35	; 53
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	f9 01       	movw	r30, r18
     8f4:	20 81       	ld	r18, Z
     8f6:	2b 7f       	andi	r18, 0xFB	; 251
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 ea       	ldi	r26, 0xA0	; 160
     902:	b2 e4       	ldi	r27, 0x42	; 66
     904:	89 83       	std	Y+1, r24	; 0x01
     906:	9a 83       	std	Y+2, r25	; 0x02
     908:	ab 83       	std	Y+3, r26	; 0x03
     90a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     90c:	2b ea       	ldi	r18, 0xAB	; 171
     90e:	3a ea       	ldi	r19, 0xAA	; 170
     910:	4a e2       	ldi	r20, 0x2A	; 42
     912:	50 e4       	ldi	r21, 0x40	; 64
     914:	69 81       	ldd	r22, Y+1	; 0x01
     916:	7a 81       	ldd	r23, Y+2	; 0x02
     918:	8b 81       	ldd	r24, Y+3	; 0x03
     91a:	9c 81       	ldd	r25, Y+4	; 0x04
     91c:	aa d2       	rcall	.+1364   	; 0xe72 <__mulsf3>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	8d 83       	std	Y+5, r24	; 0x05
     924:	9e 83       	std	Y+6, r25	; 0x06
     926:	af 83       	std	Y+7, r26	; 0x07
     928:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e8       	ldi	r20, 0x80	; 128
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	6d 81       	ldd	r22, Y+5	; 0x05
     934:	7e 81       	ldd	r23, Y+6	; 0x06
     936:	8f 81       	ldd	r24, Y+7	; 0x07
     938:	98 85       	ldd	r25, Y+8	; 0x08
     93a:	6d d4       	rcall	.+2266   	; 0x1216 <__ltsf2>
     93c:	88 23       	and	r24, r24
     93e:	1c f4       	brge	.+6      	; 0x946 <e_lo+0x74>
		__ticks = 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	89 87       	std	Y+9, r24	; 0x09
     944:	8e c0       	rjmp	.+284    	; 0xa62 <e_lo+0x190>
	else if (__tmp > 255)
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	4f e7       	ldi	r20, 0x7F	; 127
     94c:	53 e4       	ldi	r21, 0x43	; 67
     94e:	6d 81       	ldd	r22, Y+5	; 0x05
     950:	7e 81       	ldd	r23, Y+6	; 0x06
     952:	8f 81       	ldd	r24, Y+7	; 0x07
     954:	98 85       	ldd	r25, Y+8	; 0x08
     956:	0b d4       	rcall	.+2070   	; 0x116e <__gtsf2>
     958:	18 16       	cp	r1, r24
     95a:	0c f0       	brlt	.+2      	; 0x95e <e_lo+0x8c>
     95c:	7a c0       	rjmp	.+244    	; 0xa52 <e_lo+0x180>
	{
		_delay_ms(__us / 1000.0);
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4a e7       	ldi	r20, 0x7A	; 122
     964:	54 e4       	ldi	r21, 0x44	; 68
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	7a 81       	ldd	r23, Y+2	; 0x02
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	61 d3       	rcall	.+1730   	; 0x1032 <__divsf3>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	8a 87       	std	Y+10, r24	; 0x0a
     976:	9b 87       	std	Y+11, r25	; 0x0b
     978:	ac 87       	std	Y+12, r26	; 0x0c
     97a:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	4a ef       	ldi	r20, 0xFA	; 250
     982:	54 e4       	ldi	r21, 0x44	; 68
     984:	6a 85       	ldd	r22, Y+10	; 0x0a
     986:	7b 85       	ldd	r23, Y+11	; 0x0b
     988:	8c 85       	ldd	r24, Y+12	; 0x0c
     98a:	9d 85       	ldd	r25, Y+13	; 0x0d
     98c:	72 d2       	rcall	.+1252   	; 0xe72 <__mulsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	8e 87       	std	Y+14, r24	; 0x0e
     994:	9f 87       	std	Y+15, r25	; 0x0f
     996:	a8 8b       	std	Y+16, r26	; 0x10
     998:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e8       	ldi	r20, 0x80	; 128
     9a0:	5f e3       	ldi	r21, 0x3F	; 63
     9a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     9a4:	7f 85       	ldd	r23, Y+15	; 0x0f
     9a6:	88 89       	ldd	r24, Y+16	; 0x10
     9a8:	99 89       	ldd	r25, Y+17	; 0x11
     9aa:	35 d4       	rcall	.+2154   	; 0x1216 <__ltsf2>
     9ac:	88 23       	and	r24, r24
     9ae:	2c f4       	brge	.+10     	; 0x9ba <e_lo+0xe8>
		__ticks = 1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	9b 8b       	std	Y+19, r25	; 0x13
     9b6:	8a 8b       	std	Y+18, r24	; 0x12
     9b8:	3e c0       	rjmp	.+124    	; 0xa36 <e_lo+0x164>
	else if (__tmp > 65535)
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	3f ef       	ldi	r19, 0xFF	; 255
     9be:	4f e7       	ldi	r20, 0x7F	; 127
     9c0:	57 e4       	ldi	r21, 0x47	; 71
     9c2:	6e 85       	ldd	r22, Y+14	; 0x0e
     9c4:	7f 85       	ldd	r23, Y+15	; 0x0f
     9c6:	88 89       	ldd	r24, Y+16	; 0x10
     9c8:	99 89       	ldd	r25, Y+17	; 0x11
     9ca:	d1 d3       	rcall	.+1954   	; 0x116e <__gtsf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	54 f5       	brge	.+84     	; 0xa24 <e_lo+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e2       	ldi	r20, 0x20	; 32
     9d6:	51 e4       	ldi	r21, 0x41	; 65
     9d8:	6a 85       	ldd	r22, Y+10	; 0x0a
     9da:	7b 85       	ldd	r23, Y+11	; 0x0b
     9dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     9de:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e0:	48 d2       	rcall	.+1168   	; 0xe72 <__mulsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	bc 01       	movw	r22, r24
     9e8:	cd 01       	movw	r24, r26
     9ea:	7a d0       	rcall	.+244    	; 0xae0 <__fixunssfsi>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	9b 8b       	std	Y+19, r25	; 0x13
     9f2:	8a 8b       	std	Y+18, r24	; 0x12
     9f4:	12 c0       	rjmp	.+36     	; 0xa1a <e_lo+0x148>
     9f6:	88 ec       	ldi	r24, 0xC8	; 200
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	9d 8b       	std	Y+21, r25	; 0x15
     9fc:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9fe:	8c 89       	ldd	r24, Y+20	; 0x14
     a00:	9d 89       	ldd	r25, Y+21	; 0x15
     a02:	8c 01       	movw	r16, r24
     a04:	c8 01       	movw	r24, r16
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <e_lo+0x134>
     a0a:	8c 01       	movw	r16, r24
     a0c:	1d 8b       	std	Y+21, r17	; 0x15
     a0e:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a10:	8a 89       	ldd	r24, Y+18	; 0x12
     a12:	9b 89       	ldd	r25, Y+19	; 0x13
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	9b 8b       	std	Y+19, r25	; 0x13
     a18:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a1a:	8a 89       	ldd	r24, Y+18	; 0x12
     a1c:	9b 89       	ldd	r25, Y+19	; 0x13
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	51 f7       	brne	.-44     	; 0x9f6 <e_lo+0x124>
     a22:	26 c0       	rjmp	.+76     	; 0xa70 <e_lo+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a24:	6e 85       	ldd	r22, Y+14	; 0x0e
     a26:	7f 85       	ldd	r23, Y+15	; 0x0f
     a28:	88 89       	ldd	r24, Y+16	; 0x10
     a2a:	99 89       	ldd	r25, Y+17	; 0x11
     a2c:	59 d0       	rcall	.+178    	; 0xae0 <__fixunssfsi>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	9b 8b       	std	Y+19, r25	; 0x13
     a34:	8a 8b       	std	Y+18, r24	; 0x12
     a36:	8a 89       	ldd	r24, Y+18	; 0x12
     a38:	9b 89       	ldd	r25, Y+19	; 0x13
     a3a:	9f 8b       	std	Y+23, r25	; 0x17
     a3c:	8e 8b       	std	Y+22, r24	; 0x16
     a3e:	8e 89       	ldd	r24, Y+22	; 0x16
     a40:	9f 89       	ldd	r25, Y+23	; 0x17
     a42:	8c 01       	movw	r16, r24
     a44:	f8 01       	movw	r30, r16
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <e_lo+0x174>
     a4a:	8f 01       	movw	r16, r30
     a4c:	1f 8b       	std	Y+23, r17	; 0x17
     a4e:	0e 8b       	std	Y+22, r16	; 0x16
     a50:	0f c0       	rjmp	.+30     	; 0xa70 <e_lo+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a52:	6d 81       	ldd	r22, Y+5	; 0x05
     a54:	7e 81       	ldd	r23, Y+6	; 0x06
     a56:	8f 81       	ldd	r24, Y+7	; 0x07
     a58:	98 85       	ldd	r25, Y+8	; 0x08
     a5a:	42 d0       	rcall	.+132    	; 0xae0 <__fixunssfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	89 87       	std	Y+9, r24	; 0x09
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a66:	88 8d       	ldd	r24, Y+24	; 0x18
     a68:	18 2f       	mov	r17, r24
     a6a:	1a 95       	dec	r17
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <e_lo+0x198>
     a6e:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(delay_time);
}
     a70:	68 96       	adiw	r28, 0x18	; 24
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <main>:

int main(void)
{
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
	COMMAND_DIR = 0xff;	// set command port to output
     a8e:	84 e3       	ldi	r24, 0x34	; 52
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	2f ef       	ldi	r18, 0xFF	; 255
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
	COMMAND_PORT = 0; 	// and all outputs to low
     a98:	85 e3       	ldi	r24, 0x35	; 53
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	10 82       	st	Z, r1
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0

}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <glcd_init>:

void glcd_init()
{
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	e_lo();
     ab2:	0f df       	rcall	.-482    	; 0x8d2 <e_lo>
	rs_lo();
     ab4:	a6 db       	rcall	.-2228   	; 0x202 <rs_lo>
	rw_lo();
     ab6:	59 dd       	rcall	.-1358   	; 0x56a <rw_lo>
	DATA_PORT = 0x30;	// set 8-bit interface, basic instruction set
     ab8:	88 e3       	ldi	r24, 0x38	; 56
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	20 e3       	ldi	r18, 0x30	; 48
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
	e_hi();				// and latch it in by toggling E high then low
     ac2:	2d de       	rcall	.-934    	; 0x71e <e_hi>
	e_lo();
     ac4:	06 df       	rcall	.-500    	; 0x8d2 <e_lo>




}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <set_mode>:

void set_mode(uint8_t mode)		// mode 0 = character, mode 1 = graphic
{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	1f 92       	push	r1
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	89 83       	std	Y+1, r24	; 0x01


}
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <__fixunssfsi>:
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	6b 01       	movw	r12, r22
     aee:	7c 01       	movw	r14, r24
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	5f e4       	ldi	r21, 0x4F	; 79
     af8:	64 d3       	rcall	.+1736   	; 0x11c2 <__gesf2>
     afa:	87 fd       	sbrc	r24, 7
     afc:	0c c0       	rjmp	.+24     	; 0xb16 <__fixunssfsi+0x36>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	5f e4       	ldi	r21, 0x4F	; 79
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	89 d1       	rcall	.+786    	; 0xe1e <__subsf3>
     b0c:	ae d3       	rcall	.+1884   	; 0x126a <__fixsfsi>
     b0e:	8b 01       	movw	r16, r22
     b10:	9c 01       	movw	r18, r24
     b12:	30 58       	subi	r19, 0x80	; 128
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <__fixunssfsi+0x40>
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	a7 d3       	rcall	.+1870   	; 0x126a <__fixsfsi>
     b1c:	8b 01       	movw	r16, r22
     b1e:	9c 01       	movw	r18, r24
     b20:	b8 01       	movw	r22, r16
     b22:	c9 01       	movw	r24, r18
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	08 95       	ret

00000b32 <_fpadd_parts>:
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ee e9       	ldi	r30, 0x9E	; 158
     b38:	f5 e0       	ldi	r31, 0x05	; 5
     b3a:	78 c5       	rjmp	.+2800   	; 0x162c <__prologue_saves__+0x8>
     b3c:	3c 01       	movw	r6, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	ea 01       	movw	r28, r20
     b42:	d3 01       	movw	r26, r6
     b44:	2c 91       	ld	r18, X
     b46:	22 30       	cpi	r18, 0x02	; 2
     b48:	08 f4       	brcc	.+2      	; 0xb4c <_fpadd_parts+0x1a>
     b4a:	3e c1       	rjmp	.+636    	; 0xdc8 <_fpadd_parts+0x296>
     b4c:	fb 01       	movw	r30, r22
     b4e:	30 81       	ld	r19, Z
     b50:	32 30       	cpi	r19, 0x02	; 2
     b52:	08 f4       	brcc	.+2      	; 0xb56 <_fpadd_parts+0x24>
     b54:	36 c1       	rjmp	.+620    	; 0xdc2 <_fpadd_parts+0x290>
     b56:	24 30       	cpi	r18, 0x04	; 4
     b58:	71 f4       	brne	.+28     	; 0xb76 <_fpadd_parts+0x44>
     b5a:	34 30       	cpi	r19, 0x04	; 4
     b5c:	09 f0       	breq	.+2      	; 0xb60 <_fpadd_parts+0x2e>
     b5e:	34 c1       	rjmp	.+616    	; 0xdc8 <_fpadd_parts+0x296>
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	2c 91       	ld	r18, X
     b64:	81 81       	ldd	r24, Z+1	; 0x01
     b66:	28 17       	cp	r18, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <_fpadd_parts+0x3a>
     b6a:	2e c1       	rjmp	.+604    	; 0xdc8 <_fpadd_parts+0x296>
     b6c:	b2 e6       	ldi	r27, 0x62	; 98
     b6e:	6b 2e       	mov	r6, r27
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	7b 2e       	mov	r7, r27
     b74:	29 c1       	rjmp	.+594    	; 0xdc8 <_fpadd_parts+0x296>
     b76:	34 30       	cpi	r19, 0x04	; 4
     b78:	09 f4       	brne	.+2      	; 0xb7c <_fpadd_parts+0x4a>
     b7a:	23 c1       	rjmp	.+582    	; 0xdc2 <_fpadd_parts+0x290>
     b7c:	32 30       	cpi	r19, 0x02	; 2
     b7e:	91 f4       	brne	.+36     	; 0xba4 <_fpadd_parts+0x72>
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	09 f0       	breq	.+2      	; 0xb86 <_fpadd_parts+0x54>
     b84:	21 c1       	rjmp	.+578    	; 0xdc8 <_fpadd_parts+0x296>
     b86:	28 e0       	ldi	r18, 0x08	; 8
     b88:	f3 01       	movw	r30, r6
     b8a:	da 01       	movw	r26, r20
     b8c:	01 90       	ld	r0, Z+
     b8e:	0d 92       	st	X+, r0
     b90:	2a 95       	dec	r18
     b92:	e1 f7       	brne	.-8      	; 0xb8c <_fpadd_parts+0x5a>
     b94:	db 01       	movw	r26, r22
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	8c 91       	ld	r24, X
     b9a:	f3 01       	movw	r30, r6
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	89 23       	and	r24, r25
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	11 c1       	rjmp	.+546    	; 0xdc6 <_fpadd_parts+0x294>
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	09 f4       	brne	.+2      	; 0xbaa <_fpadd_parts+0x78>
     ba8:	0c c1       	rjmp	.+536    	; 0xdc2 <_fpadd_parts+0x290>
     baa:	d3 01       	movw	r26, r6
     bac:	12 96       	adiw	r26, 0x02	; 2
     bae:	ed 91       	ld	r30, X+
     bb0:	fc 91       	ld	r31, X
     bb2:	13 97       	sbiw	r26, 0x03	; 3
     bb4:	db 01       	movw	r26, r22
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	6d 91       	ld	r22, X+
     bba:	7c 91       	ld	r23, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	d3 01       	movw	r26, r6
     bc0:	14 96       	adiw	r26, 0x04	; 4
     bc2:	0d 91       	ld	r16, X+
     bc4:	1d 91       	ld	r17, X+
     bc6:	2d 91       	ld	r18, X+
     bc8:	3c 91       	ld	r19, X
     bca:	17 97       	sbiw	r26, 0x07	; 7
     bcc:	dc 01       	movw	r26, r24
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	cd 90       	ld	r12, X+
     bd2:	dd 90       	ld	r13, X+
     bd4:	ed 90       	ld	r14, X+
     bd6:	fc 90       	ld	r15, X
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	af 01       	movw	r20, r30
     bdc:	46 1b       	sub	r20, r22
     bde:	57 0b       	sbc	r21, r23
     be0:	da 01       	movw	r26, r20
     be2:	57 ff       	sbrs	r21, 7
     be4:	04 c0       	rjmp	.+8      	; 0xbee <_fpadd_parts+0xbc>
     be6:	aa 27       	eor	r26, r26
     be8:	bb 27       	eor	r27, r27
     bea:	a4 1b       	sub	r26, r20
     bec:	b5 0b       	sbc	r27, r21
     bee:	a0 32       	cpi	r26, 0x20	; 32
     bf0:	b1 05       	cpc	r27, r1
     bf2:	0c f0       	brlt	.+2      	; 0xbf6 <_fpadd_parts+0xc4>
     bf4:	65 c0       	rjmp	.+202    	; 0xcc0 <_fpadd_parts+0x18e>
     bf6:	14 16       	cp	r1, r20
     bf8:	15 06       	cpc	r1, r21
     bfa:	7c f5       	brge	.+94     	; 0xc5a <_fpadd_parts+0x128>
     bfc:	b7 01       	movw	r22, r14
     bfe:	a6 01       	movw	r20, r12
     c00:	0a 2e       	mov	r0, r26
     c02:	04 c0       	rjmp	.+8      	; 0xc0c <_fpadd_parts+0xda>
     c04:	76 95       	lsr	r23
     c06:	67 95       	ror	r22
     c08:	57 95       	ror	r21
     c0a:	47 95       	ror	r20
     c0c:	0a 94       	dec	r0
     c0e:	d2 f7       	brpl	.-12     	; 0xc04 <_fpadd_parts+0xd2>
     c10:	81 2c       	mov	r8, r1
     c12:	91 2c       	mov	r9, r1
     c14:	54 01       	movw	r10, r8
     c16:	83 94       	inc	r8
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <_fpadd_parts+0xf0>
     c1a:	88 0c       	add	r8, r8
     c1c:	99 1c       	adc	r9, r9
     c1e:	aa 1c       	adc	r10, r10
     c20:	bb 1c       	adc	r11, r11
     c22:	aa 95       	dec	r26
     c24:	d2 f7       	brpl	.-12     	; 0xc1a <_fpadd_parts+0xe8>
     c26:	b1 e0       	ldi	r27, 0x01	; 1
     c28:	8b 1a       	sub	r8, r27
     c2a:	91 08       	sbc	r9, r1
     c2c:	a1 08       	sbc	r10, r1
     c2e:	b1 08       	sbc	r11, r1
     c30:	8c 20       	and	r8, r12
     c32:	9d 20       	and	r9, r13
     c34:	ae 20       	and	r10, r14
     c36:	bf 20       	and	r11, r15
     c38:	c1 2c       	mov	r12, r1
     c3a:	d1 2c       	mov	r13, r1
     c3c:	76 01       	movw	r14, r12
     c3e:	c3 94       	inc	r12
     c40:	81 14       	cp	r8, r1
     c42:	91 04       	cpc	r9, r1
     c44:	a1 04       	cpc	r10, r1
     c46:	b1 04       	cpc	r11, r1
     c48:	19 f4       	brne	.+6      	; 0xc50 <_fpadd_parts+0x11e>
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	76 01       	movw	r14, r12
     c50:	c4 2a       	or	r12, r20
     c52:	d5 2a       	or	r13, r21
     c54:	e6 2a       	or	r14, r22
     c56:	f7 2a       	or	r15, r23
     c58:	3e c0       	rjmp	.+124    	; 0xcd6 <_fpadd_parts+0x1a4>
     c5a:	45 2b       	or	r20, r21
     c5c:	e1 f1       	breq	.+120    	; 0xcd6 <_fpadd_parts+0x1a4>
     c5e:	ea 0f       	add	r30, r26
     c60:	fb 1f       	adc	r31, r27
     c62:	b9 01       	movw	r22, r18
     c64:	a8 01       	movw	r20, r16
     c66:	0a 2e       	mov	r0, r26
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <_fpadd_parts+0x140>
     c6a:	76 95       	lsr	r23
     c6c:	67 95       	ror	r22
     c6e:	57 95       	ror	r21
     c70:	47 95       	ror	r20
     c72:	0a 94       	dec	r0
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <_fpadd_parts+0x138>
     c76:	81 2c       	mov	r8, r1
     c78:	91 2c       	mov	r9, r1
     c7a:	54 01       	movw	r10, r8
     c7c:	83 94       	inc	r8
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <_fpadd_parts+0x156>
     c80:	88 0c       	add	r8, r8
     c82:	99 1c       	adc	r9, r9
     c84:	aa 1c       	adc	r10, r10
     c86:	bb 1c       	adc	r11, r11
     c88:	aa 95       	dec	r26
     c8a:	d2 f7       	brpl	.-12     	; 0xc80 <_fpadd_parts+0x14e>
     c8c:	a1 e0       	ldi	r26, 0x01	; 1
     c8e:	8a 1a       	sub	r8, r26
     c90:	91 08       	sbc	r9, r1
     c92:	a1 08       	sbc	r10, r1
     c94:	b1 08       	sbc	r11, r1
     c96:	80 22       	and	r8, r16
     c98:	91 22       	and	r9, r17
     c9a:	a2 22       	and	r10, r18
     c9c:	b3 22       	and	r11, r19
     c9e:	01 e0       	ldi	r16, 0x01	; 1
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	81 14       	cp	r8, r1
     ca8:	91 04       	cpc	r9, r1
     caa:	a1 04       	cpc	r10, r1
     cac:	b1 04       	cpc	r11, r1
     cae:	19 f4       	brne	.+6      	; 0xcb6 <_fpadd_parts+0x184>
     cb0:	00 e0       	ldi	r16, 0x00	; 0
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	98 01       	movw	r18, r16
     cb6:	04 2b       	or	r16, r20
     cb8:	15 2b       	or	r17, r21
     cba:	26 2b       	or	r18, r22
     cbc:	37 2b       	or	r19, r23
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <_fpadd_parts+0x1a4>
     cc0:	6e 17       	cp	r22, r30
     cc2:	7f 07       	cpc	r23, r31
     cc4:	24 f4       	brge	.+8      	; 0xcce <_fpadd_parts+0x19c>
     cc6:	c1 2c       	mov	r12, r1
     cc8:	d1 2c       	mov	r13, r1
     cca:	76 01       	movw	r14, r12
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <_fpadd_parts+0x1a4>
     cce:	fb 01       	movw	r30, r22
     cd0:	00 e0       	ldi	r16, 0x00	; 0
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	98 01       	movw	r18, r16
     cd6:	d3 01       	movw	r26, r6
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	4c 91       	ld	r20, X
     cdc:	dc 01       	movw	r26, r24
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	8c 91       	ld	r24, X
     ce2:	48 17       	cp	r20, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <_fpadd_parts+0x1b6>
     ce6:	42 c0       	rjmp	.+132    	; 0xd6c <_fpadd_parts+0x23a>
     ce8:	44 23       	and	r20, r20
     cea:	49 f0       	breq	.+18     	; 0xcfe <_fpadd_parts+0x1cc>
     cec:	d7 01       	movw	r26, r14
     cee:	c6 01       	movw	r24, r12
     cf0:	80 1b       	sub	r24, r16
     cf2:	91 0b       	sbc	r25, r17
     cf4:	a2 0b       	sbc	r26, r18
     cf6:	b3 0b       	sbc	r27, r19
     cf8:	8c 01       	movw	r16, r24
     cfa:	9d 01       	movw	r18, r26
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <_fpadd_parts+0x1d4>
     cfe:	0c 19       	sub	r16, r12
     d00:	1d 09       	sbc	r17, r13
     d02:	2e 09       	sbc	r18, r14
     d04:	3f 09       	sbc	r19, r15
     d06:	37 fd       	sbrc	r19, 7
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <_fpadd_parts+0x1e0>
     d0a:	19 82       	std	Y+1, r1	; 0x01
     d0c:	fb 83       	std	Y+3, r31	; 0x03
     d0e:	ea 83       	std	Y+2, r30	; 0x02
     d10:	0b c0       	rjmp	.+22     	; 0xd28 <_fpadd_parts+0x1f6>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	fb 83       	std	Y+3, r31	; 0x03
     d18:	ea 83       	std	Y+2, r30	; 0x02
     d1a:	30 95       	com	r19
     d1c:	20 95       	com	r18
     d1e:	10 95       	com	r17
     d20:	01 95       	neg	r16
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	2f 4f       	sbci	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	0c 83       	std	Y+4, r16	; 0x04
     d2a:	1d 83       	std	Y+5, r17	; 0x05
     d2c:	2e 83       	std	Y+6, r18	; 0x06
     d2e:	3f 83       	std	Y+7, r19	; 0x07
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <_fpadd_parts+0x21a>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	aa 1f       	adc	r26, r26
     d38:	bb 1f       	adc	r27, r27
     d3a:	8c 83       	std	Y+4, r24	; 0x04
     d3c:	9d 83       	std	Y+5, r25	; 0x05
     d3e:	ae 83       	std	Y+6, r26	; 0x06
     d40:	bf 83       	std	Y+7, r27	; 0x07
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9b 83       	std	Y+3, r25	; 0x03
     d4a:	8a 83       	std	Y+2, r24	; 0x02
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	ae 81       	ldd	r26, Y+6	; 0x06
     d52:	bf 81       	ldd	r27, Y+7	; 0x07
     d54:	8c 01       	movw	r16, r24
     d56:	9d 01       	movw	r18, r26
     d58:	01 50       	subi	r16, 0x01	; 1
     d5a:	11 09       	sbc	r17, r1
     d5c:	21 09       	sbc	r18, r1
     d5e:	31 09       	sbc	r19, r1
     d60:	0f 3f       	cpi	r16, 0xFF	; 255
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	2f 4f       	sbci	r18, 0xFF	; 255
     d66:	3f 43       	sbci	r19, 0x3F	; 63
     d68:	20 f3       	brcs	.-56     	; 0xd32 <_fpadd_parts+0x200>
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <_fpadd_parts+0x250>
     d6c:	49 83       	std	Y+1, r20	; 0x01
     d6e:	fb 83       	std	Y+3, r31	; 0x03
     d70:	ea 83       	std	Y+2, r30	; 0x02
     d72:	0c 0d       	add	r16, r12
     d74:	1d 1d       	adc	r17, r13
     d76:	2e 1d       	adc	r18, r14
     d78:	3f 1d       	adc	r19, r15
     d7a:	0c 83       	std	Y+4, r16	; 0x04
     d7c:	1d 83       	std	Y+5, r17	; 0x05
     d7e:	2e 83       	std	Y+6, r18	; 0x06
     d80:	3f 83       	std	Y+7, r19	; 0x07
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	88 83       	st	Y, r24
     d86:	0c 81       	ldd	r16, Y+4	; 0x04
     d88:	1d 81       	ldd	r17, Y+5	; 0x05
     d8a:	2e 81       	ldd	r18, Y+6	; 0x06
     d8c:	3f 81       	ldd	r19, Y+7	; 0x07
     d8e:	37 ff       	sbrs	r19, 7
     d90:	1a c0       	rjmp	.+52     	; 0xdc6 <_fpadd_parts+0x294>
     d92:	d9 01       	movw	r26, r18
     d94:	c8 01       	movw	r24, r16
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	99 27       	eor	r25, r25
     d9a:	aa 27       	eor	r26, r26
     d9c:	bb 27       	eor	r27, r27
     d9e:	36 95       	lsr	r19
     da0:	27 95       	ror	r18
     da2:	17 95       	ror	r17
     da4:	07 95       	ror	r16
     da6:	80 2b       	or	r24, r16
     da8:	91 2b       	or	r25, r17
     daa:	a2 2b       	or	r26, r18
     dac:	b3 2b       	or	r27, r19
     dae:	8c 83       	std	Y+4, r24	; 0x04
     db0:	9d 83       	std	Y+5, r25	; 0x05
     db2:	ae 83       	std	Y+6, r26	; 0x06
     db4:	bf 83       	std	Y+7, r27	; 0x07
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	9b 83       	std	Y+3, r25	; 0x03
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <_fpadd_parts+0x294>
     dc2:	3c 01       	movw	r6, r24
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <_fpadd_parts+0x296>
     dc6:	3e 01       	movw	r6, r28
     dc8:	c3 01       	movw	r24, r6
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	ee e0       	ldi	r30, 0x0E	; 14
     dd0:	49 c4       	rjmp	.+2194   	; 0x1664 <__epilogue_restores__+0x8>

00000dd2 <__addsf3>:
     dd2:	a0 e2       	ldi	r26, 0x20	; 32
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ee ee       	ldi	r30, 0xEE	; 238
     dd8:	f6 e0       	ldi	r31, 0x06	; 6
     dda:	34 c4       	rjmp	.+2152   	; 0x1644 <__prologue_saves__+0x20>
     ddc:	6d 8f       	std	Y+29, r22	; 0x1d
     dde:	7e 8f       	std	Y+30, r23	; 0x1e
     de0:	8f 8f       	std	Y+31, r24	; 0x1f
     de2:	98 a3       	std	Y+32, r25	; 0x20
     de4:	29 8f       	std	Y+25, r18	; 0x19
     de6:	3a 8f       	std	Y+26, r19	; 0x1a
     de8:	4b 8f       	std	Y+27, r20	; 0x1b
     dea:	5c 8f       	std	Y+28, r21	; 0x1c
     dec:	be 01       	movw	r22, r28
     dee:	6f 5e       	subi	r22, 0xEF	; 239
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	ce 01       	movw	r24, r28
     df4:	4d 96       	adiw	r24, 0x1d	; 29
     df6:	46 d3       	rcall	.+1676   	; 0x1484 <__unpack_f>
     df8:	be 01       	movw	r22, r28
     dfa:	67 5f       	subi	r22, 0xF7	; 247
     dfc:	7f 4f       	sbci	r23, 0xFF	; 255
     dfe:	ce 01       	movw	r24, r28
     e00:	49 96       	adiw	r24, 0x19	; 25
     e02:	40 d3       	rcall	.+1664   	; 0x1484 <__unpack_f>
     e04:	ae 01       	movw	r20, r28
     e06:	4f 5f       	subi	r20, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	be 01       	movw	r22, r28
     e0c:	67 5f       	subi	r22, 0xF7	; 247
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	41 96       	adiw	r24, 0x11	; 17
     e14:	8e de       	rcall	.-740    	; 0xb32 <_fpadd_parts>
     e16:	75 d2       	rcall	.+1258   	; 0x1302 <__pack_f>
     e18:	a0 96       	adiw	r28, 0x20	; 32
     e1a:	e2 e0       	ldi	r30, 0x02	; 2
     e1c:	2f c4       	rjmp	.+2142   	; 0x167c <__epilogue_restores__+0x20>

00000e1e <__subsf3>:
     e1e:	a0 e2       	ldi	r26, 0x20	; 32
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e4 e1       	ldi	r30, 0x14	; 20
     e24:	f7 e0       	ldi	r31, 0x07	; 7
     e26:	0e c4       	rjmp	.+2076   	; 0x1644 <__prologue_saves__+0x20>
     e28:	6d 8f       	std	Y+29, r22	; 0x1d
     e2a:	7e 8f       	std	Y+30, r23	; 0x1e
     e2c:	8f 8f       	std	Y+31, r24	; 0x1f
     e2e:	98 a3       	std	Y+32, r25	; 0x20
     e30:	29 8f       	std	Y+25, r18	; 0x19
     e32:	3a 8f       	std	Y+26, r19	; 0x1a
     e34:	4b 8f       	std	Y+27, r20	; 0x1b
     e36:	5c 8f       	std	Y+28, r21	; 0x1c
     e38:	be 01       	movw	r22, r28
     e3a:	6f 5e       	subi	r22, 0xEF	; 239
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	ce 01       	movw	r24, r28
     e40:	4d 96       	adiw	r24, 0x1d	; 29
     e42:	20 d3       	rcall	.+1600   	; 0x1484 <__unpack_f>
     e44:	be 01       	movw	r22, r28
     e46:	67 5f       	subi	r22, 0xF7	; 247
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	ce 01       	movw	r24, r28
     e4c:	49 96       	adiw	r24, 0x19	; 25
     e4e:	1a d3       	rcall	.+1588   	; 0x1484 <__unpack_f>
     e50:	8a 85       	ldd	r24, Y+10	; 0x0a
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	89 27       	eor	r24, r25
     e56:	8a 87       	std	Y+10, r24	; 0x0a
     e58:	ae 01       	movw	r20, r28
     e5a:	4f 5f       	subi	r20, 0xFF	; 255
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	be 01       	movw	r22, r28
     e60:	67 5f       	subi	r22, 0xF7	; 247
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	ce 01       	movw	r24, r28
     e66:	41 96       	adiw	r24, 0x11	; 17
     e68:	64 de       	rcall	.-824    	; 0xb32 <_fpadd_parts>
     e6a:	4b d2       	rcall	.+1174   	; 0x1302 <__pack_f>
     e6c:	a0 96       	adiw	r28, 0x20	; 32
     e6e:	e2 e0       	ldi	r30, 0x02	; 2
     e70:	05 c4       	rjmp	.+2058   	; 0x167c <__epilogue_restores__+0x20>

00000e72 <__mulsf3>:
     e72:	a0 e2       	ldi	r26, 0x20	; 32
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ee e3       	ldi	r30, 0x3E	; 62
     e78:	f7 e0       	ldi	r31, 0x07	; 7
     e7a:	d6 c3       	rjmp	.+1964   	; 0x1628 <__prologue_saves__+0x4>
     e7c:	6d 8f       	std	Y+29, r22	; 0x1d
     e7e:	7e 8f       	std	Y+30, r23	; 0x1e
     e80:	8f 8f       	std	Y+31, r24	; 0x1f
     e82:	98 a3       	std	Y+32, r25	; 0x20
     e84:	29 8f       	std	Y+25, r18	; 0x19
     e86:	3a 8f       	std	Y+26, r19	; 0x1a
     e88:	4b 8f       	std	Y+27, r20	; 0x1b
     e8a:	5c 8f       	std	Y+28, r21	; 0x1c
     e8c:	be 01       	movw	r22, r28
     e8e:	6f 5e       	subi	r22, 0xEF	; 239
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	ce 01       	movw	r24, r28
     e94:	4d 96       	adiw	r24, 0x1d	; 29
     e96:	f6 d2       	rcall	.+1516   	; 0x1484 <__unpack_f>
     e98:	be 01       	movw	r22, r28
     e9a:	67 5f       	subi	r22, 0xF7	; 247
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	ce 01       	movw	r24, r28
     ea0:	49 96       	adiw	r24, 0x19	; 25
     ea2:	f0 d2       	rcall	.+1504   	; 0x1484 <__unpack_f>
     ea4:	99 89       	ldd	r25, Y+17	; 0x11
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	08 f4       	brcc	.+2      	; 0xeac <__mulsf3+0x3a>
     eaa:	12 c0       	rjmp	.+36     	; 0xed0 <__mulsf3+0x5e>
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <__mulsf3+0x42>
     eb2:	1a c0       	rjmp	.+52     	; 0xee8 <__mulsf3+0x76>
     eb4:	94 30       	cpi	r25, 0x04	; 4
     eb6:	21 f4       	brne	.+8      	; 0xec0 <__mulsf3+0x4e>
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	09 f4       	brne	.+2      	; 0xebe <__mulsf3+0x4c>
     ebc:	b4 c0       	rjmp	.+360    	; 0x1026 <__mulsf3+0x1b4>
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <__mulsf3+0x5e>
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	21 f4       	brne	.+8      	; 0xecc <__mulsf3+0x5a>
     ec4:	92 30       	cpi	r25, 0x02	; 2
     ec6:	09 f4       	brne	.+2      	; 0xeca <__mulsf3+0x58>
     ec8:	ae c0       	rjmp	.+348    	; 0x1026 <__mulsf3+0x1b4>
     eca:	0e c0       	rjmp	.+28     	; 0xee8 <__mulsf3+0x76>
     ecc:	92 30       	cpi	r25, 0x02	; 2
     ece:	51 f4       	brne	.+20     	; 0xee4 <__mulsf3+0x72>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	2a 89       	ldd	r18, Y+18	; 0x12
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	29 13       	cpse	r18, r25
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <__mulsf3+0x6a>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	8a 8b       	std	Y+18, r24	; 0x12
     ede:	ce 01       	movw	r24, r28
     ee0:	41 96       	adiw	r24, 0x11	; 17
     ee2:	a3 c0       	rjmp	.+326    	; 0x102a <__mulsf3+0x1b8>
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	51 f4       	brne	.+20     	; 0xefc <__mulsf3+0x8a>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	2a 89       	ldd	r18, Y+18	; 0x12
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	29 13       	cpse	r18, r25
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <__mulsf3+0x82>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	8a 87       	std	Y+10, r24	; 0x0a
     ef6:	ce 01       	movw	r24, r28
     ef8:	09 96       	adiw	r24, 0x09	; 9
     efa:	97 c0       	rjmp	.+302    	; 0x102a <__mulsf3+0x1b8>
     efc:	8d 88       	ldd	r8, Y+21	; 0x15
     efe:	9e 88       	ldd	r9, Y+22	; 0x16
     f00:	af 88       	ldd	r10, Y+23	; 0x17
     f02:	b8 8c       	ldd	r11, Y+24	; 0x18
     f04:	0d 85       	ldd	r16, Y+13	; 0x0d
     f06:	1e 85       	ldd	r17, Y+14	; 0x0e
     f08:	2f 85       	ldd	r18, Y+15	; 0x0f
     f0a:	38 89       	ldd	r19, Y+16	; 0x10
     f0c:	e0 e2       	ldi	r30, 0x20	; 32
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	dc 01       	movw	r26, r24
     f16:	c1 2c       	mov	r12, r1
     f18:	d1 2c       	mov	r13, r1
     f1a:	76 01       	movw	r14, r12
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	ba 01       	movw	r22, r20
     f22:	80 fe       	sbrs	r8, 0
     f24:	18 c0       	rjmp	.+48     	; 0xf56 <__mulsf3+0xe4>
     f26:	40 0f       	add	r20, r16
     f28:	51 1f       	adc	r21, r17
     f2a:	62 1f       	adc	r22, r18
     f2c:	73 1f       	adc	r23, r19
     f2e:	8c 0d       	add	r24, r12
     f30:	9d 1d       	adc	r25, r13
     f32:	ae 1d       	adc	r26, r14
     f34:	bf 1d       	adc	r27, r15
     f36:	41 2c       	mov	r4, r1
     f38:	51 2c       	mov	r5, r1
     f3a:	32 01       	movw	r6, r4
     f3c:	43 94       	inc	r4
     f3e:	40 17       	cp	r20, r16
     f40:	51 07       	cpc	r21, r17
     f42:	62 07       	cpc	r22, r18
     f44:	73 07       	cpc	r23, r19
     f46:	18 f0       	brcs	.+6      	; 0xf4e <__mulsf3+0xdc>
     f48:	41 2c       	mov	r4, r1
     f4a:	51 2c       	mov	r5, r1
     f4c:	32 01       	movw	r6, r4
     f4e:	84 0d       	add	r24, r4
     f50:	95 1d       	adc	r25, r5
     f52:	a6 1d       	adc	r26, r6
     f54:	b7 1d       	adc	r27, r7
     f56:	cc 0c       	add	r12, r12
     f58:	dd 1c       	adc	r13, r13
     f5a:	ee 1c       	adc	r14, r14
     f5c:	ff 1c       	adc	r15, r15
     f5e:	37 ff       	sbrs	r19, 7
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <__mulsf3+0xf4>
     f62:	68 94       	set
     f64:	c0 f8       	bld	r12, 0
     f66:	00 0f       	add	r16, r16
     f68:	11 1f       	adc	r17, r17
     f6a:	22 1f       	adc	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	b6 94       	lsr	r11
     f70:	a7 94       	ror	r10
     f72:	97 94       	ror	r9
     f74:	87 94       	ror	r8
     f76:	31 97       	sbiw	r30, 0x01	; 1
     f78:	a1 f6       	brne	.-88     	; 0xf22 <__mulsf3+0xb0>
     f7a:	2b 89       	ldd	r18, Y+19	; 0x13
     f7c:	3c 89       	ldd	r19, Y+20	; 0x14
     f7e:	eb 85       	ldd	r30, Y+11	; 0x0b
     f80:	fc 85       	ldd	r31, Y+12	; 0x0c
     f82:	2e 0f       	add	r18, r30
     f84:	3f 1f       	adc	r19, r31
     f86:	2e 5f       	subi	r18, 0xFE	; 254
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	3c 83       	std	Y+4, r19	; 0x04
     f8c:	2b 83       	std	Y+3, r18	; 0x03
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	ea 89       	ldd	r30, Y+18	; 0x12
     f92:	3a 85       	ldd	r19, Y+10	; 0x0a
     f94:	e3 13       	cpse	r30, r19
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <__mulsf3+0x128>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	2a 83       	std	Y+2, r18	; 0x02
     f9c:	eb 81       	ldd	r30, Y+3	; 0x03
     f9e:	fc 81       	ldd	r31, Y+4	; 0x04
     fa0:	0c c0       	rjmp	.+24     	; 0xfba <__mulsf3+0x148>
     fa2:	80 ff       	sbrs	r24, 0
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <__mulsf3+0x13e>
     fa6:	76 95       	lsr	r23
     fa8:	67 95       	ror	r22
     faa:	57 95       	ror	r21
     fac:	47 95       	ror	r20
     fae:	70 68       	ori	r23, 0x80	; 128
     fb0:	b6 95       	lsr	r27
     fb2:	a7 95       	ror	r26
     fb4:	97 95       	ror	r25
     fb6:	87 95       	ror	r24
     fb8:	31 96       	adiw	r30, 0x01	; 1
     fba:	b7 fd       	sbrc	r27, 7
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <__mulsf3+0x130>
     fbe:	9f 01       	movw	r18, r30
     fc0:	0c c0       	rjmp	.+24     	; 0xfda <__mulsf3+0x168>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	aa 1f       	adc	r26, r26
     fc8:	bb 1f       	adc	r27, r27
     fca:	77 fd       	sbrc	r23, 7
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	44 0f       	add	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	66 1f       	adc	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	31 09       	sbc	r19, r1
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	a1 05       	cpc	r26, r1
     fde:	e0 e4       	ldi	r30, 0x40	; 64
     fe0:	be 07       	cpc	r27, r30
     fe2:	78 f3       	brcs	.-34     	; 0xfc2 <__mulsf3+0x150>
     fe4:	2b 83       	std	Y+3, r18	; 0x03
     fe6:	3c 83       	std	Y+4, r19	; 0x04
     fe8:	8c 01       	movw	r16, r24
     fea:	9d 01       	movw	r18, r26
     fec:	0f 77       	andi	r16, 0x7F	; 127
     fee:	11 27       	eor	r17, r17
     ff0:	22 27       	eor	r18, r18
     ff2:	33 27       	eor	r19, r19
     ff4:	00 34       	cpi	r16, 0x40	; 64
     ff6:	11 05       	cpc	r17, r1
     ff8:	21 05       	cpc	r18, r1
     ffa:	31 05       	cpc	r19, r1
     ffc:	59 f4       	brne	.+22     	; 0x1014 <__mulsf3+0x1a2>
     ffe:	87 fd       	sbrc	r24, 7
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <__mulsf3+0x1a2>
    1002:	45 2b       	or	r20, r21
    1004:	46 2b       	or	r20, r22
    1006:	47 2b       	or	r20, r23
    1008:	29 f0       	breq	.+10     	; 0x1014 <__mulsf3+0x1a2>
    100a:	80 5c       	subi	r24, 0xC0	; 192
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	af 4f       	sbci	r26, 0xFF	; 255
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
    1012:	80 78       	andi	r24, 0x80	; 128
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	af 83       	std	Y+7, r26	; 0x07
    101a:	b8 87       	std	Y+8, r27	; 0x08
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	ce 01       	movw	r24, r28
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	02 c0       	rjmp	.+4      	; 0x102a <__mulsf3+0x1b8>
    1026:	82 e6       	ldi	r24, 0x62	; 98
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	6b d1       	rcall	.+726    	; 0x1302 <__pack_f>
    102c:	a0 96       	adiw	r28, 0x20	; 32
    102e:	e0 e1       	ldi	r30, 0x10	; 16
    1030:	17 c3       	rjmp	.+1582   	; 0x1660 <__epilogue_restores__+0x4>

00001032 <__divsf3>:
    1032:	a8 e1       	ldi	r26, 0x18	; 24
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ee e1       	ldi	r30, 0x1E	; 30
    1038:	f8 e0       	ldi	r31, 0x08	; 8
    103a:	fe c2       	rjmp	.+1532   	; 0x1638 <__prologue_saves__+0x14>
    103c:	6d 8b       	std	Y+21, r22	; 0x15
    103e:	7e 8b       	std	Y+22, r23	; 0x16
    1040:	8f 8b       	std	Y+23, r24	; 0x17
    1042:	98 8f       	std	Y+24, r25	; 0x18
    1044:	29 8b       	std	Y+17, r18	; 0x11
    1046:	3a 8b       	std	Y+18, r19	; 0x12
    1048:	4b 8b       	std	Y+19, r20	; 0x13
    104a:	5c 8b       	std	Y+20, r21	; 0x14
    104c:	be 01       	movw	r22, r28
    104e:	67 5f       	subi	r22, 0xF7	; 247
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	ce 01       	movw	r24, r28
    1054:	45 96       	adiw	r24, 0x15	; 21
    1056:	16 d2       	rcall	.+1068   	; 0x1484 <__unpack_f>
    1058:	be 01       	movw	r22, r28
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	ce 01       	movw	r24, r28
    1060:	41 96       	adiw	r24, 0x11	; 17
    1062:	10 d2       	rcall	.+1056   	; 0x1484 <__unpack_f>
    1064:	99 85       	ldd	r25, Y+9	; 0x09
    1066:	92 30       	cpi	r25, 0x02	; 2
    1068:	08 f4       	brcc	.+2      	; 0x106c <__divsf3+0x3a>
    106a:	75 c0       	rjmp	.+234    	; 0x1156 <__divsf3+0x124>
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	08 f4       	brcc	.+2      	; 0x1074 <__divsf3+0x42>
    1072:	74 c0       	rjmp	.+232    	; 0x115c <__divsf3+0x12a>
    1074:	2a 85       	ldd	r18, Y+10	; 0x0a
    1076:	3a 81       	ldd	r19, Y+2	; 0x02
    1078:	23 27       	eor	r18, r19
    107a:	2a 87       	std	Y+10, r18	; 0x0a
    107c:	94 30       	cpi	r25, 0x04	; 4
    107e:	11 f0       	breq	.+4      	; 0x1084 <__divsf3+0x52>
    1080:	92 30       	cpi	r25, 0x02	; 2
    1082:	19 f4       	brne	.+6      	; 0x108a <__divsf3+0x58>
    1084:	98 13       	cpse	r25, r24
    1086:	67 c0       	rjmp	.+206    	; 0x1156 <__divsf3+0x124>
    1088:	6c c0       	rjmp	.+216    	; 0x1162 <__divsf3+0x130>
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	39 f4       	brne	.+14     	; 0x109c <__divsf3+0x6a>
    108e:	1d 86       	std	Y+13, r1	; 0x0d
    1090:	1e 86       	std	Y+14, r1	; 0x0e
    1092:	1f 86       	std	Y+15, r1	; 0x0f
    1094:	18 8a       	std	Y+16, r1	; 0x10
    1096:	1c 86       	std	Y+12, r1	; 0x0c
    1098:	1b 86       	std	Y+11, r1	; 0x0b
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <__divsf3+0x72>
    109c:	82 30       	cpi	r24, 0x02	; 2
    109e:	29 f4       	brne	.+10     	; 0x10aa <__divsf3+0x78>
    10a0:	84 e0       	ldi	r24, 0x04	; 4
    10a2:	89 87       	std	Y+9, r24	; 0x09
    10a4:	ce 01       	movw	r24, r28
    10a6:	09 96       	adiw	r24, 0x09	; 9
    10a8:	5e c0       	rjmp	.+188    	; 0x1166 <__divsf3+0x134>
    10aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	9c 87       	std	Y+12, r25	; 0x0c
    10b8:	8b 87       	std	Y+11, r24	; 0x0b
    10ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    10bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    10be:	6f 85       	ldd	r22, Y+15	; 0x0f
    10c0:	78 89       	ldd	r23, Y+16	; 0x10
    10c2:	cd 80       	ldd	r12, Y+5	; 0x05
    10c4:	de 80       	ldd	r13, Y+6	; 0x06
    10c6:	ef 80       	ldd	r14, Y+7	; 0x07
    10c8:	f8 84       	ldd	r15, Y+8	; 0x08
    10ca:	4c 15       	cp	r20, r12
    10cc:	5d 05       	cpc	r21, r13
    10ce:	6e 05       	cpc	r22, r14
    10d0:	7f 05       	cpc	r23, r15
    10d2:	38 f4       	brcc	.+14     	; 0x10e2 <__divsf3+0xb0>
    10d4:	44 0f       	add	r20, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	66 1f       	adc	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9c 87       	std	Y+12, r25	; 0x0c
    10e0:	8b 87       	std	Y+11, r24	; 0x0b
    10e2:	ef e1       	ldi	r30, 0x1F	; 31
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	00 e0       	ldi	r16, 0x00	; 0
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e4       	ldi	r19, 0x40	; 64
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	dc 01       	movw	r26, r24
    10f4:	4c 15       	cp	r20, r12
    10f6:	5d 05       	cpc	r21, r13
    10f8:	6e 05       	cpc	r22, r14
    10fa:	7f 05       	cpc	r23, r15
    10fc:	40 f0       	brcs	.+16     	; 0x110e <__divsf3+0xdc>
    10fe:	80 2b       	or	r24, r16
    1100:	91 2b       	or	r25, r17
    1102:	a2 2b       	or	r26, r18
    1104:	b3 2b       	or	r27, r19
    1106:	4c 19       	sub	r20, r12
    1108:	5d 09       	sbc	r21, r13
    110a:	6e 09       	sbc	r22, r14
    110c:	7f 09       	sbc	r23, r15
    110e:	36 95       	lsr	r19
    1110:	27 95       	ror	r18
    1112:	17 95       	ror	r17
    1114:	07 95       	ror	r16
    1116:	44 0f       	add	r20, r20
    1118:	55 1f       	adc	r21, r21
    111a:	66 1f       	adc	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	31 97       	sbiw	r30, 0x01	; 1
    1120:	49 f7       	brne	.-46     	; 0x10f4 <__divsf3+0xc2>
    1122:	8c 01       	movw	r16, r24
    1124:	9d 01       	movw	r18, r26
    1126:	0f 77       	andi	r16, 0x7F	; 127
    1128:	11 27       	eor	r17, r17
    112a:	22 27       	eor	r18, r18
    112c:	33 27       	eor	r19, r19
    112e:	00 34       	cpi	r16, 0x40	; 64
    1130:	11 05       	cpc	r17, r1
    1132:	21 05       	cpc	r18, r1
    1134:	31 05       	cpc	r19, r1
    1136:	59 f4       	brne	.+22     	; 0x114e <__divsf3+0x11c>
    1138:	87 fd       	sbrc	r24, 7
    113a:	09 c0       	rjmp	.+18     	; 0x114e <__divsf3+0x11c>
    113c:	45 2b       	or	r20, r21
    113e:	46 2b       	or	r20, r22
    1140:	47 2b       	or	r20, r23
    1142:	29 f0       	breq	.+10     	; 0x114e <__divsf3+0x11c>
    1144:	80 5c       	subi	r24, 0xC0	; 192
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	af 4f       	sbci	r26, 0xFF	; 255
    114a:	bf 4f       	sbci	r27, 0xFF	; 255
    114c:	80 78       	andi	r24, 0x80	; 128
    114e:	8d 87       	std	Y+13, r24	; 0x0d
    1150:	9e 87       	std	Y+14, r25	; 0x0e
    1152:	af 87       	std	Y+15, r26	; 0x0f
    1154:	b8 8b       	std	Y+16, r27	; 0x10
    1156:	ce 01       	movw	r24, r28
    1158:	09 96       	adiw	r24, 0x09	; 9
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <__divsf3+0x134>
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <__divsf3+0x134>
    1162:	82 e6       	ldi	r24, 0x62	; 98
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	cd d0       	rcall	.+410    	; 0x1302 <__pack_f>
    1168:	68 96       	adiw	r28, 0x18	; 24
    116a:	e8 e0       	ldi	r30, 0x08	; 8
    116c:	81 c2       	rjmp	.+1282   	; 0x1670 <__epilogue_restores__+0x14>

0000116e <__gtsf2>:
    116e:	a8 e1       	ldi	r26, 0x18	; 24
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ec eb       	ldi	r30, 0xBC	; 188
    1174:	f8 e0       	ldi	r31, 0x08	; 8
    1176:	66 c2       	rjmp	.+1228   	; 0x1644 <__prologue_saves__+0x20>
    1178:	6d 8b       	std	Y+21, r22	; 0x15
    117a:	7e 8b       	std	Y+22, r23	; 0x16
    117c:	8f 8b       	std	Y+23, r24	; 0x17
    117e:	98 8f       	std	Y+24, r25	; 0x18
    1180:	29 8b       	std	Y+17, r18	; 0x11
    1182:	3a 8b       	std	Y+18, r19	; 0x12
    1184:	4b 8b       	std	Y+19, r20	; 0x13
    1186:	5c 8b       	std	Y+20, r21	; 0x14
    1188:	be 01       	movw	r22, r28
    118a:	67 5f       	subi	r22, 0xF7	; 247
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	ce 01       	movw	r24, r28
    1190:	45 96       	adiw	r24, 0x15	; 21
    1192:	78 d1       	rcall	.+752    	; 0x1484 <__unpack_f>
    1194:	be 01       	movw	r22, r28
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	ce 01       	movw	r24, r28
    119c:	41 96       	adiw	r24, 0x11	; 17
    119e:	72 d1       	rcall	.+740    	; 0x1484 <__unpack_f>
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	50 f0       	brcs	.+20     	; 0x11ba <__gtsf2+0x4c>
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	38 f0       	brcs	.+14     	; 0x11ba <__gtsf2+0x4c>
    11ac:	be 01       	movw	r22, r28
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	ce 01       	movw	r24, r28
    11b4:	09 96       	adiw	r24, 0x09	; 9
    11b6:	d5 d1       	rcall	.+938    	; 0x1562 <__fpcmp_parts_f>
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <__gtsf2+0x4e>
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	68 96       	adiw	r28, 0x18	; 24
    11be:	e2 e0       	ldi	r30, 0x02	; 2
    11c0:	5d c2       	rjmp	.+1210   	; 0x167c <__epilogue_restores__+0x20>

000011c2 <__gesf2>:
    11c2:	a8 e1       	ldi	r26, 0x18	; 24
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e6 ee       	ldi	r30, 0xE6	; 230
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	3c c2       	rjmp	.+1144   	; 0x1644 <__prologue_saves__+0x20>
    11cc:	6d 8b       	std	Y+21, r22	; 0x15
    11ce:	7e 8b       	std	Y+22, r23	; 0x16
    11d0:	8f 8b       	std	Y+23, r24	; 0x17
    11d2:	98 8f       	std	Y+24, r25	; 0x18
    11d4:	29 8b       	std	Y+17, r18	; 0x11
    11d6:	3a 8b       	std	Y+18, r19	; 0x12
    11d8:	4b 8b       	std	Y+19, r20	; 0x13
    11da:	5c 8b       	std	Y+20, r21	; 0x14
    11dc:	be 01       	movw	r22, r28
    11de:	67 5f       	subi	r22, 0xF7	; 247
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	ce 01       	movw	r24, r28
    11e4:	45 96       	adiw	r24, 0x15	; 21
    11e6:	4e d1       	rcall	.+668    	; 0x1484 <__unpack_f>
    11e8:	be 01       	movw	r22, r28
    11ea:	6f 5f       	subi	r22, 0xFF	; 255
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	ce 01       	movw	r24, r28
    11f0:	41 96       	adiw	r24, 0x11	; 17
    11f2:	48 d1       	rcall	.+656    	; 0x1484 <__unpack_f>
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	50 f0       	brcs	.+20     	; 0x120e <__gesf2+0x4c>
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	38 f0       	brcs	.+14     	; 0x120e <__gesf2+0x4c>
    1200:	be 01       	movw	r22, r28
    1202:	6f 5f       	subi	r22, 0xFF	; 255
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	ce 01       	movw	r24, r28
    1208:	09 96       	adiw	r24, 0x09	; 9
    120a:	ab d1       	rcall	.+854    	; 0x1562 <__fpcmp_parts_f>
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <__gesf2+0x4e>
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	68 96       	adiw	r28, 0x18	; 24
    1212:	e2 e0       	ldi	r30, 0x02	; 2
    1214:	33 c2       	rjmp	.+1126   	; 0x167c <__epilogue_restores__+0x20>

00001216 <__ltsf2>:
    1216:	a8 e1       	ldi	r26, 0x18	; 24
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e0 e1       	ldi	r30, 0x10	; 16
    121c:	f9 e0       	ldi	r31, 0x09	; 9
    121e:	12 c2       	rjmp	.+1060   	; 0x1644 <__prologue_saves__+0x20>
    1220:	6d 8b       	std	Y+21, r22	; 0x15
    1222:	7e 8b       	std	Y+22, r23	; 0x16
    1224:	8f 8b       	std	Y+23, r24	; 0x17
    1226:	98 8f       	std	Y+24, r25	; 0x18
    1228:	29 8b       	std	Y+17, r18	; 0x11
    122a:	3a 8b       	std	Y+18, r19	; 0x12
    122c:	4b 8b       	std	Y+19, r20	; 0x13
    122e:	5c 8b       	std	Y+20, r21	; 0x14
    1230:	be 01       	movw	r22, r28
    1232:	67 5f       	subi	r22, 0xF7	; 247
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	ce 01       	movw	r24, r28
    1238:	45 96       	adiw	r24, 0x15	; 21
    123a:	24 d1       	rcall	.+584    	; 0x1484 <__unpack_f>
    123c:	be 01       	movw	r22, r28
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	ce 01       	movw	r24, r28
    1244:	41 96       	adiw	r24, 0x11	; 17
    1246:	1e d1       	rcall	.+572    	; 0x1484 <__unpack_f>
    1248:	89 85       	ldd	r24, Y+9	; 0x09
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	50 f0       	brcs	.+20     	; 0x1262 <__ltsf2+0x4c>
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	38 f0       	brcs	.+14     	; 0x1262 <__ltsf2+0x4c>
    1254:	be 01       	movw	r22, r28
    1256:	6f 5f       	subi	r22, 0xFF	; 255
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	ce 01       	movw	r24, r28
    125c:	09 96       	adiw	r24, 0x09	; 9
    125e:	81 d1       	rcall	.+770    	; 0x1562 <__fpcmp_parts_f>
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <__ltsf2+0x4e>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	68 96       	adiw	r28, 0x18	; 24
    1266:	e2 e0       	ldi	r30, 0x02	; 2
    1268:	09 c2       	rjmp	.+1042   	; 0x167c <__epilogue_restores__+0x20>

0000126a <__fixsfsi>:
    126a:	ac e0       	ldi	r26, 0x0C	; 12
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	ea e3       	ldi	r30, 0x3A	; 58
    1270:	f9 e0       	ldi	r31, 0x09	; 9
    1272:	e6 c1       	rjmp	.+972    	; 0x1640 <__prologue_saves__+0x1c>
    1274:	69 87       	std	Y+9, r22	; 0x09
    1276:	7a 87       	std	Y+10, r23	; 0x0a
    1278:	8b 87       	std	Y+11, r24	; 0x0b
    127a:	9c 87       	std	Y+12, r25	; 0x0c
    127c:	be 01       	movw	r22, r28
    127e:	6f 5f       	subi	r22, 0xFF	; 255
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	ce 01       	movw	r24, r28
    1284:	09 96       	adiw	r24, 0x09	; 9
    1286:	fe d0       	rcall	.+508    	; 0x1484 <__unpack_f>
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	91 f1       	breq	.+100    	; 0x12f2 <__fixsfsi+0x88>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	80 f1       	brcs	.+96     	; 0x12f2 <__fixsfsi+0x88>
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	41 f4       	brne	.+16     	; 0x12a6 <__fixsfsi+0x3c>
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	88 23       	and	r24, r24
    129a:	31 f1       	breq	.+76     	; 0x12e8 <__fixsfsi+0x7e>
    129c:	00 e0       	ldi	r16, 0x00	; 0
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e8       	ldi	r19, 0x80	; 128
    12a4:	29 c0       	rjmp	.+82     	; 0x12f8 <__fixsfsi+0x8e>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	37 fd       	sbrc	r19, 7
    12ac:	22 c0       	rjmp	.+68     	; 0x12f2 <__fixsfsi+0x88>
    12ae:	2f 31       	cpi	r18, 0x1F	; 31
    12b0:	31 05       	cpc	r19, r1
    12b2:	8c f7       	brge	.-30     	; 0x1296 <__fixsfsi+0x2c>
    12b4:	8e e1       	ldi	r24, 0x1E	; 30
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	82 1b       	sub	r24, r18
    12ba:	93 0b       	sbc	r25, r19
    12bc:	0d 81       	ldd	r16, Y+5	; 0x05
    12be:	1e 81       	ldd	r17, Y+6	; 0x06
    12c0:	2f 81       	ldd	r18, Y+7	; 0x07
    12c2:	38 85       	ldd	r19, Y+8	; 0x08
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <__fixsfsi+0x64>
    12c6:	36 95       	lsr	r19
    12c8:	27 95       	ror	r18
    12ca:	17 95       	ror	r17
    12cc:	07 95       	ror	r16
    12ce:	8a 95       	dec	r24
    12d0:	d2 f7       	brpl	.-12     	; 0x12c6 <__fixsfsi+0x5c>
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	88 23       	and	r24, r24
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <__fixsfsi+0x8e>
    12d8:	30 95       	com	r19
    12da:	20 95       	com	r18
    12dc:	10 95       	com	r17
    12de:	01 95       	neg	r16
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	2f 4f       	sbci	r18, 0xFF	; 255
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <__fixsfsi+0x8e>
    12e8:	0f ef       	ldi	r16, 0xFF	; 255
    12ea:	1f ef       	ldi	r17, 0xFF	; 255
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	3f e7       	ldi	r19, 0x7F	; 127
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <__fixsfsi+0x8e>
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	98 01       	movw	r18, r16
    12f8:	b8 01       	movw	r22, r16
    12fa:	c9 01       	movw	r24, r18
    12fc:	2c 96       	adiw	r28, 0x0c	; 12
    12fe:	e4 e0       	ldi	r30, 0x04	; 4
    1300:	bb c1       	rjmp	.+886    	; 0x1678 <__epilogue_restores__+0x1c>

00001302 <__pack_f>:
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	fc 01       	movw	r30, r24
    130a:	44 81       	ldd	r20, Z+4	; 0x04
    130c:	55 81       	ldd	r21, Z+5	; 0x05
    130e:	66 81       	ldd	r22, Z+6	; 0x06
    1310:	77 81       	ldd	r23, Z+7	; 0x07
    1312:	c1 81       	ldd	r28, Z+1	; 0x01
    1314:	80 81       	ld	r24, Z
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	20 f4       	brcc	.+8      	; 0x1322 <__pack_f+0x20>
    131a:	60 61       	ori	r22, 0x10	; 16
    131c:	8f ef       	ldi	r24, 0xFF	; 255
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a3 c0       	rjmp	.+326    	; 0x1468 <__pack_f+0x166>
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	09 f4       	brne	.+2      	; 0x1328 <__pack_f+0x26>
    1326:	9b c0       	rjmp	.+310    	; 0x145e <__pack_f+0x15c>
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	09 f4       	brne	.+2      	; 0x132e <__pack_f+0x2c>
    132c:	92 c0       	rjmp	.+292    	; 0x1452 <__pack_f+0x150>
    132e:	41 15       	cp	r20, r1
    1330:	51 05       	cpc	r21, r1
    1332:	61 05       	cpc	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	09 f4       	brne	.+2      	; 0x133a <__pack_f+0x38>
    1338:	8f c0       	rjmp	.+286    	; 0x1458 <__pack_f+0x156>
    133a:	22 81       	ldd	r18, Z+2	; 0x02
    133c:	33 81       	ldd	r19, Z+3	; 0x03
    133e:	22 38       	cpi	r18, 0x82	; 130
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	38 07       	cpc	r19, r24
    1344:	0c f0       	brlt	.+2      	; 0x1348 <__pack_f+0x46>
    1346:	57 c0       	rjmp	.+174    	; 0x13f6 <__pack_f+0xf4>
    1348:	e2 e8       	ldi	r30, 0x82	; 130
    134a:	ff ef       	ldi	r31, 0xFF	; 255
    134c:	e2 1b       	sub	r30, r18
    134e:	f3 0b       	sbc	r31, r19
    1350:	ea 31       	cpi	r30, 0x1A	; 26
    1352:	f1 05       	cpc	r31, r1
    1354:	64 f5       	brge	.+88     	; 0x13ae <__pack_f+0xac>
    1356:	8a 01       	movw	r16, r20
    1358:	9b 01       	movw	r18, r22
    135a:	0e 2e       	mov	r0, r30
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <__pack_f+0x64>
    135e:	36 95       	lsr	r19
    1360:	27 95       	ror	r18
    1362:	17 95       	ror	r17
    1364:	07 95       	ror	r16
    1366:	0a 94       	dec	r0
    1368:	d2 f7       	brpl	.-12     	; 0x135e <__pack_f+0x5c>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	04 c0       	rjmp	.+8      	; 0x137c <__pack_f+0x7a>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	aa 1f       	adc	r26, r26
    137a:	bb 1f       	adc	r27, r27
    137c:	ea 95       	dec	r30
    137e:	d2 f7       	brpl	.-12     	; 0x1374 <__pack_f+0x72>
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	a1 09       	sbc	r26, r1
    1384:	b1 09       	sbc	r27, r1
    1386:	84 23       	and	r24, r20
    1388:	95 23       	and	r25, r21
    138a:	a6 23       	and	r26, r22
    138c:	b7 23       	and	r27, r23
    138e:	41 e0       	ldi	r20, 0x01	; 1
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	89 2b       	or	r24, r25
    1398:	8a 2b       	or	r24, r26
    139a:	8b 2b       	or	r24, r27
    139c:	19 f4       	brne	.+6      	; 0x13a4 <__pack_f+0xa2>
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	ba 01       	movw	r22, r20
    13a4:	40 2b       	or	r20, r16
    13a6:	51 2b       	or	r21, r17
    13a8:	62 2b       	or	r22, r18
    13aa:	73 2b       	or	r23, r19
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <__pack_f+0xb2>
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	ba 01       	movw	r22, r20
    13b4:	db 01       	movw	r26, r22
    13b6:	ca 01       	movw	r24, r20
    13b8:	8f 77       	andi	r24, 0x7F	; 127
    13ba:	99 27       	eor	r25, r25
    13bc:	aa 27       	eor	r26, r26
    13be:	bb 27       	eor	r27, r27
    13c0:	80 34       	cpi	r24, 0x40	; 64
    13c2:	91 05       	cpc	r25, r1
    13c4:	a1 05       	cpc	r26, r1
    13c6:	b1 05       	cpc	r27, r1
    13c8:	39 f4       	brne	.+14     	; 0x13d8 <__pack_f+0xd6>
    13ca:	47 ff       	sbrs	r20, 7
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <__pack_f+0xde>
    13ce:	40 5c       	subi	r20, 0xC0	; 192
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	6f 4f       	sbci	r22, 0xFF	; 255
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <__pack_f+0xde>
    13d8:	41 5c       	subi	r20, 0xC1	; 193
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	6f 4f       	sbci	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	41 15       	cp	r20, r1
    13e6:	51 05       	cpc	r21, r1
    13e8:	61 05       	cpc	r22, r1
    13ea:	20 e4       	ldi	r18, 0x40	; 64
    13ec:	72 07       	cpc	r23, r18
    13ee:	48 f5       	brcc	.+82     	; 0x1442 <__pack_f+0x140>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	26 c0       	rjmp	.+76     	; 0x1442 <__pack_f+0x140>
    13f6:	20 38       	cpi	r18, 0x80	; 128
    13f8:	31 05       	cpc	r19, r1
    13fa:	8c f5       	brge	.+98     	; 0x145e <__pack_f+0x15c>
    13fc:	db 01       	movw	r26, r22
    13fe:	ca 01       	movw	r24, r20
    1400:	8f 77       	andi	r24, 0x7F	; 127
    1402:	99 27       	eor	r25, r25
    1404:	aa 27       	eor	r26, r26
    1406:	bb 27       	eor	r27, r27
    1408:	80 34       	cpi	r24, 0x40	; 64
    140a:	91 05       	cpc	r25, r1
    140c:	a1 05       	cpc	r26, r1
    140e:	b1 05       	cpc	r27, r1
    1410:	39 f4       	brne	.+14     	; 0x1420 <__pack_f+0x11e>
    1412:	47 ff       	sbrs	r20, 7
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <__pack_f+0x126>
    1416:	40 5c       	subi	r20, 0xC0	; 192
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	6f 4f       	sbci	r22, 0xFF	; 255
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__pack_f+0x126>
    1420:	41 5c       	subi	r20, 0xC1	; 193
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	6f 4f       	sbci	r22, 0xFF	; 255
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	77 fd       	sbrc	r23, 7
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <__pack_f+0x132>
    142c:	c9 01       	movw	r24, r18
    142e:	81 58       	subi	r24, 0x81	; 129
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <__pack_f+0x140>
    1434:	76 95       	lsr	r23
    1436:	67 95       	ror	r22
    1438:	57 95       	ror	r21
    143a:	47 95       	ror	r20
    143c:	c9 01       	movw	r24, r18
    143e:	80 58       	subi	r24, 0x80	; 128
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	76 95       	lsr	r23
    1446:	67 95       	ror	r22
    1448:	57 95       	ror	r21
    144a:	47 95       	ror	r20
    144c:	9a 95       	dec	r25
    144e:	d1 f7       	brne	.-12     	; 0x1444 <__pack_f+0x142>
    1450:	0b c0       	rjmp	.+22     	; 0x1468 <__pack_f+0x166>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__pack_f+0x160>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <__pack_f+0x166>
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	ba 01       	movw	r22, r20
    1468:	98 2f       	mov	r25, r24
    146a:	96 95       	lsr	r25
    146c:	c0 fb       	bst	r28, 0
    146e:	97 f9       	bld	r25, 7
    1470:	36 2f       	mov	r19, r22
    1472:	80 fb       	bst	r24, 0
    1474:	37 f9       	bld	r19, 7
    1476:	64 2f       	mov	r22, r20
    1478:	75 2f       	mov	r23, r21
    147a:	83 2f       	mov	r24, r19
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	08 95       	ret

00001484 <__unpack_f>:
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	dc 01       	movw	r26, r24
    148c:	fb 01       	movw	r30, r22
    148e:	cc 90       	ld	r12, X
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	dc 90       	ld	r13, X
    1494:	11 97       	sbiw	r26, 0x01	; 1
    1496:	12 96       	adiw	r26, 0x02	; 2
    1498:	8c 91       	ld	r24, X
    149a:	12 97       	sbiw	r26, 0x02	; 2
    149c:	3f e7       	ldi	r19, 0x7F	; 127
    149e:	e3 2e       	mov	r14, r19
    14a0:	e8 22       	and	r14, r24
    14a2:	6e 2d       	mov	r22, r14
    14a4:	a6 01       	movw	r20, r12
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	98 2f       	mov	r25, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	99 27       	eor	r25, r25
    14ae:	99 1f       	adc	r25, r25
    14b0:	13 96       	adiw	r26, 0x03	; 3
    14b2:	2c 91       	ld	r18, X
    14b4:	82 2f       	mov	r24, r18
    14b6:	88 0f       	add	r24, r24
    14b8:	89 2b       	or	r24, r25
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	27 fb       	bst	r18, 7
    14be:	22 27       	eor	r18, r18
    14c0:	20 f9       	bld	r18, 0
    14c2:	21 83       	std	Z+1, r18	; 0x01
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	29 f5       	brne	.+74     	; 0x1512 <__unpack_f+0x8e>
    14c8:	41 15       	cp	r20, r1
    14ca:	51 05       	cpc	r21, r1
    14cc:	61 05       	cpc	r22, r1
    14ce:	71 05       	cpc	r23, r1
    14d0:	11 f4       	brne	.+4      	; 0x14d6 <__unpack_f+0x52>
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	27 c0       	rjmp	.+78     	; 0x1524 <__unpack_f+0xa0>
    14d6:	82 e8       	ldi	r24, 0x82	; 130
    14d8:	9f ef       	ldi	r25, 0xFF	; 255
    14da:	93 83       	std	Z+3, r25	; 0x03
    14dc:	82 83       	std	Z+2, r24	; 0x02
    14de:	27 e0       	ldi	r18, 0x07	; 7
    14e0:	44 0f       	add	r20, r20
    14e2:	55 1f       	adc	r21, r21
    14e4:	66 1f       	adc	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	2a 95       	dec	r18
    14ea:	d1 f7       	brne	.-12     	; 0x14e0 <__unpack_f+0x5c>
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	80 83       	st	Z, r24
    14f0:	09 c0       	rjmp	.+18     	; 0x1504 <__unpack_f+0x80>
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	66 1f       	adc	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	93 83       	std	Z+3, r25	; 0x03
    1502:	82 83       	std	Z+2, r24	; 0x02
    1504:	41 15       	cp	r20, r1
    1506:	51 05       	cpc	r21, r1
    1508:	61 05       	cpc	r22, r1
    150a:	80 e4       	ldi	r24, 0x40	; 64
    150c:	78 07       	cpc	r23, r24
    150e:	88 f3       	brcs	.-30     	; 0x14f2 <__unpack_f+0x6e>
    1510:	20 c0       	rjmp	.+64     	; 0x1552 <__unpack_f+0xce>
    1512:	8f 3f       	cpi	r24, 0xFF	; 255
    1514:	91 05       	cpc	r25, r1
    1516:	79 f4       	brne	.+30     	; 0x1536 <__unpack_f+0xb2>
    1518:	41 15       	cp	r20, r1
    151a:	51 05       	cpc	r21, r1
    151c:	61 05       	cpc	r22, r1
    151e:	71 05       	cpc	r23, r1
    1520:	19 f4       	brne	.+6      	; 0x1528 <__unpack_f+0xa4>
    1522:	84 e0       	ldi	r24, 0x04	; 4
    1524:	80 83       	st	Z, r24
    1526:	19 c0       	rjmp	.+50     	; 0x155a <__unpack_f+0xd6>
    1528:	e4 fe       	sbrs	r14, 4
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <__unpack_f+0xae>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 83       	st	Z, r24
    1530:	10 c0       	rjmp	.+32     	; 0x1552 <__unpack_f+0xce>
    1532:	10 82       	st	Z, r1
    1534:	0e c0       	rjmp	.+28     	; 0x1552 <__unpack_f+0xce>
    1536:	8f 57       	subi	r24, 0x7F	; 127
    1538:	91 09       	sbc	r25, r1
    153a:	93 83       	std	Z+3, r25	; 0x03
    153c:	82 83       	std	Z+2, r24	; 0x02
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	80 83       	st	Z, r24
    1542:	87 e0       	ldi	r24, 0x07	; 7
    1544:	44 0f       	add	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	66 1f       	adc	r22, r22
    154a:	77 1f       	adc	r23, r23
    154c:	8a 95       	dec	r24
    154e:	d1 f7       	brne	.-12     	; 0x1544 <__unpack_f+0xc0>
    1550:	70 64       	ori	r23, 0x40	; 64
    1552:	44 83       	std	Z+4, r20	; 0x04
    1554:	55 83       	std	Z+5, r21	; 0x05
    1556:	66 83       	std	Z+6, r22	; 0x06
    1558:	77 83       	std	Z+7, r23	; 0x07
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	08 95       	ret

00001562 <__fpcmp_parts_f>:
    1562:	cf 93       	push	r28
    1564:	fc 01       	movw	r30, r24
    1566:	db 01       	movw	r26, r22
    1568:	90 81       	ld	r25, Z
    156a:	92 30       	cpi	r25, 0x02	; 2
    156c:	08 f4       	brcc	.+2      	; 0x1570 <__fpcmp_parts_f+0xe>
    156e:	52 c0       	rjmp	.+164    	; 0x1614 <__fpcmp_parts_f+0xb2>
    1570:	8c 91       	ld	r24, X
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	08 f4       	brcc	.+2      	; 0x1578 <__fpcmp_parts_f+0x16>
    1576:	4e c0       	rjmp	.+156    	; 0x1614 <__fpcmp_parts_f+0xb2>
    1578:	94 30       	cpi	r25, 0x04	; 4
    157a:	71 f4       	brne	.+28     	; 0x1598 <__fpcmp_parts_f+0x36>
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	39 f4       	brne	.+14     	; 0x158e <__fpcmp_parts_f+0x2c>
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	2c 91       	ld	r18, X
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 81       	ldd	r24, Z+1	; 0x01
    1588:	28 1b       	sub	r18, r24
    158a:	31 09       	sbc	r19, r1
    158c:	48 c0       	rjmp	.+144    	; 0x161e <__fpcmp_parts_f+0xbc>
    158e:	81 81       	ldd	r24, Z+1	; 0x01
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <__fpcmp_parts_f+0x34>
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <__fpcmp_parts_f+0xb2>
    1596:	3b c0       	rjmp	.+118    	; 0x160e <__fpcmp_parts_f+0xac>
    1598:	84 30       	cpi	r24, 0x04	; 4
    159a:	29 f4       	brne	.+10     	; 0x15a6 <__fpcmp_parts_f+0x44>
    159c:	11 96       	adiw	r26, 0x01	; 1
    159e:	8c 91       	ld	r24, X
    15a0:	81 11       	cpse	r24, r1
    15a2:	38 c0       	rjmp	.+112    	; 0x1614 <__fpcmp_parts_f+0xb2>
    15a4:	34 c0       	rjmp	.+104    	; 0x160e <__fpcmp_parts_f+0xac>
    15a6:	92 30       	cpi	r25, 0x02	; 2
    15a8:	19 f4       	brne	.+6      	; 0x15b0 <__fpcmp_parts_f+0x4e>
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	b9 f7       	brne	.-18     	; 0x159c <__fpcmp_parts_f+0x3a>
    15ae:	35 c0       	rjmp	.+106    	; 0x161a <__fpcmp_parts_f+0xb8>
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	69 f3       	breq	.-38     	; 0x158e <__fpcmp_parts_f+0x2c>
    15b4:	c1 81       	ldd	r28, Z+1	; 0x01
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	8c 91       	ld	r24, X
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    15bc:	c8 13       	cpse	r28, r24
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <__fpcmp_parts_f+0x98>
    15c0:	22 81       	ldd	r18, Z+2	; 0x02
    15c2:	33 81       	ldd	r19, Z+3	; 0x03
    15c4:	12 96       	adiw	r26, 0x02	; 2
    15c6:	8d 91       	ld	r24, X+
    15c8:	9c 91       	ld	r25, X
    15ca:	13 97       	sbiw	r26, 0x03	; 3
    15cc:	82 17       	cp	r24, r18
    15ce:	93 07       	cpc	r25, r19
    15d0:	0c f4       	brge	.+2      	; 0x15d4 <__fpcmp_parts_f+0x72>
    15d2:	13 c0       	rjmp	.+38     	; 0x15fa <__fpcmp_parts_f+0x98>
    15d4:	28 17       	cp	r18, r24
    15d6:	39 07       	cpc	r19, r25
    15d8:	0c f4       	brge	.+2      	; 0x15dc <__fpcmp_parts_f+0x7a>
    15da:	17 c0       	rjmp	.+46     	; 0x160a <__fpcmp_parts_f+0xa8>
    15dc:	44 81       	ldd	r20, Z+4	; 0x04
    15de:	55 81       	ldd	r21, Z+5	; 0x05
    15e0:	66 81       	ldd	r22, Z+6	; 0x06
    15e2:	77 81       	ldd	r23, Z+7	; 0x07
    15e4:	14 96       	adiw	r26, 0x04	; 4
    15e6:	8d 91       	ld	r24, X+
    15e8:	9d 91       	ld	r25, X+
    15ea:	0d 90       	ld	r0, X+
    15ec:	bc 91       	ld	r27, X
    15ee:	a0 2d       	mov	r26, r0
    15f0:	84 17       	cp	r24, r20
    15f2:	95 07       	cpc	r25, r21
    15f4:	a6 07       	cpc	r26, r22
    15f6:	b7 07       	cpc	r27, r23
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <__fpcmp_parts_f+0x9e>
    15fa:	c1 11       	cpse	r28, r1
    15fc:	08 c0       	rjmp	.+16     	; 0x160e <__fpcmp_parts_f+0xac>
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <__fpcmp_parts_f+0xb2>
    1600:	48 17       	cp	r20, r24
    1602:	59 07       	cpc	r21, r25
    1604:	6a 07       	cpc	r22, r26
    1606:	7b 07       	cpc	r23, r27
    1608:	40 f4       	brcc	.+16     	; 0x161a <__fpcmp_parts_f+0xb8>
    160a:	c1 11       	cpse	r28, r1
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <__fpcmp_parts_f+0xb2>
    160e:	2f ef       	ldi	r18, 0xFF	; 255
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	05 c0       	rjmp	.+10     	; 0x161e <__fpcmp_parts_f+0xbc>
    1614:	21 e0       	ldi	r18, 0x01	; 1
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <__fpcmp_parts_f+0xbc>
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	c9 01       	movw	r24, r18
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <__prologue_saves__>:
    1624:	2f 92       	push	r2
    1626:	3f 92       	push	r3
    1628:	4f 92       	push	r4
    162a:	5f 92       	push	r5
    162c:	6f 92       	push	r6
    162e:	7f 92       	push	r7
    1630:	8f 92       	push	r8
    1632:	9f 92       	push	r9
    1634:	af 92       	push	r10
    1636:	bf 92       	push	r11
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	ca 1b       	sub	r28, r26
    164e:	db 0b       	sbc	r29, r27
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	09 94       	ijmp

0000165c <__epilogue_restores__>:
    165c:	2a 88       	ldd	r2, Y+18	; 0x12
    165e:	39 88       	ldd	r3, Y+17	; 0x11
    1660:	48 88       	ldd	r4, Y+16	; 0x10
    1662:	5f 84       	ldd	r5, Y+15	; 0x0f
    1664:	6e 84       	ldd	r6, Y+14	; 0x0e
    1666:	7d 84       	ldd	r7, Y+13	; 0x0d
    1668:	8c 84       	ldd	r8, Y+12	; 0x0c
    166a:	9b 84       	ldd	r9, Y+11	; 0x0b
    166c:	aa 84       	ldd	r10, Y+10	; 0x0a
    166e:	b9 84       	ldd	r11, Y+9	; 0x09
    1670:	c8 84       	ldd	r12, Y+8	; 0x08
    1672:	df 80       	ldd	r13, Y+7	; 0x07
    1674:	ee 80       	ldd	r14, Y+6	; 0x06
    1676:	fd 80       	ldd	r15, Y+5	; 0x05
    1678:	0c 81       	ldd	r16, Y+4	; 0x04
    167a:	1b 81       	ldd	r17, Y+3	; 0x03
    167c:	aa 81       	ldd	r26, Y+2	; 0x02
    167e:	b9 81       	ldd	r27, Y+1	; 0x01
    1680:	ce 0f       	add	r28, r30
    1682:	d1 1d       	adc	r29, r1
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	ed 01       	movw	r28, r26
    1690:	08 95       	ret

00001692 <_exit>:
    1692:	f8 94       	cli

00001694 <__stop_program>:
    1694:	ff cf       	rjmp	.-2      	; 0x1694 <__stop_program>
