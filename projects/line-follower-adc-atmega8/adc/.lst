
AVRASM ver. 1.52  8a.asm Sun Feb 28 16:46:26 2010


         ;CodeVisionAVR C Compiler V1.24.6 Professional
         ;(C) Copyright 1998-2005 Pavel Haiduc, HP InfoTech s.r.l.
         ;http://www.hpinfotech.com
         ;e-mail:office@hpinfotech.com
         
         ;Chip type              : ATmega8
         ;Program type           : Application
         ;Clock frequency        : 8.000000 MHz
         ;Memory model           : Small
         ;Optimize for           : Size
         ;(s)printf features     : int, width
         ;(s)scanf features      : int, width
         ;External SRAM size     : 0
         ;Data Stack size        : 256 byte(s)
         ;Heap size              : 0 byte(s)
         ;Promote char to int    : No
         ;char is unsigned       : Yes
         ;8 bit enums            : Yes
         ;Word align FLASH struct: No
         ;Enhanced core instructions    : On
         ;Automatic register allocation : On
         
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU USR=0xB
          	.EQU UDR=0xC
          	.EQU SPSR=0xE
          	.EQU SPDR=0xF
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU EECR=0x1C
          	.EQU EEDR=0x1D
          	.EQU EEARL=0x1E
          	.EQU EEARH=0x1F
          	.EQU WDTCR=0x21
          	.EQU MCUCR=0x35
          	.EQU GICR=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
         
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
         
          	.EQU __se_bit=0x80
          	.EQU __sm_mask=0x70
          	.EQU __sm_adc_noise_red=0x10
          	.EQU __sm_powerdown=0x20
          	.EQU __sm_powersave=0x30
          	.EQU __sm_standby=0x60
          	.EQU __sm_ext_standby=0x70
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	LDI  R30,0
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTBRM
          	LDI  R@0,LOW(@1)
          	.ENDM
         
          	.MACRO __POINTWRM
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __POINTBRMN
          	LDI  R@0,LOW(@1+@2)
          	.ENDM
         
          	.MACRO __POINTWRMN
          	LDI  R@0,LOW(@2+@3)
          	LDI  R@1,HIGH(@2+@3)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@0,@1+@2
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@0,@2+@3
          	LDS  R@1,@2+@3+1
          	.ENDM
         
          	.MACRO __GETWRZ
          	LDD  R@0,Z+@2
          	LDD  R@1,Z+@2+1
          	.ENDM
         
          	.MACRO __GETD2Z
          	LDD  R26,Z+@0
          	LDD  R27,Z+@0+1
          	LDD  R24,Z+@0+2
          	LDD  R25,Z+@0+3
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTDZ2
          	STD  Z+@0,R26
          	STD  Z+@0+1,R27
          	STD  Z+@0+2,R24
          	STD  Z+@0+3,R25
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __PUTBZR
          	STD  Z+@1,R@0
          	.ENDM
         
          	.MACRO __PUTWZR
          	STD  Z+@2,R@0
          	STD  Z+@2+1,R@1
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
         
          	.MACRO __CALL1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	RCALL __GETW1PF
          	ICALL
          	.ENDM
         
         
          	.MACRO __CALL2EN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	RCALL __EEPROMRDW
          	ICALL
          	.ENDM
         
         
          	.MACRO __GETW1STACK
          	IN   R26,SPL
          	IN   R27,SPH
          	ADIW R26,@0+1
          	LD   R30,X+
          	LD   R31,X
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	RCALL __PUTDP1
          	.ENDM
         
         
          	.MACRO __GETB1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOVW R30,R0
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOVW R26,R0
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __MULBRR
          	MULS R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __MULBRRU
          	MUL  R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "8a.vec"
         
         ;INTERRUPT VECTORS
000000 c07e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
         
          	.INCLUDE "8a.inc"
          	.DEF _i=R4
          	.DEF _j=R6
          	.DEF _k=R8
          	.DEF _l=R10
          	.DEF _t1=R12
          	.DEF _x=R14
          _tbl10_G2:
          	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000013 2710
000014 03e8
000015 0064
000016 000a
          	.DB  0x1,0x0
000017 0001
          _tbl16_G2:
          	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
000018 1000
000019 0100
00001a 0010
00001b 0001
          _157:
          	.DB  0x80,0xC0
00001c c080
          _0:
          	.DB  0x53,0x74,0x61,0x72,0x74,0x69,0x6E,0x67
00001d 7453
00001e 7261
00001f 6974
000020 676e
          	.DB  0x20,0x55,0x70,0x0,0x2E,0x0,0x50,0x75
000021 5520
000022 0070
000023 002e
000024 7550
          	.DB  0x74,0x20,0x42,0x4F,0x54,0x20,0x6F,0x6E
000025 2074
000026 4f42
000027 2054
000028 6e6f
          	.DB  0x20,0x42,0x6C,0x61,0x63,0x6B,0x0,0xA
000029 4220
00002a 616c
00002b 6b63
00002c 0a00
          	.DB  0x44,0x65,0x74,0x65,0x63,0x74,0x69,0x6E
00002d 6544
00002e 6574
00002f 7463
000030 6e69
          	.DB  0x67,0x2E,0x2E,0x0,0x3A,0x25,0x64,0x3A
000031 2e67
000032 002e
000033 253a
000034 3a64
          	.DB  0x25,0x64,0x3A,0x25,0x64,0x3A,0x0,0x42
000035 6425
000036 253a
000037 3a64
000038 4200
          	.DB  0x6C,0x61,0x63,0x6B,0x3D,0xA,0x0,0x50
000039 616c
00003a 6b63
00003b 0a3d
00003c 5000
          	.DB  0x75,0x74,0x20,0x42,0x4F,0x54,0x20,0x6F
00003d 7475
00003e 4220
00003f 544f
000040 6f20
          	.DB  0x6E,0x20,0x57,0x68,0x69,0x74,0x65,0x0
000041 206e
000042 6857
000043 7469
000044 0065
          	.DB  0x57,0x68,0x69,0x74,0x65,0x3D,0xA,0x0
000045 6857
000046 7469
000047 3d65
000048 000a
          	.DB  0x45,0x72,0x72,0x6F,0x72,0x21,0xA,0x50
000049 7245
00004a 6f72
00004b 2172
00004c 500a
          	.DB  0x6C,0x65,0x61,0x73,0x65,0x20,0x52,0x65
00004d 656c
00004e 7361
00004f 2065
000050 6552
          	.DB  0x63,0x61,0x6C,0x62,0x72,0x74,0x0,0x44
000051 6163
000052 626c
000053 7472
000054 4400
          	.DB  0x65,0x74,0x65,0x63,0x74,0x69,0x6F,0x6E
000055 7465
000056 6365
000057 6974
000058 6e6f
          	.DB  0x20,0x44,0x6F,0x6E,0x65,0x21,0x0,0x25
000059 4420
00005a 6e6f
00005b 2165
00005c 2500
          	.DB  0x63,0x25,0x63,0x25,0x63,0x0,0x53,0x45
00005d 2563
00005e 2563
00005f 0063
000060 4553
          	.DB  0x4E,0x53,0x4F,0x52,0x53,0x20,0x20,0x41
000061 534e
000062 524f
000063 2053
000064 4120
          	.DB  0x43,0x54,0x49,0x4F,0x4E,0xA,0x0,0x20
000065 5443
000066 4f49
000067 0a4e
000068 2000
          	.DB  0x20,0x20,0x20,0x20,0x20,0x66,0x6F,0x72
000069 2020
00006a 2020
00006b 6620
00006c 726f
          	.DB  0x77,0x61,0x72,0x64,0x0,0x20,0x20,0x20
00006d 6177
00006e 6472
00006f 2000
000070 2020
          	.DB  0x20,0x20,0x20,0x72,0x69,0x67,0x68,0x74
000071 2020
000072 7220
000073 6769
000074 7468
          	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x6C
000075 2000
000076 2020
000077 2020
000078 6c20
          	.DB  0x65,0x66,0x74,0x0
000079 6665
00007a 0074
         
          __GLOBAL_INI_TBL:
          	.DW  0x02
00007b 0002
          	.DW  __base_y_G4
00007c 018b
          	.DW  _157*2
00007d 0038
         
          	.DW  0
00007e 0000
         
          __RESET:
00007f 94f8      	CLI
000080 27ee      	CLR  R30
000081 bbec      	OUT  EECR,R30
         
         ;INTERRUPT VECTORS ARE PLACED
         ;AT THE START OF FLASH
000082 e0f1      	LDI  R31,1
000083 bffb      	OUT  GICR,R31
000084 bfeb      	OUT  GICR,R30
000085 bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
000086 e1f8      	LDI  R31,0x18
000087 bdf1      	OUT  WDTCR,R31
000088 bde1      	OUT  WDTCR,R30
         
         ;CLEAR R2-R14
000089 e08d      	LDI  R24,13
00008a e0a2      	LDI  R26,2
00008b 27bb      	CLR  R27
          __CLEAR_REG:
00008c 93ed      	ST   X+,R30
00008d 958a      	DEC  R24
00008e f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
00008f e080      	LDI  R24,LOW(0x400)
000090 e094      	LDI  R25,HIGH(0x400)
000091 e6a0      	LDI  R26,0x60
          __CLEAR_SRAM:
000092 93ed      	ST   X+,R30
000093 9701      	SBIW R24,1
000094 f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
000095 efe6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000096 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
000097 9185      	LPM  R24,Z+
000098 9195      	LPM  R25,Z+
000099 9700      	SBIW R24,0
00009a f061      	BREQ __GLOBAL_INI_END
00009b 91a5      	LPM  R26,Z+
00009c 91b5      	LPM  R27,Z+
00009d 9005      	LPM  R0,Z+
00009e 9015      	LPM  R1,Z+
00009f 01bf      	MOVW R22,R30
0000a0 01f0      	MOVW R30,R0
          __GLOBAL_INI_LOOP:
0000a1 9005      	LPM  R0,Z+
0000a2 920d      	ST   X+,R0
0000a3 9701      	SBIW R24,1
0000a4 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a5 01fb      	MOVW R30,R22
0000a6 cff0      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;STACK POINTER INITIALIZATION
0000a7 e5ef      	LDI  R30,LOW(0x45F)
0000a8 bfed      	OUT  SPL,R30
0000a9 e0e4      	LDI  R30,HIGH(0x45F)
0000aa bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
0000ab e6c0      	LDI  R28,LOW(0x160)
0000ac e0d1      	LDI  R29,HIGH(0x160)
         
0000ad c00a      	RJMP _main
         
          	.ESEG
          	.ORG 0
         
          	.DSEG
          	.ORG 0x160
         ;       1 /*****************************************************
         ;       2 Chip type           : ATmega8
         ;       3 Program type        : Application
         ;       4 Clock frequency     : 8.000000 MHz
         ;       5 Memory model        : Small
         ;       6 External SRAM size  : 0
         ;       7 Data Stack size     : 256
         ;       8 
         ;       9 
         ;      10 
         ;      11 PLEASE NOTE 
         ;      12 
         ;      13 
         ;      14 lcd on port d
         ;      15 
         ;      16 sensors on adc 0,1 and 3
         ;      17 outputs
         ;      18 steering portb 0and 1
         ;      19 wheel motor on portb 6 and 7
         ;      20 
         ;      21 FOR CIRCUIT AND FURTHER DETAILS MAIL TO 
         ;      22                         "anoopjangra@gmail.com"
         ;      23                         with subject line 
         ;      24                         "REQUEST FOR LINE FOLLOWER CIRCUIT"
         ;      25 
         ;      26 *****************************************************/
         ;      27 
         ;      28 #include <mega8.h>    
         ;      29 #include<delay.h>
         ;      30 #include<stdio.h>
         ;      31 #include<string.h>
         ;      32 
         ;      33 
         ;      34 #asm
         ;      35    .equ __lcd_port=0x12 ;PORTD
             .equ __lcd_port=0x12 ;PORTD
         ;      36 #endasm
         ;      37 #include <lcd.h>
         ;      38 
         ;      39 #define ADC_VREF_TYPE 0x20
         ;      40 
         ;      41 // Read the 8 most significant bits
         ;      42 unsigned char read_adc(unsigned char adc_input)
         ;      43 {
         
          	.CSEG
          _read_adc:
         ;      44 ADMUX=adc_input|ADC_VREF_TYPE;
0000ae 81e8      	LD   R30,Y
0000af 62e0      	ORI  R30,0x20
0000b0 b9e7      	OUT  0x7,R30
         ;      45 // Start the AD conversion
         ;      46 ADCSRA|=0x40;
0000b1 9a36      	SBI  0x6,6
         ;      47 // Wait for the AD conversion to complete
         ;      48 while ((ADCSRA & 0x10)==0);
          _0x3:
0000b2 9b34      	SBIS 0x6,4
0000b3 cffe      	RJMP _0x3
         ;      49 ADCSRA|=0x10;
0000b4 9a34      	SBI  0x6,4
         ;      50 return ADCH;
0000b5 b1e5      	IN   R30,0x5
0000b6 9621      	ADIW R28,1
0000b7 9508      	RET
         ;      51 }
         ;      52     
         ;      53 
         ;      54 
         ;      55 
         ;      56 void read_sensor();
         ;      57 void env_c();      
         ;      58 void comp_v();
         ;      59 void move_();       
         ;      60 
         ;      61 #define STL     0x01
         ;      62 #define STR     0x02
         ;      63 #define STC     0x00
         ;      64 #define MOVF    0x80 
         ;      65 #define MOVR    0x40
         ;      66 #define MOVS    0x00
         ;      67 
         ;      68 
         ;      69 
         ;      70 
         ;      71 
         ;      72 
         ;      73 
         ;      74 
         ;      75 // Declare your global variables here
         ;      76 unsigned int i,j,k,l,t1,t2,t;               //ijk sensot ip,  l for loop
         
          	.DSEG
          _t2:
000160      	.BYTE 0x2
          _t:
000162      	.BYTE 0x2
         ;      77 unsigned int s[3],sw[3],sb[3];                  // standard limit to black and white
          _s:
000164      	.BYTE 0x6
          _sw:
00016a      	.BYTE 0x6
          _sb:
000170      	.BYTE 0x6
         ;      78 int m,n;                                        // move variables
          _m:
000176      	.BYTE 0x2
          _n:
000178      	.BYTE 0x2
         ;      79 char x,y,z,a=0,temp[10],sens[4];                    // sens sensor string , disp display string,
          _y:
00017a      	.BYTE 0x1
          _z:
00017b      	.BYTE 0x1
          _a:
00017c      	.BYTE 0x1
          _temp:
00017d      	.BYTE 0xA
          _sens:
000187      	.BYTE 0x4
         ;      80 
         ;      81 
         ;      82 
         ;      83 
         ;      84 void main(void)
         ;      85 {
         
          	.CSEG
          _main:
         ;      86 // Declare your local variables here
         ;      87 
         ;      88 
         ;      89 PORTB=0x00;
0000b8 d40a      	RCALL SUBOPT_0x0
         ;      90 DDRB=0xC3;        //0,1,6,7 are outputs
0000b9 ece3      	LDI  R30,LOW(195)
0000ba bbe7      	OUT  0x17,R30
         ;      91 
         ;      92 PORTC=0x00;
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bbe5      	OUT  0x15,R30
         ;      93 DDRC=0x00;
0000bd bbe4      	OUT  0x14,R30
         ;      94 
         ;      95 PORTD=0x00;
0000be bbe2      	OUT  0x12,R30
         ;      96 DDRD=0x00;
0000bf bbe1      	OUT  0x11,R30
         ;      97 
         ;      98 TCCR0=0x00;
0000c0 bfe3      	OUT  0x33,R30
         ;      99 TCNT0=0x00;
0000c1 bfe2      	OUT  0x32,R30
         ;     100 
         ;     101 TCCR1A=0x00;
0000c2 bdef      	OUT  0x2F,R30
         ;     102 TCCR1B=0x00;
0000c3 bdee      	OUT  0x2E,R30
         ;     103 TCNT1H=0x00;
0000c4 bded      	OUT  0x2D,R30
         ;     104 TCNT1L=0x00;
0000c5 bdec      	OUT  0x2C,R30
         ;     105 ICR1H=0x00;
0000c6 bde7      	OUT  0x27,R30
         ;     106 ICR1L=0x00;
0000c7 bde6      	OUT  0x26,R30
         ;     107 OCR1AH=0x00;
0000c8 bdeb      	OUT  0x2B,R30
         ;     108 OCR1AL=0x00;
0000c9 bdea      	OUT  0x2A,R30
         ;     109 OCR1BH=0x00;
0000ca bde9      	OUT  0x29,R30
         ;     110 OCR1BL=0x00;
0000cb bde8      	OUT  0x28,R30
         ;     111 
         ;     112 ASSR=0x00;
0000cc bde2      	OUT  0x22,R30
         ;     113 TCCR2=0x00;
0000cd bde5      	OUT  0x25,R30
         ;     114 TCNT2=0x00;
0000ce bde4      	OUT  0x24,R30
         ;     115 OCR2=0x00;
0000cf bde3      	OUT  0x23,R30
         ;     116 
         ;     117 MCUCR=0x00;
0000d0 bfe5      	OUT  0x35,R30
         ;     118 
         ;     119 // Timer(s)/Counter(s) Interrupt(s) initialization
         ;     120 TIMSK=0x00;
0000d1 bfe9      	OUT  0x39,R30
         ;     121 
         ;     122 // Analog Comparator initialization
         ;     123 // Analog Comparator: Off
         ;     124 // Analog Comparator Input Capture by Timer/Counter 1: Off
         ;     125 ACSR=0x80;
0000d2 e8e0      	LDI  R30,LOW(128)
0000d3 b9e8      	OUT  0x8,R30
         ;     126 SFIOR=0x00;
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 bfe0      	OUT  0x30,R30
         ;     127 
         ;     128 // ADC initialization
         ;     129 // ADC Clock frequency: 125.000 kHz
         ;     130 // ADC Voltage Reference: AREF pin
         ;     131 // Only the 8 most significant bits of
         ;     132 // the AD conversion result are used
         ;     133 ADMUX=ADC_VREF_TYPE;
0000d6 e2e0      	LDI  R30,LOW(32)
0000d7 b9e7      	OUT  0x7,R30
         ;     134 ADCSRA=0x86;
0000d8 e8e6      	LDI  R30,LOW(134)
0000d9 b9e6      	OUT  0x6,R30
         ;     135 
         ;     136 
         ;     137 
         ;     138 // LCD module initialization
         ;     139 lcd_init(16);
0000da e1e0      	LDI  R30,LOW(16)
0000db 93ea      	ST   -Y,R30
0000dc d3b9      	RCALL _lcd_init
         ;     140 
         ;     141 lcd_clear();
0000dd d35e      	RCALL _lcd_clear
         ;     142 lcd_putsf("Starting Up");
0000de   +  	__POINTW1FN _0,0
0000e0 d3e5      	RCALL SUBOPT_0x1
         ;     143 for(l=0;l<10;l++)
0000e1 24aa      	CLR  R10
0000e2 24bb      	CLR  R11
          _0x7:
0000e3 e0ea      	LDI  R30,LOW(10)
0000e4 e0f0      	LDI  R31,HIGH(10)
0000e5 16ae      	CP   R10,R30
0000e6 06bf      	CPC  R11,R31
0000e7 f458      	BRSH _0x8
         ;     144 {
         ;     145         lcd_putsf(".");
0000e8   +  	__POINTW1FN _0,12
0000ea d3db      	RCALL SUBOPT_0x1
         ;     146         delay_ms(100);
0000eb e6e4      	LDI  R30,LOW(100)
0000ec e0f0      	LDI  R31,HIGH(100)
0000ed d3db      	RCALL SUBOPT_0x2
         ;     147 } 
0000ee e0e1      	LDI  R30,LOW(1)
0000ef e0f0      	LDI  R31,HIGH(1)
0000f0   +  	__ADDWRR 10,11,30,31
0000f2 cff0      	RJMP _0x7
          _0x8:
         ;     148 
         ;     149 delay_ms(1000);
0000f3 d3d8      	RCALL SUBOPT_0x3
         ;     150 lcd_clear();
0000f4 d347      	RCALL _lcd_clear
         ;     151 
         ;     152 
         ;     153 //inital calib
         ;     154 env_c();
0000f5 d018      	RCALL _env_c
         ;     155 
         ;     156 
         ;     157 
         ;     158 
         ;     159 while (1)
          _0x9:
         ;     160       {
         ;     161       read_sensor();
0000f6 d00a      	RCALL _read_sensor
         ;     162       comp_v(); 
0000f7 d0c5      	RCALL _comp_v
         ;     163       lcd_clear();
0000f8 d343      	RCALL _lcd_clear
         ;     164       move_();
0000f9 d0f7      	RCALL _move_
         ;     165       //delay_ms(100);
         ;     166        a++;    
0000fa 91e0 017c 	LDS  R30,_a
0000fc 5fef      	SUBI R30,-LOW(1)
0000fd 93e0 017c 	STS  _a,R30
         ;     167       };
0000ff cff6      	RJMP _0x9
         ;     168 }
          _0xC:
000100 cfff      	RJMP _0xC
         ;     169 
         ;     170 
         ;     171 void read_sensor(void)          // read sensor
         ;     172 {
          _read_sensor:
         ;     173         i=read_adc(0); 
000101 d3cd      	RCALL SUBOPT_0x4
000102 d3cf      	RCALL SUBOPT_0x5
000103   +  	__PUTW1R 4,5
         ;     174         j=read_adc(1);
000105 d3cf      	RCALL SUBOPT_0x6
000106 d3cb      	RCALL SUBOPT_0x5
000107   +  	__PUTW1R 6,7
         ;     175         k=read_adc(2);
000109 d3ce      	RCALL SUBOPT_0x7
00010a d3c7      	RCALL SUBOPT_0x5
00010b   +  	__PUTW1R 8,9
         ;     176         
         ;     177         
         ;     178       
         ;     179 }
00010d 9508      	RET
         ;     180 
         ;     181 
         ;     182 // environment calib
         ;     183 
         ;     184 void env_c(void)
         ;     185 {       
          _env_c:
         ;     186         //black detection
         ;     187         
         ;     188         
         ;     189         
         ;     190         for(l=51;l>47;l--)
00010e d3cc      	RCALL SUBOPT_0x8
          _0xE:
00010f d3d0      	RCALL SUBOPT_0x9
000110 f438      	BRSH _0xF
         ;     191         {       lcd_clear();
000111 d32a      	RCALL _lcd_clear
         ;     192                 lcd_putsf("Put BOT on Black");
000112   +  	__POINTW1FN _0,14
000114 d3b1      	RCALL SUBOPT_0x1
         ;     193                 lcd_putchar(l);
000115 d3cf      	RCALL SUBOPT_0xA
         ;     194                 delay_ms(1000);
         ;     195         }
000116 d3d1      	RCALL SUBOPT_0xB
000117 cff7      	RJMP _0xE
          _0xF:
         ;     196         
         ;     197         
         ;     198         lcd_clear();
000118 d323      	RCALL _lcd_clear
         ;     199         lcd_putsf("\nDetecting..");
000119   +  	__POINTW1FN _0,31
00011b d3aa      	RCALL SUBOPT_0x1
         ;     200         delay_ms(1000);
00011c d3af      	RCALL SUBOPT_0x3
         ;     201        
         ;     202                 read_sensor();
00011d dfe3      	RCALL _read_sensor
         ;     203                 sb[0]=i;
00011e   +  	__PUTWMRN _sb,0,4,5
         ;     204                 sb[1]=j;
000122   +  	__PUTWMRN _sb,2,6,7
         ;     205                 sb[2]=k; 
000126   +  	__PUTWMRN _sb,4,8,9
         ;     206                 t1=(i+j+k)/3;
00012a d3c3      	RCALL SUBOPT_0xC
00012b   +  	__PUTW1R 12,13
         ;     207                 sprintf(temp,":%d:%d:%d:",i,j,k);
00012d d3cb      	RCALL SUBOPT_0xD
00012e   +  	__POINTW1FN _0,44
000130 d3cd      	RCALL SUBOPT_0xE
000131 e08c      	LDI  R24,12
000132 d3dd      	RCALL SUBOPT_0xF
         ;     208                 lcd_clear();
         ;     209                 lcd_putsf("Black=\n");
000133   +  	__POINTW1FN _0,55
000135 d390      	RCALL SUBOPT_0x1
         ;     210                 lcd_puts(temp);
000136 d3c2      	RCALL SUBOPT_0xD
000137 d3db      	RCALL SUBOPT_0x10
         ;     211                 delay_ms(1000);
         ;     212           
         ;     213         
         ;     214         
         ;     215         //white detection
         ;     216         
         ;     217         
         ;     218         
         ;     219         for(l=51;l>47;l--)
000138 d3a2      	RCALL SUBOPT_0x8
          _0x11:
000139 d3a6      	RCALL SUBOPT_0x9
00013a f438      	BRSH _0x12
         ;     220         {
         ;     221                 lcd_clear();
00013b d300      	RCALL _lcd_clear
         ;     222                 lcd_putsf("Put BOT on White");
00013c   +  	__POINTW1FN _0,63
00013e d387      	RCALL SUBOPT_0x1
         ;     223                 lcd_putchar(l);
00013f d3a5      	RCALL SUBOPT_0xA
         ;     224                 delay_ms(1000);
         ;     225         
         ;     226         }
000140 d3a7      	RCALL SUBOPT_0xB
000141 cff7      	RJMP _0x11
          _0x12:
         ;     227         
         ;     228         
         ;     229         lcd_clear();
000142 d2f9      	RCALL _lcd_clear
         ;     230         lcd_putsf("\nDetecting..");
000143   +  	__POINTW1FN _0,31
000145 d380      	RCALL SUBOPT_0x1
         ;     231         delay_ms(1000); 
000146 d385      	RCALL SUBOPT_0x3
         ;     232        
         ;     233                 read_sensor(); 
000147 dfb9      	RCALL _read_sensor
         ;     234                 sb[0]=i;
000148   +  	__PUTWMRN _sb,0,4,5
         ;     235                 sb[1]=j;
00014c   +  	__PUTWMRN _sb,2,6,7
         ;     236                 sb[2]=k; 
000150   +  	__PUTWMRN _sb,4,8,9
         ;     237                 t2=(i+j+k)/3;
000154 d399      	RCALL SUBOPT_0xC
000155 93e0 0160 	STS  _t2,R30
000157 93f0 0161 	STS  _t2+1,R31
         ;     238                 sprintf(temp,":%d:%d:%d:",i,j,k);
000159 d39f      	RCALL SUBOPT_0xD
00015a   +  	__POINTW1FN _0,44
00015c d3a1      	RCALL SUBOPT_0xE
00015d e08c      	LDI  R24,12
00015e d3b1      	RCALL SUBOPT_0xF
         ;     239                 lcd_clear();
         ;     240                 lcd_putsf("White=\n");
00015f   +  	__POINTW1FN _0,80
000161 d364      	RCALL SUBOPT_0x1
         ;     241                 lcd_puts(temp);
000162 d396      	RCALL SUBOPT_0xD
000163 d3af      	RCALL SUBOPT_0x10
         ;     242                 delay_ms(1000);   
         ;     243        
         ;     244         
         ;     245         // if there is a little or no diff b/w black and white
         ;     246                               
         ;     247         if(t2<=t1)
000164 91a0 0160 	LDS  R26,_t2
000166 91b0 0161 	LDS  R27,_t2+1
000168 16ca      	CP   R12,R26
000169 06db      	CPC  R13,R27
00016a f020      	BRLO _0x13
         ;     248         {
         ;     249         lcd_clear();
00016b d2d0      	RCALL _lcd_clear
         ;     250         lcd_putsf("Error!\nPlease Recalbrt");
00016c   +  	__POINTW1FN _0,88
00016e c015      	RJMP _0xA1
         ;     251         delay_ms(2000);
         ;     252         env_c();
         ;     253         }
         ;     254         
         ;     255         else
          _0x13:
         ;     256         {
         ;     257                 t=t2-t1;
00016f 91e0 0160 	LDS  R30,_t2
000171 91f0 0161 	LDS  R31,_t2+1
000173 19ec      	SUB  R30,R12
000174 09fd      	SBC  R31,R13
000175 93e0 0162 	STS  _t,R30
000177 93f0 0163 	STS  _t+1,R31
         ;     258                 if(t<5)
000179 91a0 0162 	LDS  R26,_t
00017b 91b0 0163 	LDS  R27,_t+1
00017d 30a5      	CPI  R26,LOW(0x5)
00017e e0e0      	LDI  R30,HIGH(0x5)
00017f 07be      	CPC  R27,R30
000180 f440      	BRSH _0x15
         ;     259                 {
         ;     260                         lcd_clear();
000181 d2ba      	RCALL _lcd_clear
         ;     261                         lcd_putsf("Error!\nPlease Recalbrt");
000182   +  	__POINTW1FN _0,88
          _0xA1:
000184 93fa      	ST   -Y,R31
000185 93ea      	ST   -Y,R30
000186 d2f4      	RCALL _lcd_putsf
         ;     262                         delay_ms(2000);
000187 d38d      	RCALL SUBOPT_0x11
         ;     263                         env_c();
000188 df85      	RCALL _env_c
         ;     264                 }
         ;     265                 
         ;     266         } 
          _0x15:
         ;     267          
         ;     268         lcd_clear();
000189 d2b2      	RCALL _lcd_clear
         ;     269         lcd_putsf("Detection Done!");
00018a   +  	__POINTW1FN _0,111
00018c d339      	RCALL SUBOPT_0x1
         ;     270         delay_ms(2000);
00018d d387      	RCALL SUBOPT_0x11
         ;     271         lcd_clear();
00018e d2ad      	RCALL _lcd_clear
         ;     272                 //t=(t1+t2)
         ;     273                 //std=t;
         ;     274         for(l=0;l<3;l++) s[l]=(sw[l]+sb[l])/2;        
00018f 24aa      	CLR  R10
000190 24bb      	CLR  R11
          _0x17:
000191 e0e3      	LDI  R30,LOW(3)
000192 e0f0      	LDI  R31,HIGH(3)
000193 16ae      	CP   R10,R30
000194 06bf      	CPC  R11,R31
000195 f530      	BRSH _0x18
000196   +  	__GETW1R 10,11
000198 e6a4      	LDI  R26,LOW(_s)
000199 e0b1      	LDI  R27,HIGH(_s)
00019a 0fee      	LSL  R30
00019b 1fff      	ROL  R31
00019c 0fea      	ADD  R30,R26
00019d 1ffb      	ADC  R31,R27
00019e 93ff      	PUSH R31
00019f 93ef      	PUSH R30
0001a0   +  	__GETW1R 10,11
0001a2 e6aa      	LDI  R26,LOW(_sw)
0001a3 e0b1      	LDI  R27,HIGH(_sw)
0001a4 d373      	RCALL SUBOPT_0x12
0001a5 93ff      	PUSH R31
0001a6 93ef      	PUSH R30
0001a7   +  	__GETW1R 10,11
0001a9 e7a0      	LDI  R26,LOW(_sb)
0001aa e0b1      	LDI  R27,HIGH(_sb)
0001ab d36c      	RCALL SUBOPT_0x12
0001ac 91af      	POP  R26
0001ad 91bf      	POP  R27
0001ae 0fae      	ADD  R26,R30
0001af 1fbf      	ADC  R27,R31
0001b0 01fd      	MOVW R30,R26
0001b1 95f6      	LSR  R31
0001b2 95e7      	ROR  R30
0001b3 91af      	POP  R26
0001b4 91bf      	POP  R27
0001b5 93ed      	ST   X+,R30
0001b6 93fc      	ST   X,R31
         ;     275 }             
0001b7 e0e1      	LDI  R30,LOW(1)
0001b8 e0f0      	LDI  R31,HIGH(1)
0001b9   +  	__ADDWRR 10,11,30,31
0001bb cfd5      	RJMP _0x17
          _0x18:
0001bc 9508      	RET
         ;     276 
         ;     277 
         ;     278 //assign black and white
         ;     279 
         ;     280 void comp_v()
         ;     281 {
          _comp_v:
         ;     282         if(i<=s[0])     x='B';
0001bd 91e0 0164 	LDS  R30,_s
0001bf 91f0 0165 	LDS  R31,_s+1
0001c1 15e4      	CP   R30,R4
0001c2 05f5      	CPC  R31,R5
0001c3 f010      	BRLO _0x19
0001c4 e4e2      	LDI  R30,LOW(66)
0001c5 c001      	RJMP _0xA2
         ;     283         else            x='W';
          _0x19:
0001c6 e5e7      	LDI  R30,LOW(87)
          _0xA2:
0001c7 2eee      	MOV  R14,R30
         ;     284         if(j<=s[1])     y='B';
0001c8   +  	__GETW1MN _s,2
0001cc 15e6      	CP   R30,R6
0001cd 05f7      	CPC  R31,R7
0001ce f010      	BRLO _0x1B
0001cf e4e2      	LDI  R30,LOW(66)
0001d0 c001      	RJMP _0xA3
         ;     285         else            y='W';
          _0x1B:
0001d1 e5e7      	LDI  R30,LOW(87)
          _0xA3:
0001d2 93e0 017a 	STS  _y,R30
         ;     286         if(k<=s[2])     z='B';
0001d4   +  	__GETW1MN _s,4
0001d8 15e8      	CP   R30,R8
0001d9 05f9      	CPC  R31,R9
0001da f010      	BRLO _0x1D
0001db e4e2      	LDI  R30,LOW(66)
0001dc c001      	RJMP _0xA4
         ;     287         else            z='W';
          _0x1D:
0001dd e5e7      	LDI  R30,LOW(87)
          _0xA4:
0001de 93e0 017b 	STS  _z,R30
         ;     288         
         ;     289         sprintf(sens,"%c%c%c",x,y,z);
0001e0 d33d      	RCALL SUBOPT_0x13
0001e1   +  	__POINTW1FN _0,127
0001e3 93fa      	ST   -Y,R31
0001e4 93ea      	ST   -Y,R30
0001e5 2dee      	MOV  R30,R14
0001e6 d33c      	RCALL SUBOPT_0x14
0001e7 91e0 017a 	LDS  R30,_y
0001e9 d339      	RCALL SUBOPT_0x14
0001ea 91e0 017b 	LDS  R30,_z
0001ec d336      	RCALL SUBOPT_0x14
0001ed e08c      	LDI  R24,12
0001ee d1e1      	RCALL _sprintf
0001ef 9660      	ADIW R28,16
         ;     290  
         ;     291 
         ;     292 }   
0001f0 9508      	RET
         ;     293 
         ;     294 //writing to motors
         ;     295 
         ;     296 void move_()
         ;     297 {
          _move_:
         ;     298       if(((x=='W')&(y=='B')&(z=='W'))||((x=='B')&(y=='W')&(z=='B'))) m=1;
0001f1 d336      	RCALL SUBOPT_0x15
0001f2 93ef      	PUSH R30
0001f3 d338      	RCALL SUBOPT_0x16
0001f4 91af      	POP  R26
0001f5 23ea      	AND  R30,R26
0001f6 93ef      	PUSH R30
0001f7 d339      	RCALL SUBOPT_0x17
0001f8 91af      	POP  R26
0001f9 23ea      	AND  R30,R26
0001fa f451      	BRNE _0x20
0001fb d33a      	RCALL SUBOPT_0x18
0001fc 93ef      	PUSH R30
0001fd d33c      	RCALL SUBOPT_0x19
0001fe 91af      	POP  R26
0001ff 23ea      	AND  R30,R26
000200 93ef      	PUSH R30
000201 d33d      	RCALL SUBOPT_0x1A
000202 91af      	POP  R26
000203 23ea      	AND  R30,R26
000204 f039      	BREQ _0x1F
          _0x20:
000205 e0e1      	LDI  R30,LOW(1)
000206 e0f0      	LDI  R31,HIGH(1)
000207 93e0 0176 	STS  _m,R30
000209 93f0 0177 	STS  _m+1,R31
         ;     299       else if(((x=='W')&(y=='B')&(z=='B'))||((x=='W')&(y=='W')&(z=='B'))) m=2;
00020b c04f      	RJMP _0x22
          _0x1F:
00020c d31b      	RCALL SUBOPT_0x15
00020d 93ef      	PUSH R30
00020e d31d      	RCALL SUBOPT_0x16
00020f 91af      	POP  R26
000210 23ea      	AND  R30,R26
000211 93ef      	PUSH R30
000212 d32c      	RCALL SUBOPT_0x1A
000213 91af      	POP  R26
000214 23ea      	AND  R30,R26
000215 f451      	BRNE _0x24
000216 d311      	RCALL SUBOPT_0x15
000217 93ef      	PUSH R30
000218 d321      	RCALL SUBOPT_0x19
000219 91af      	POP  R26
00021a 23ea      	AND  R30,R26
00021b 93ef      	PUSH R30
00021c d322      	RCALL SUBOPT_0x1A
00021d 91af      	POP  R26
00021e 23ea      	AND  R30,R26
00021f f039      	BREQ _0x23
          _0x24:
000220 e0e2      	LDI  R30,LOW(2)
000221 e0f0      	LDI  R31,HIGH(2)
000222 93e0 0176 	STS  _m,R30
000224 93f0 0177 	STS  _m+1,R31
         ;     300       else if(((x=='B')&(y=='W')&(z=='W'))||((x=='B')&(y=='B')&(z=='W'))) m=3;
000226 c034      	RJMP _0x26
          _0x23:
000227 d30e      	RCALL SUBOPT_0x18
000228 93ef      	PUSH R30
000229 d310      	RCALL SUBOPT_0x19
00022a 91af      	POP  R26
00022b 23ea      	AND  R30,R26
00022c 93ef      	PUSH R30
00022d d303      	RCALL SUBOPT_0x17
00022e 91af      	POP  R26
00022f 23ea      	AND  R30,R26
000230 f451      	BRNE _0x28
000231 d304      	RCALL SUBOPT_0x18
000232 93ef      	PUSH R30
000233 d2f8      	RCALL SUBOPT_0x16
000234 91af      	POP  R26
000235 23ea      	AND  R30,R26
000236 93ef      	PUSH R30
000237 d2f9      	RCALL SUBOPT_0x17
000238 91af      	POP  R26
000239 23ea      	AND  R30,R26
00023a f039      	BREQ _0x27
          _0x28:
00023b e0e3      	LDI  R30,LOW(3)
00023c e0f0      	LDI  R31,HIGH(3)
00023d 93e0 0176 	STS  _m,R30
00023f 93f0 0177 	STS  _m+1,R31
         ;     301       else if(((x=='W')&(y=='W')&(z=='W'))||((x=='B')&(y=='B')&(z=='B'))) m=0;
000241 c019      	RJMP _0x2A
          _0x27:
000242 d2e5      	RCALL SUBOPT_0x15
000243 93ef      	PUSH R30
000244 d2f5      	RCALL SUBOPT_0x19
000245 91af      	POP  R26
000246 23ea      	AND  R30,R26
000247 93ef      	PUSH R30
000248 d2e8      	RCALL SUBOPT_0x17
000249 91af      	POP  R26
00024a 23ea      	AND  R30,R26
00024b f451      	BRNE _0x2C
00024c d2e9      	RCALL SUBOPT_0x18
00024d 93ef      	PUSH R30
00024e d2dd      	RCALL SUBOPT_0x16
00024f 91af      	POP  R26
000250 23ea      	AND  R30,R26
000251 93ef      	PUSH R30
000252 d2ec      	RCALL SUBOPT_0x1A
000253 91af      	POP  R26
000254 23ea      	AND  R30,R26
000255 f029      	BREQ _0x2B
          _0x2C:
000256 e0e0      	LDI  R30,0
000257 93e0 0176 	STS  _m,R30
000259 93e0 0177 	STS  _m+1,R30
         ;     302       
         ;     303       if(m!=0) n=m;
          _0x2B:
          _0x2A:
          _0x26:
          _0x22:
00025b d2e8      	RCALL SUBOPT_0x1B
00025c f041      	BREQ _0x2E
00025d 91e0 0176 	LDS  R30,_m
00025f 91f0 0177 	LDS  R31,_m+1
000261 93e0 0178 	STS  _n,R30
000263 93f0 0179 	STS  _n+1,R31
         ;     304 
         ;     305       lcd_putsf("SENSORS  ACTION\n");
          _0x2E:
000265   +  	__POINTW1FN _0,134
000267 d25e      	RCALL SUBOPT_0x1
         ;     306       lcd_puts(sens);      
000268 d2b5      	RCALL SUBOPT_0x13
000269 d207      	RCALL _lcd_puts
         ;     307       switch(m?m:n)
00026a d2d9      	RCALL SUBOPT_0x1B
00026b f029      	BREQ _0x32
00026c 91e0 0176 	LDS  R30,_m
00026e 91f0 0177 	LDS  R31,_m+1
000270 c004      	RJMP _0x33
          _0x32:
000271 91e0 0178 	LDS  R30,_n
000273 91f0 0179 	LDS  R31,_n+1
          _0x33:
         ;     308       {
         ;     309         case 1: PORTB=(STC|((a%4==0)?MOVF:MOVS));lcd_putsf("      forward"); break;
000275 30e1      	CPI  R30,LOW(0x1)
000276 e0a0      	LDI  R26,HIGH(0x1)
000277 07fa      	CPC  R31,R26
000278 f451      	BRNE _0x35
000279 d2d0      	RCALL SUBOPT_0x1C
00027a f411      	BRNE _0x36
00027b e8e0      	LDI  R30,LOW(128)
00027c c001      	RJMP _0x37
          _0x36:
00027d e0e0      	LDI  R30,LOW(0)
          _0x37:
00027e bbe8      	OUT  0x18,R30
00027f   +  	__POINTW1FN _0,151
000281 d244      	RCALL SUBOPT_0x1
000282 c01f      	RJMP _0x31
         ;     310         
         ;     311         case 2: PORTB=(STR|((a%4==0)?MOVF:MOVS));lcd_putsf("      right"); break;
          _0x35:
000283 30e2      	CPI  R30,LOW(0x2)
000284 e0a0      	LDI  R26,HIGH(0x2)
000285 07fa      	CPC  R31,R26
000286 f459      	BRNE _0x39
000287 d2c2      	RCALL SUBOPT_0x1C
000288 f411      	BRNE _0x3A
000289 e8e0      	LDI  R30,LOW(128)
00028a c001      	RJMP _0x3B
          _0x3A:
00028b e0e0      	LDI  R30,LOW(0)
          _0x3B:
00028c 60e2      	ORI  R30,2
00028d bbe8      	OUT  0x18,R30
00028e   +  	__POINTW1FN _0,165
000290 d235      	RCALL SUBOPT_0x1
000291 c010      	RJMP _0x31
         ;     312         
         ;     313         case 3: PORTB=(STL|((a%4==0)?MOVF:MOVS));lcd_putsf("      left"); break;
          _0x39:
000292 30e3      	CPI  R30,LOW(0x3)
000293 e0a0      	LDI  R26,HIGH(0x3)
000294 07fa      	CPC  R31,R26
000295 f459      	BRNE _0x41
000296 d2b3      	RCALL SUBOPT_0x1C
000297 f411      	BRNE _0x3E
000298 e8e0      	LDI  R30,LOW(128)
000299 c001      	RJMP _0x3F
          _0x3E:
00029a e0e0      	LDI  R30,LOW(0)
          _0x3F:
00029b 60e1      	ORI  R30,1
00029c bbe8      	OUT  0x18,R30
00029d   +  	__POINTW1FN _0,177
00029f d226      	RCALL SUBOPT_0x1
0002a0 c001      	RJMP _0x31
         ;     314         
         ;     315         default: PORTB=0x00;
          _0x41:
0002a1 d221      	RCALL SUBOPT_0x0
         ;     316       }
          _0x31:
         ;     317       
         ;     318       
         ;     319 }
0002a2 9508      	RET
         
          _getchar:
0002a3 9b5f           sbis usr,rxc
0002a4 cffe           rjmp _getchar
0002a5 b1ec           in   r30,udr
0002a6 9508      	RET
          _putchar:
0002a7 9b5d           sbis usr,udre
0002a8 cffe           rjmp _putchar
0002a9 81e8           ld   r30,y
0002aa b9ec           out  udr,r30
0002ab 9621      	ADIW R28,1
0002ac 9508      	RET
          __put_G2:
          	put:
0002ad d2a0      	RCALL SUBOPT_0x1D
0002ae 9730      	SBIW R30,0
0002af f041      	BREQ _0x42
0002b0 d29d      	RCALL SUBOPT_0x1D
0002b1 9631      	ADIW R30,1
0002b2 93ed      	ST   X+,R30
0002b3 93fc      	ST   X,R31
0002b4 9731      	SBIW R30,1
0002b5 81aa      	LDD  R26,Y+2
0002b6 83a0      	STD  Z+0,R26
0002b7 c003      	RJMP _0x43
          _0x42:
0002b8 81ea      	LDD  R30,Y+2
0002b9 93ea      	ST   -Y,R30
0002ba dfec      	RCALL _putchar
          _0x43:
0002bb 9623      	ADIW R28,3
0002bc 9508      	RET
          __print_G2:
0002bd 9726      	SBIW R28,6
0002be d30f      	RCALL __SAVELOCR6
0002bf e000      	LDI  R16,0
          _0x44:
0002c0 89e8      	LDD  R30,Y+16
0002c1 89f9      	LDD  R31,Y+16+1
0002c2 9631      	ADIW R30,1
0002c3 8be8      	STD  Y+16,R30
0002c4 8bf9      	STD  Y+16+1,R31
0002c5 d28c      	RCALL SUBOPT_0x1E
0002c6 2f3e      	MOV  R19,R30
0002c7 30e0      	CPI  R30,0
0002c8 f409      	BRNE PC+2
0002c9 c103      	RJMP _0x46
0002ca 2fe0      	MOV  R30,R16
0002cb 30e0      	CPI  R30,0
0002cc f431      	BRNE _0x4A
0002cd 3235      	CPI  R19,37
0002ce f411      	BRNE _0x4B
0002cf e001      	LDI  R16,LOW(1)
0002d0 c001      	RJMP _0x4C
          _0x4B:
0002d1 d283      	RCALL SUBOPT_0x1F
          _0x4C:
0002d2 c0f9      	RJMP _0x49
          _0x4A:
0002d3 30e1      	CPI  R30,LOW(0x1)
0002d4 f4a9      	BRNE _0x4D
0002d5 3235      	CPI  R19,37
0002d6 f419      	BRNE _0x4E
0002d7 d27d      	RCALL SUBOPT_0x1F
0002d8 e000      	LDI  R16,LOW(0)
0002d9 c0f2      	RJMP _0x49
          _0x4E:
0002da e002      	LDI  R16,LOW(2)
0002db e050      	LDI  R21,LOW(0)
0002dc e010      	LDI  R17,LOW(0)
0002dd 323d      	CPI  R19,45
0002de f411      	BRNE _0x4F
0002df e011      	LDI  R17,LOW(1)
0002e0 c0eb      	RJMP _0x49
          _0x4F:
0002e1 323b      	CPI  R19,43
0002e2 f411      	BRNE _0x50
0002e3 e25b      	LDI  R21,LOW(43)
0002e4 c0e7      	RJMP _0x49
          _0x50:
0002e5 3230      	CPI  R19,32
0002e6 f411      	BRNE _0x51
0002e7 e250      	LDI  R21,LOW(32)
0002e8 c0e3      	RJMP _0x49
          _0x51:
0002e9 c002      	RJMP _0x52
          _0x4D:
0002ea 30e2      	CPI  R30,LOW(0x2)
0002eb f439      	BRNE _0x53
          _0x52:
0002ec e040      	LDI  R20,LOW(0)
0002ed e003      	LDI  R16,LOW(3)
0002ee 3330      	CPI  R19,48
0002ef f411      	BRNE _0x54
0002f0 6810      	ORI  R17,LOW(128)
0002f1 c0da      	RJMP _0x49
          _0x54:
0002f2 c003      	RJMP _0x55
          _0x53:
0002f3 30e3      	CPI  R30,LOW(0x3)
0002f4 f009      	BREQ PC+2
0002f5 c0d6      	RJMP _0x49
          _0x55:
0002f6 3330      	CPI  R19,48
0002f7 f010      	BRLO _0x58
0002f8 333a      	CPI  R19,58
0002f9 f008      	BRLO _0x59
          _0x58:
0002fa c009      	RJMP _0x57
          _0x59:
0002fb 2fa4      	MOV  R26,R20
0002fc e0ea      	LDI  R30,LOW(10)
0002fd 9fea      	MUL  R30,R26
0002fe 2de0      	MOV  R30,R0
0002ff 2f4e      	MOV  R20,R30
000300 2fe3      	MOV  R30,R19
000301 53e0      	SUBI R30,LOW(48)
000302 0f4e      	ADD  R20,R30
000303 c0c8      	RJMP _0x49
          _0x57:
000304 2fe3      	MOV  R30,R19
000305 36e3      	CPI  R30,LOW(0x63)
000306 f421      	BRNE _0x5D
000307 d253      	RCALL SUBOPT_0x20
000308 91ec      	LD   R30,X
000309 d258      	RCALL SUBOPT_0x21
00030a c0c0      	RJMP _0x5E
          _0x5D:
00030b 37e3      	CPI  R30,LOW(0x73)
00030c f429      	BRNE _0x60
00030d d24d      	RCALL SUBOPT_0x20
00030e d259      	RCALL SUBOPT_0x22
00030f d270      	RCALL _strlen
000310 2f0e      	MOV  R16,R30
000311 c007      	RJMP _0x61
          _0x60:
000312 37e0      	CPI  R30,LOW(0x70)
000313 f449      	BRNE _0x63
000314 d246      	RCALL SUBOPT_0x20
000315 d252      	RCALL SUBOPT_0x22
000316 d273      	RCALL _strlenf
000317 2f0e      	MOV  R16,R30
000318 6018      	ORI  R17,LOW(8)
          _0x61:
000319 6012      	ORI  R17,LOW(2)
00031a 771f      	ANDI R17,LOW(127)
00031b e020      	LDI  R18,LOW(0)
00031c c030      	RJMP _0x64
          _0x63:
00031d 36e4      	CPI  R30,LOW(0x64)
00031e f011      	BREQ _0x67
00031f 36e9      	CPI  R30,LOW(0x69)
000320 f411      	BRNE _0x68
          _0x67:
000321 6014      	ORI  R17,LOW(4)
000322 c002      	RJMP _0x69
          _0x68:
000323 37e5      	CPI  R30,LOW(0x75)
000324 f431      	BRNE _0x6A
          _0x69:
000325 e2e6      	LDI  R30,LOW(_tbl10_G2*2)
000326 e0f0      	LDI  R31,HIGH(_tbl10_G2*2)
000327 83ee      	STD  Y+6,R30
000328 83ff      	STD  Y+6+1,R31
000329 e005      	LDI  R16,LOW(5)
00032a c00c      	RJMP _0x6B
          _0x6A:
00032b 35e8      	CPI  R30,LOW(0x58)
00032c f411      	BRNE _0x6D
00032d 6018      	ORI  R17,LOW(8)
00032e c003      	RJMP _0x6E
          _0x6D:
00032f 37e8      	CPI  R30,LOW(0x78)
000330 f009      	BREQ PC+2
000331 c099      	RJMP _0x9C
          _0x6E:
000332 e3e0      	LDI  R30,LOW(_tbl16_G2*2)
000333 e0f0      	LDI  R31,HIGH(_tbl16_G2*2)
000334 83ee      	STD  Y+6,R30
000335 83ff      	STD  Y+6+1,R31
000336 e004      	LDI  R16,LOW(4)
          _0x6B:
000337 ff12      	SBRS R17,2
000338 c012      	RJMP _0x70
000339 d221      	RCALL SUBOPT_0x20
00033a d233      	RCALL SUBOPT_0x23
00033b 85aa      	LDD  R26,Y+10
00033c 85bb      	LDD  R27,Y+10+1
00033d 9710      	SBIW R26,0
00033e f434      	BRGE _0x71
00033f 85ea      	LDD  R30,Y+10
000340 85fb      	LDD  R31,Y+10+1
000341 d263      	RCALL __ANEGW1
000342 87ea      	STD  Y+10,R30
000343 87fb      	STD  Y+10+1,R31
000344 e25d      	LDI  R21,LOW(45)
          _0x71:
000345 3050      	CPI  R21,0
000346 f011      	BREQ _0x72
000347 5f0f      	SUBI R16,-LOW(1)
000348 c001      	RJMP _0x73
          _0x72:
000349 7f1b      	ANDI R17,LOW(251)
          _0x73:
00034a c002      	RJMP _0x74
          _0x70:
00034b d20f      	RCALL SUBOPT_0x20
00034c d221      	RCALL SUBOPT_0x23
          _0x74:
          _0x64:
00034d fd10      	SBRC R17,0
00034e c010      	RJMP _0x75
          _0x76:
00034f 1704      	CP   R16,R20
000350 f470      	BRSH _0x78
000351 ff17      	SBRS R17,7
000352 c008      	RJMP _0x79
000353 ff12      	SBRS R17,2
000354 c004      	RJMP _0x7A
000355 7f1b      	ANDI R17,LOW(251)
000356 2f35      	MOV  R19,R21
000357 5001      	SUBI R16,LOW(1)
000358 c001      	RJMP _0x7B
          _0x7A:
000359 e330      	LDI  R19,LOW(48)
          _0x7B:
00035a c001      	RJMP _0x7C
          _0x79:
00035b e230      	LDI  R19,LOW(32)
          _0x7C:
00035c d1f8      	RCALL SUBOPT_0x1F
00035d 5041      	SUBI R20,LOW(1)
00035e cff0      	RJMP _0x76
          _0x78:
          _0x75:
00035f 2f20      	MOV  R18,R16
000360 ff11      	SBRS R17,1
000361 c018      	RJMP _0x7D
          _0x7E:
000362 3020      	CPI  R18,0
000363 f0a9      	BREQ _0x80
000364 ff13      	SBRS R17,3
000365 c007      	RJMP _0x81
000366 81ee      	LDD  R30,Y+6
000367 81ff      	LDD  R31,Y+6+1
000368 9631      	ADIW R30,1
000369 83ee      	STD  Y+6,R30
00036a 83ff      	STD  Y+6+1,R31
00036b d1e6      	RCALL SUBOPT_0x1E
00036c c005      	RJMP _0xA5
          _0x81:
00036d 81ae      	LDD  R26,Y+6
00036e 81bf      	LDD  R27,Y+6+1
00036f 91ed      	LD   R30,X+
000370 83ae      	STD  Y+6,R26
000371 83bf      	STD  Y+6+1,R27
          _0xA5:
000372 93ea      	ST   -Y,R30
000373 d1fe      	RCALL SUBOPT_0x24
000374 3040      	CPI  R20,0
000375 f009      	BREQ _0x83
000376 5041      	SUBI R20,LOW(1)
          _0x83:
000377 5021      	SUBI R18,LOW(1)
000378 cfe9      	RJMP _0x7E
          _0x80:
000379 c049      	RJMP _0x84
          _0x7D:
          _0x86:
00037a e330      	LDI  R19,LOW(48)
00037b 81ee      	LDD  R30,Y+6
00037c 81ff      	LDD  R31,Y+6+1
00037d 9632      	ADIW R30,2
00037e 83ee      	STD  Y+6,R30
00037f 83ff      	STD  Y+6+1,R31
000380 9732      	SBIW R30,2
000381 d243      	RCALL __GETW1PF
000382 87e8      	STD  Y+8,R30
000383 87f9      	STD  Y+8+1,R31
000384 85aa                                            ldd  r26,y+10  ;R26,R27=n
000385 85bb                                            ldd  r27,y+11
                                            calc_digit:
000386 17ae                                            cp   r26,r30
000387 07bf                                            cpc  r27,r31
000388 f020                                            brlo calc_digit_done
000389 5f3f      	SUBI R19,-LOW(1)
00038a 1bae      	                                  sub  r26,r30
00038b 0bbf      	                                  sbc  r27,r31
00038c f7c9      	                                  brne calc_digit
                                            calc_digit_done:
00038d 87aa                                            std  Y+10,r26 ;n=R26,R27
00038e 87bb                                            std  y+11,r27
00038f e3e9      	LDI  R30,LOW(57)
000390 17e3      	CP   R30,R19
000391 f428      	BRSH _0x88
000392 ff13      	SBRS R17,3
000393 c002      	RJMP _0x89
000394 5f39      	SUBI R19,-LOW(7)
000395 c001      	RJMP _0x8A
          _0x89:
000396 5d39      	SUBI R19,-LOW(39)
          _0x8A:
          _0x88:
000397 fd14      	SBRC R17,4
000398 c01d      	RJMP _0x8C
000399 e3e0      	LDI  R30,LOW(48)
00039a 17e3      	CP   R30,R19
00039b f030      	BRLO _0x8E
00039c 85a8      	LDD  R26,Y+8
00039d 85b9      	LDD  R27,Y+8+1
00039e 30a1      	CPI  R26,LOW(0x1)
00039f e0e0      	LDI  R30,HIGH(0x1)
0003a0 07be      	CPC  R27,R30
0003a1 f411      	BRNE _0x8D
          _0x8E:
0003a2 6110      	ORI  R17,LOW(16)
0003a3 c00a      	RJMP _0x90
          _0x8D:
0003a4 1742      	CP   R20,R18
0003a5 f010      	BRLO _0x92
0003a6 ff10      	SBRS R17,0
0003a7 c001      	RJMP _0x93
          _0x92:
0003a8 c011      	RJMP _0x91
          _0x93:
0003a9 e230      	LDI  R19,LOW(32)
0003aa ff17      	SBRS R17,7
0003ab c00a      	RJMP _0x94
0003ac e330      	LDI  R19,LOW(48)
0003ad 6110      	ORI  R17,LOW(16)
          _0x90:
0003ae ff12      	SBRS R17,2
0003af c006      	RJMP _0x95
0003b0 7f1b      	ANDI R17,LOW(251)
0003b1 935a      	ST   -Y,R21
0003b2 d1bf      	RCALL SUBOPT_0x24
0003b3 3040      	CPI  R20,0
0003b4 f009      	BREQ _0x96
0003b5 5041      	SUBI R20,LOW(1)
          _0x96:
          _0x95:
          _0x94:
          _0x8C:
0003b6 d19e      	RCALL SUBOPT_0x1F
0003b7 3040      	CPI  R20,0
0003b8 f009      	BREQ _0x97
0003b9 5041      	SUBI R20,LOW(1)
          _0x97:
          _0x91:
0003ba 5021      	SUBI R18,LOW(1)
0003bb 85a8      	LDD  R26,Y+8
0003bc 85b9      	LDD  R27,Y+8+1
0003bd e0e1      	LDI  R30,LOW(1)
0003be e0f0      	LDI  R31,HIGH(1)
0003bf 17ea      	CP   R30,R26
0003c0 07fb      	CPC  R31,R27
0003c1 f408      	BRSH _0x87
0003c2 cfb7      	RJMP _0x86
          _0x87:
          _0x84:
0003c3 ff10      	SBRS R17,0
0003c4 c006      	RJMP _0x98
          _0x99:
0003c5 3040      	CPI  R20,0
0003c6 f021      	BREQ _0x9B
0003c7 5041      	SUBI R20,LOW(1)
0003c8 e2e0      	LDI  R30,LOW(32)
0003c9 d198      	RCALL SUBOPT_0x21
0003ca cffa      	RJMP _0x99
          _0x9B:
          _0x98:
          _0x9C:
          _0x5E:
0003cb e000      	LDI  R16,LOW(0)
          _0x49:
0003cc cef3      	RJMP _0x44
          _0x46:
0003cd d207      	RCALL __LOADLOCR6
0003ce 9662      	ADIW R28,18
0003cf 9508      	RET
          _sprintf:
0003d0 92ff      	PUSH R15
0003d1 2ef8      	MOV  R15,R24
0003d2 9722      	SBIW R28,2
0003d3 d1fe      	RCALL __SAVELOCR2
0003d4 01de      	MOVW R26,R28
0003d5 d1cb      	RCALL __ADDW2R15
0003d6   +  	__PUTW2R 16,17
0003d8 01de      	MOVW R26,R28
0003d9 9616      	ADIW R26,6
0003da d19c      	RCALL SUBOPT_0x25
0003db 83ea      	STD  Y+2,R30
0003dc 83fb      	STD  Y+2+1,R31
0003dd 01de      	MOVW R26,R28
0003de 9614      	ADIW R26,4
0003df d197      	RCALL SUBOPT_0x25
0003e0 93fa      	ST   -Y,R31
0003e1 93ea      	ST   -Y,R30
0003e2 931a      	ST   -Y,R17
0003e3 930a      	ST   -Y,R16
0003e4 01fe      	MOVW R30,R28
0003e5 9636      	ADIW R30,6
0003e6 93fa      	ST   -Y,R31
0003e7 93ea      	ST   -Y,R30
0003e8 ded4      	RCALL __print_G2
0003e9 81aa      	LDD  R26,Y+2
0003ea 81bb      	LDD  R27,Y+2+1
0003eb e0e0      	LDI  R30,LOW(0)
0003ec 93ec      	ST   X,R30
0003ed d1eb      	RCALL __LOADLOCR2
0003ee 9624      	ADIW R28,4
0003ef 90ff      	POP  R15
0003f0 9508      	RET
              .equ __lcd_direction=__lcd_port-1
              .equ __lcd_pin=__lcd_port-2
              .equ __lcd_rs=0
              .equ __lcd_rd=1
              .equ __lcd_enable=2
              .equ __lcd_busy_flag=7
         
          	.DSEG
          __base_y_G4:
00018b      	.BYTE 0x4
          __lcd_x:
00018f      	.BYTE 0x1
          __lcd_y:
000190      	.BYTE 0x1
          __lcd_maxx:
000191      	.BYTE 0x1
         
          	.CSEG
          __lcd_delay_G4:
0003f1 e0ff          ldi   r31,15
          __lcd_delay0:
0003f2 95fa          dec   r31
0003f3 f7f1          brne  __lcd_delay0
0003f4 9508      	RET
          __lcd_ready:
0003f5 b3a1          in    r26,__lcd_direction
0003f6 70af          andi  r26,0xf                 ;set as input
0003f7 bba1          out   __lcd_direction,r26
0003f8 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0003f9 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
          __lcd_busy:
0003fa dff6      	RCALL __lcd_delay_G4
0003fb 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0003fc dff4      	RCALL __lcd_delay_G4
0003fd b3a0          in    r26,__lcd_pin
0003fe 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0003ff dff1      	RCALL __lcd_delay_G4
000400 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000401 dfef      	RCALL __lcd_delay_G4
000402 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000403 fda7          sbrc  r26,__lcd_busy_flag
000404 cff5          rjmp  __lcd_busy
000405 9508      	RET
          __lcd_write_nibble_G4:
000406 7fa0          andi  r26,0xf0
000407 2bab          or    r26,r27
000408 bba2          out   __lcd_port,r26          ;write
000409 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00040a dfe6      	RCALL __lcd_delay_G4
00040b 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00040c dfe4      	RCALL __lcd_delay_G4
00040d 9508      	RET
          __lcd_write_data:
00040e 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00040f b3a1          in    r26,__lcd_direction
000410 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output    
000411 bba1          out   __lcd_direction,r26
000412 b3b2          in    r27,__lcd_port
000413 70bf          andi  r27,0xf
000414 81a8          ld    r26,y
000415 dff0      	RCALL __lcd_write_nibble_G4
000416 81a8          ld    r26,y
000417 95a2          swap  r26
000418 dfed      	RCALL __lcd_write_nibble_G4
000419 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00041a 9621      	ADIW R28,1
00041b 9508      	RET
          __lcd_read_nibble_G4:
00041c 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
00041d dfd3      	RCALL __lcd_delay_G4
00041e b3e0          in    r30,__lcd_pin           ;read
00041f 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000420 dfd0      	RCALL __lcd_delay_G4
000421 7fe0          andi  r30,0xf0
000422 9508      	RET
          _lcd_read_byte0_G4:
000423 dfcd      	RCALL __lcd_delay_G4
000424 dff7      	RCALL __lcd_read_nibble_G4
000425 2fae          mov   r26,r30
000426 dff5      	RCALL __lcd_read_nibble_G4
000427 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
000428 95e2          swap  r30
000429 2bea          or    r30,r26
00042a 9508      	RET
          _lcd_gotoxy:
00042b dfc9      	RCALL __lcd_ready
00042c 81e8      	LD   R30,Y
00042d e0f0      	LDI  R31,0
00042e 57e5      	SUBI R30,LOW(-__base_y_G4)
00042f 4ffe      	SBCI R31,HIGH(-__base_y_G4)
000430 81e0      	LD   R30,Z
000431 81a9      	LDD  R26,Y+1
000432 0fea      	ADD  R30,R26
000433 d146      	RCALL SUBOPT_0x26
000434 81e9      	LDD  R30,Y+1
000435 93e0 018f 	STS  __lcd_x,R30
000437 81e8      	LD   R30,Y
000438 93e0 0190 	STS  __lcd_y,R30
00043a 9622      	ADIW R28,2
00043b 9508      	RET
          _lcd_clear:
00043c dfb8      	RCALL __lcd_ready
00043d d09a      	RCALL SUBOPT_0x7
00043e dfcf      	RCALL __lcd_write_data
00043f dfb5      	RCALL __lcd_ready
000440 e0ec      	LDI  R30,LOW(12)
000441 d138      	RCALL SUBOPT_0x26
000442 dfb2      	RCALL __lcd_ready
000443 d091      	RCALL SUBOPT_0x6
000444 dfc9      	RCALL __lcd_write_data
000445 e0e0      	LDI  R30,LOW(0)
000446 93e0 0190 	STS  __lcd_y,R30
000448 93e0 018f 	STS  __lcd_x,R30
00044a 9508      	RET
          _lcd_putchar:
00044b 93ef          push r30
00044c 93ff          push r31
00044d 81a8          ld   r26,y
00044e 9468          set
00044f 30aa          cpi  r26,10
000450 f061          breq __lcd_putchar1
000451 94e8          clt
000452 91e0 018f 	LDS  R30,__lcd_x
000454 5fef      	SUBI R30,-LOW(1)
000455 93e0 018f 	STS  __lcd_x,R30
000457 91e0 0191 	LDS  R30,__lcd_maxx
000459 91a0 018f 	LDS  R26,__lcd_x
00045b 17ea      	CP   R30,R26
00045c f458      	BRSH _0x9E
          	__lcd_putchar1:
00045d 91e0 0190 	LDS  R30,__lcd_y
00045f 5fef      	SUBI R30,-LOW(1)
000460 93e0 0190 	STS  __lcd_y,R30
000462 d06c      	RCALL SUBOPT_0x4
000463 91e0 0190 	LDS  R30,__lcd_y
000465 93ea      	ST   -Y,R30
000466 dfc4      	RCALL _lcd_gotoxy
000467 f02e      	brts __lcd_putchar0
          _0x9E:
000468 df8c          rcall __lcd_ready
000469 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
00046a 81a8          ld   r26,y
00046b 93aa          st   -y,r26
00046c dfa1          rcall __lcd_write_data
          __lcd_putchar0:
00046d 91ff          pop  r31
00046e 91ef          pop  r30
00046f 9621      	ADIW R28,1
000470 9508      	RET
          _lcd_puts:
000471 81f9          ldd  r31,y+1
000472 81e8          ld   r30,y
          __lcd_puts0:
000473 91a1          ld   r26,z+
000474 23aa          tst  r26
000475 f019          breq __lcd_puts1
000476 93aa          st   -y,r26    
000477 dfd3          rcall _lcd_putchar
000478 cffa          rjmp __lcd_puts0
          __lcd_puts1:
000479 9622      	ADIW R28,2
00047a 9508      	RET
          _lcd_putsf:
00047b 81e8          ld   r30,y
00047c 81f9          ldd  r31,y+1
          __lcd_putsf0:
00047d 95c8      	lpm
00047e 2000          tst  r0
00047f f021          breq __lcd_putsf1
000480 9631          adiw r30,1
000481 920a          st   -y,r0
000482 dfc8          rcall _lcd_putchar
000483 cff9          rjmp __lcd_putsf0
          __lcd_putsf1:
000484 9622      	ADIW R28,2
000485 9508      	RET
          __long_delay_G4:
000486 27aa          clr   r26
000487 27bb          clr   r27
          __long_delay0:
000488 9711          sbiw  r26,1         ;2 cycles
000489 f7f1          brne  __long_delay0 ;2 cycles
00048a 9508      	RET
          __lcd_init_write_G4:
00048b 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00048c b3a1          in    r26,__lcd_direction
00048d 6fa7          ori   r26,0xf7                ;set as output
00048e bba1          out   __lcd_direction,r26
00048f b3b2          in    r27,__lcd_port
000490 70bf          andi  r27,0xf
000491 81a8          ld    r26,y
000492 df73      	RCALL __lcd_write_nibble_G4
000493 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000494 9621      	ADIW R28,1
000495 9508      	RET
          _lcd_init:
000496 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000497 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
000498 81e8      	LD   R30,Y
000499 93e0 0191 	STS  __lcd_maxx,R30
00049b 58e0      	SUBI R30,-LOW(128)
00049c   +  	__PUTB1MN __base_y_G4,2
00049e 81e8      	LD   R30,Y
00049f 54e0      	SUBI R30,-LOW(192)
0004a0   +  	__PUTB1MN __base_y_G4,3
0004a2 d0d9      	RCALL SUBOPT_0x27
0004a3 d0d8      	RCALL SUBOPT_0x27
0004a4 d0d7      	RCALL SUBOPT_0x27
0004a5 dfe0      	RCALL __long_delay_G4
0004a6 e2e0      	LDI  R30,LOW(32)
0004a7 93ea      	ST   -Y,R30
0004a8 dfe2      	RCALL __lcd_init_write_G4
0004a9 dfdc      	RCALL __long_delay_G4
0004aa e2e8      	LDI  R30,LOW(40)
0004ab d0ce      	RCALL SUBOPT_0x26
0004ac dfd9      	RCALL __long_delay_G4
0004ad e0e4      	LDI  R30,LOW(4)
0004ae d0cb      	RCALL SUBOPT_0x26
0004af dfd6      	RCALL __long_delay_G4
0004b0 e8e5      	LDI  R30,LOW(133)
0004b1 d0c8      	RCALL SUBOPT_0x26
0004b2 dfd3      	RCALL __long_delay_G4
0004b3 b3a1          in    r26,__lcd_direction
0004b4 70af          andi  r26,0xf                 ;set as input
0004b5 bba1          out   __lcd_direction,r26
0004b6 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0004b7 df6b      	RCALL _lcd_read_byte0_G4
0004b8 30e5      	CPI  R30,LOW(0x5)
0004b9 f011      	BREQ _0x9F
0004ba e0e0      	LDI  R30,LOW(0)
0004bb c005      	RJMP _0xA0
          _0x9F:
0004bc df38      	RCALL __lcd_ready
0004bd e0e6      	LDI  R30,LOW(6)
0004be d0bb      	RCALL SUBOPT_0x26
0004bf df7c      	RCALL _lcd_clear
0004c0 e0e1      	LDI  R30,LOW(1)
          _0xA0:
0004c1 9621      	ADIW R28,1
0004c2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x0:
0004c3 e0e0      	LDI  R30,LOW(0)
0004c4 bbe8      	OUT  0x18,R30
0004c5 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES
          SUBOPT_0x1:
0004c6 93fa      	ST   -Y,R31
0004c7 93ea      	ST   -Y,R30
0004c8 cfb2      	RJMP _lcd_putsf
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES
          SUBOPT_0x2:
0004c9 93fa      	ST   -Y,R31
0004ca 93ea      	ST   -Y,R30
0004cb c0c9      	RJMP _delay_ms
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES
          SUBOPT_0x3:
0004cc eee8      	LDI  R30,LOW(1000)
0004cd e0f3      	LDI  R31,HIGH(1000)
0004ce cffa      	RJMP SUBOPT_0x2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4:
0004cf e0e0      	LDI  R30,LOW(0)
0004d0 93ea      	ST   -Y,R30
0004d1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x5:
0004d2 dbdb      	RCALL _read_adc
0004d3 e0f0      	LDI  R31,0
0004d4 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x6:
0004d5 e0e1      	LDI  R30,LOW(1)
0004d6 93ea      	ST   -Y,R30
0004d7 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x7:
0004d8 e0e2      	LDI  R30,LOW(2)
0004d9 93ea      	ST   -Y,R30
0004da 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x8:
0004db e3e3      	LDI  R30,LOW(51)
0004dc e0f0      	LDI  R31,HIGH(51)
0004dd   +  	__PUTW1R 10,11
0004df 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x9:
0004e0 e2ef      	LDI  R30,LOW(47)
0004e1 e0f0      	LDI  R31,HIGH(47)
0004e2 15ea      	CP   R30,R10
0004e3 05fb      	CPC  R31,R11
0004e4 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xA:
0004e5 92aa      	ST   -Y,R10
0004e6 df64      	RCALL _lcd_putchar
0004e7 cfe4      	RJMP SUBOPT_0x3
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xB:
0004e8   +  	__GETW1R 10,11
0004ea 9731      	SBIW R30,1
0004eb   +  	__PUTW1R 10,11
0004ed 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xC:
0004ee   +  	__GETW1R 6,7
0004f0 0de4      	ADD  R30,R4
0004f1 1df5      	ADC  R31,R5
0004f2 0de8      	ADD  R30,R8
0004f3 1df9      	ADC  R31,R9
0004f4 01df      	MOVW R26,R30
0004f5 e0e3      	LDI  R30,LOW(3)
0004f6 e0f0      	LDI  R31,HIGH(3)
0004f7 d0b6      	RCALL __DIVW21U
0004f8 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0xD:
0004f9 e7ed      	LDI  R30,LOW(_temp)
0004fa e0f1      	LDI  R31,HIGH(_temp)
0004fb 93fa      	ST   -Y,R31
0004fc 93ea      	ST   -Y,R30
0004fd 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xE:
0004fe 93fa      	ST   -Y,R31
0004ff 93ea      	ST   -Y,R30
000500   +  	__GETW1R 4,5
000502 2766      	CLR  R22
000503 2777      	CLR  R23
000504 d0c4      	RCALL __PUTPARD1
000505   +  	__GETW1R 6,7
000507 2766      	CLR  R22
000508 2777      	CLR  R23
000509 d0bf      	RCALL __PUTPARD1
00050a   +  	__GETW1R 8,9
00050c 2766      	CLR  R22
00050d 2777      	CLR  R23
00050e d0ba      	RCALL __PUTPARD1
00050f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0xF:
000510 debf      	RCALL _sprintf
000511 9660      	ADIW R28,16
000512 cf29      	RJMP _lcd_clear
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x10:
000513 df5d      	RCALL _lcd_puts
000514 cfb7      	RJMP SUBOPT_0x3
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x11:
000515 ede0      	LDI  R30,LOW(2000)
000516 e0f7      	LDI  R31,HIGH(2000)
000517 cfb1      	RJMP SUBOPT_0x2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x12:
000518 0fee      	LSL  R30
000519 1fff      	ROL  R31
00051a 0fae      	ADD  R26,R30
00051b 1fbf      	ADC  R27,R31
00051c d0a4      	RCALL __GETW1P
00051d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x13:
00051e e8e7      	LDI  R30,LOW(_sens)
00051f e0f1      	LDI  R31,HIGH(_sens)
000520 93fa      	ST   -Y,R31
000521 93ea      	ST   -Y,R30
000522 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x14:
000523 27ff      	CLR  R31
000524 2766      	CLR  R22
000525 2777      	CLR  R23
000526 d0a2      	RCALL __PUTPARD1
000527 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x15:
000528 2dae      	MOV  R26,R14
000529 e5e7      	LDI  R30,LOW(87)
00052a d07e      	RCALL __EQB12
00052b 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x16:
00052c 91a0 017a 	LDS  R26,_y
00052e e4e2      	LDI  R30,LOW(66)
00052f d079      	RCALL __EQB12
000530 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x17:
000531 91a0 017b 	LDS  R26,_z
000533 e5e7      	LDI  R30,LOW(87)
000534 d074      	RCALL __EQB12
000535 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x18:
000536 2dae      	MOV  R26,R14
000537 e4e2      	LDI  R30,LOW(66)
000538 d070      	RCALL __EQB12
000539 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x19:
00053a 91a0 017a 	LDS  R26,_y
00053c e5e7      	LDI  R30,LOW(87)
00053d d06b      	RCALL __EQB12
00053e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x1A:
00053f 91a0 017b 	LDS  R26,_z
000541 e4e2      	LDI  R30,LOW(66)
000542 d066      	RCALL __EQB12
000543 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1B:
000544 91e0 0176 	LDS  R30,_m
000546 91f0 0177 	LDS  R31,_m+1
000548 9730      	SBIW R30,0
000549 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1C:
00054a 91e0 017c 	LDS  R30,_a
00054c 70e3      	ANDI R30,LOW(0x3)
00054d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1D:
00054e 81a8      	LD   R26,Y
00054f 81b9      	LDD  R27,Y+1
000550 d070      	RCALL __GETW1P
000551 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1E:
000552 9731      	SBIW R30,1
000553 91e4      	LPM  R30,Z
000554 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x1F:
000555 933a      	ST   -Y,R19
000556 85ed      	LDD  R30,Y+13
000557 85fe      	LDD  R31,Y+13+1
000558 93fa      	ST   -Y,R31
000559 93ea      	ST   -Y,R30
00055a cd52      	RJMP __put_G2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x20:
00055b 85ae      	LDD  R26,Y+14
00055c 85bf      	LDD  R27,Y+14+1
00055d 9714      	SBIW R26,4
00055e 87ae      	STD  Y+14,R26
00055f 87bf      	STD  Y+14+1,R27
000560 9614      	ADIW R26,4
000561 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x21:
000562 93ea      	ST   -Y,R30
000563 85ed      	LDD  R30,Y+13
000564 85fe      	LDD  R31,Y+13+1
000565 93fa      	ST   -Y,R31
000566 93ea      	ST   -Y,R30
000567 cd45      	RJMP __put_G2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x22:
000568 d058      	RCALL __GETW1P
000569 83ee      	STD  Y+6,R30
00056a 83ff      	STD  Y+6+1,R31
00056b 93fa      	ST   -Y,R31
00056c 93ea      	ST   -Y,R30
00056d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x23:
00056e d052      	RCALL __GETW1P
00056f 87ea      	STD  Y+10,R30
000570 87fb      	STD  Y+10+1,R31
000571 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x24:
000572 85ed      	LDD  R30,Y+13
000573 85fe      	LDD  R31,Y+13+1
000574 93fa      	ST   -Y,R31
000575 93ea      	ST   -Y,R30
000576 cd36      	RJMP __put_G2
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x25:
000577 d029      	RCALL __ADDW2R15
000578 d048      	RCALL __GETW1P
000579 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0x26:
00057a 93ea      	ST   -Y,R30
00057b ce92      	RJMP __lcd_write_data
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x27:
00057c df09      	RCALL __long_delay_G4
00057d e3e0      	LDI  R30,LOW(48)
00057e 93ea      	ST   -Y,R30
00057f cf0b      	RJMP __lcd_init_write_G4
         
          _strlen:
000580 91a9      	ld   r26,y+
000581 91b9      	ld   r27,y+
000582 27ee      	clr  r30
000583 27ff      	clr  r31
          __strlen0:
000584 916d      	ld   r22,x+
000585 2366      	tst  r22
000586 f011      	breq __strlen1
000587 9631      	adiw r30,1
000588 cffb      	rjmp __strlen0
          __strlen1:
000589 9508      	ret
         
          _strlenf:
00058a 27aa      	clr  r26
00058b 27bb      	clr  r27
00058c 91e9      	ld   r30,y+
00058d 91f9      	ld   r31,y+
          __strlenf0:
00058e 9005      	lpm  r0,z+
00058f 2000      	tst  r0
000590 f011      	breq __strlenf1
000591 9611      	adiw r26,1
000592 cffb      	rjmp __strlenf0
          __strlenf1:
000593 01fd      	movw r30,r26
000594 9508      	ret
         
          _delay_ms:
000595 91e9      	ld   r30,y+
000596 91f9      	ld   r31,y+
000597 9630      	adiw r30,0
000598 f039      	breq __delay_ms1
          __delay_ms0:
000599   +  	__DELAY_USW 0x7D0
00059d 95a8      	wdr
00059e 9731      	sbiw r30,1
00059f f7c9      	brne __delay_ms0
          __delay_ms1:
0005a0 9508      	ret
         
          __ADDW2R15:
0005a1 2400      	CLR  R0
0005a2 0daf      	ADD  R26,R15
0005a3 1db0      	ADC  R27,R0
0005a4 9508      	RET
         
          __ANEGW1:
0005a5 95e0      	COM  R30
0005a6 95f0      	COM  R31
0005a7 9631      	ADIW R30,1
0005a8 9508      	RET
         
          __EQB12:
0005a9 17ea      	CP   R30,R26
0005aa e0e1      	LDI  R30,1
0005ab f009      	BREQ __EQB12T
0005ac 27ee      	CLR  R30
          __EQB12T:
0005ad 9508      	RET
         
          __DIVW21U:
0005ae 2400      	CLR  R0
0005af 2411      	CLR  R1
0005b0 e190      	LDI  R25,16
          __DIVW21U1:
0005b1 0faa      	LSL  R26
0005b2 1fbb      	ROL  R27
0005b3 1c00      	ROL  R0
0005b4 1c11      	ROL  R1
0005b5 1a0e      	SUB  R0,R30
0005b6 0a1f      	SBC  R1,R31
0005b7 f418      	BRCC __DIVW21U2
0005b8 0e0e      	ADD  R0,R30
0005b9 1e1f      	ADC  R1,R31
0005ba c001      	RJMP __DIVW21U3
          __DIVW21U2:
0005bb 60a1      	SBR  R26,1
          __DIVW21U3:
0005bc 959a      	DEC  R25
0005bd f799      	BRNE __DIVW21U1
0005be 01fd      	MOVW R30,R26
0005bf 01d0      	MOVW R26,R0
0005c0 9508      	RET
         
          __GETW1P:
0005c1 91ed      	LD   R30,X+
0005c2 91fc      	LD   R31,X
0005c3 9711      	SBIW R26,1
0005c4 9508      	RET
         
          __GETW1PF:
0005c5 9005      	LPM  R0,Z+
0005c6 91f4      	LPM  R31,Z
0005c7 2de0      	MOV  R30,R0
0005c8 9508      	RET
         
          __PUTPARD1:
0005c9 937a      	ST   -Y,R23
0005ca 936a      	ST   -Y,R22
0005cb 93fa      	ST   -Y,R31
0005cc 93ea      	ST   -Y,R30
0005cd 9508      	RET
         
          __SAVELOCR6:
0005ce 935a      	ST   -Y,R21
          __SAVELOCR5:
0005cf 934a      	ST   -Y,R20
          __SAVELOCR4:
0005d0 933a      	ST   -Y,R19
          __SAVELOCR3:
0005d1 932a      	ST   -Y,R18
          __SAVELOCR2:
0005d2 931a      	ST   -Y,R17
0005d3 930a      	ST   -Y,R16
0005d4 9508      	RET
         
          __LOADLOCR6:
0005d5 815d      	LDD  R21,Y+5
          __LOADLOCR5:
0005d6 814c      	LDD  R20,Y+4
          __LOADLOCR4:
0005d7 813b      	LDD  R19,Y+3
          __LOADLOCR3:
0005d8 812a      	LDD  R18,Y+2
          __LOADLOCR2:
0005d9 8119      	LDD  R17,Y+1
0005da 8108      	LD   R16,Y
0005db 9508      	RET
         
         ;END OF CODE MARKER
          __END_OF_CODE:

Assembly complete with no errors.
