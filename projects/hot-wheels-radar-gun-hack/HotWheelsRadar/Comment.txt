Later commentary, in response to a question on the forum:

As for the mod: In the original there's an LCD which is just the glass, with the ATmega88 providing all the timing, etc. It needs 4 lines for the backplanes, and 8 for the segments, for a total of 12. Unfortunately the RxD and TxD are two of the 8. The ISP lines (MOSI, MISO, and SCLK) are three of the 4 backplane lines. All 4 have resistor networks attached to them so they can generate V/2, but this does not interfere with the ISP programming.

There is an ADC used to test the battery level which goes to an ADC which shares a general I/O pin. Meanwhile, there are 2 ADCs which are unused, and these are not general I/O pins. Finally, there is an "unused" pin which goes to a test point (pad) which has a resistor to ground.

In my original mod (which is what the software is written for), I removed the test point's resistor to ground, thereby freeing up one I/O pin. I moved the battery's ADC line to an unused ADC, thereby freeing up another I/O pin. I then moved the LCD lines that were on RxD and TxD to these two pins, thus freeing up the USART. It was tedious, nasty, and a pain to do these changes since I don't usually spend my spare time writing Genesis on a grain of rice.

The epiphany I had later was that a standard LCD (HD44780 in its various configurations) needs 7 pins when operating in 4 bit mode. When you remove the radar gun's LCD glass, there's a nice row of pads easily accessible. Two of those pads are the RxD and TxD lines, free and clear. Six of those pads are the other LCD data lines, and they are also free and clear. Four of the pads are the backplane leads, but they have the resistor networks attached to them.

But, if you remove the resistor to ground on the test point (easily done), you get your 7th line for the HD44780. The pads can be reached with normal sized fingers and soldering irons, and there is no trace cutting or resultant kicking the dog.

Then to my code: you throw out the interrupt handler (no need to generate those bizarre LCD waveforms) and its initialization code, change the command language a little, and rewrite the LCD output routine, and kazoom! You have a 16x2 (or whatever) output instead of 4 characters. Of course you'll probably have to spell out "battery low" instead of showing a broken battery symbol, but hey, be flexible.

Implementation is left as an exercise for the student.