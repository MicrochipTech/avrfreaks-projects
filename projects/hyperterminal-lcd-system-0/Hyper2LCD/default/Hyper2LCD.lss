
Hyper2LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e7  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000764  00000000  00000000  000004a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000385  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000068e  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ec  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fa  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  7a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <InitUART>:
// -----------------INITIALIZE USART--------------------------------------- 
void InitUART( unsigned int BaudRate) 


{ 
	UBRRH=0x00; 
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BaudRate; /* Set the baud rate */ 
  84:	89 b9       	out	0x09, r24	; 9
	UCSRB = 0b00011000; // enable transmitter and reciever 
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110; // 8 bit data, no parity bit, 1 stop bit. 
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
} 
  8e:	08 95       	ret

00000090 <ReceiveByte>:
//------------FUNCTIONS TO READ USART------------------------------- 
unsigned char ReceiveByte( void ) 
{
	unsigned char data; 
	//lcd_puts("function");
	while ( (UCSRA & 0x80) == 0x00 ) 
  90:	5f 9b       	sbis	0x0b, 7	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <ReceiveByte>
		{;} /* Wait for incomming data */ 
	data=UDR;
  94:	8c b1       	in	r24, 0x0c	; 12
	
	return data;/* Return the data */ 
} 
  96:	08 95       	ret

00000098 <TransmitByte>:
//------------FUNCTIONS TO WRITE USART----- 
void TransmitByte( unsigned char data ) 
{ 
	while ( (UCSRA & 0x20) == 0x00) 
  98:	5d 9b       	sbis	0x0b, 5	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <TransmitByte>
		{;} /* Wait for empty transmit buffer */ 
	UDR = data; /* Start transmittion */ 
  9c:	8c b9       	out	0x0c, r24	; 12
} 
  9e:	08 95       	ret

000000a0 <main>:
unsigned char ReceiveByte( void ); 
void TransmitByte( unsigned char data ); 


int main(void) 
{ 
  a0:	9f 92       	push	r9
  a2:	af 92       	push	r10
  a4:	bf 92       	push	r11
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	unsigned char a; 
	unsigned int i,j; 
	DDRD=0X0F; // txd and rxd pins are present 
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	81 bb       	out	0x11, r24	; 17
	DDRC=0x01;// leds for debugging 
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	14 bb       	out	0x14, r17	; 20
// -----------------INITIALIZE USART--------------------------------------- 
void InitUART( unsigned int BaudRate) 


{ 
	UBRRH=0x00; 
  be:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)BaudRate; /* Set the baud rate */ 
  c0:	89 e1       	ldi	r24, 0x19	; 25
  c2:	89 b9       	out	0x09, r24	; 9
	UCSRB = 0b00011000; // enable transmitter and reciever 
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110; // 8 bit data, no parity bit, 1 stop bit. 
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	80 bd       	out	0x20, r24	; 32
	unsigned int i,j; 
	DDRD=0X0F; // txd and rxd pins are present 
	DDRC=0x01;// leds for debugging 
	InitUART( 25 ); // 2400 bps @ 1MHz hence value of UBBR=25 . refer datasheet 

	lcd_init(LCD_DISP_ON); /* initialize display, cursor off */ 
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_init>

	lcd_clrscr();
  d2:	0e 94 13 01 	call	0x226	; 0x226 <lcd_clrscr>
        
        /* put string to display (line 1) with linefeed */
	//lcd_gotoxy(10,1);
    lcd_puts("RS232");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 30 01 	call	0x260	; 0x260 <lcd_puts>
	PORTC=0x01;
  de:	15 bb       	out	0x15, r17	; 21
  e0:	88 e8       	ldi	r24, 0x88	; 136
  e2:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e4:	29 e1       	ldi	r18, 0x19	; 25
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f0:	d9 f7       	brne	.-10     	; 0xe8 <main+0x48>
	_delay_ms(500);
	lcd_clrscr();
  f2:	0e 94 13 01 	call	0x226	; 0x226 <lcd_clrscr>
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	24 ec       	ldi	r18, 0xC4	; 196
  fc:	a2 2e       	mov	r10, r18
  fe:	29 e0       	ldi	r18, 0x09	; 9
 100:	b2 2e       	mov	r11, r18
			  		lcd_gotoxy(j,i); // goes to specified position 
			
					lcd_putc(a); // display the character 
			
					_delay_ms(50);// delay imp so that value can be displayed on lcd 
					PORTC=0X01; // led on after display 
 102:	94 ed       	ldi	r25, 0xD4	; 212
 104:	c9 2e       	mov	r12, r25
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	d9 2e       	mov	r13, r25
 10a:	99 24       	eor	r9, r9
 10c:	93 94       	inc	r9
 10e:	80 e5       	ldi	r24, 0x50	; 80
 110:	e8 2e       	mov	r14, r24
 112:	83 ec       	ldi	r24, 0xC3	; 195
 114:	f8 2e       	mov	r15, r24
 116:	21 c0       	rjmp	.+66     	; 0x15a <main+0xba>
//------------FUNCTIONS TO READ USART------------------------------- 
unsigned char ReceiveByte( void ) 
{
	unsigned char data; 
	//lcd_puts("function");
	while ( (UCSRA & 0x80) == 0x00 ) 
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <main+0x78>
		{;} /* Wait for incomming data */ 
	data=UDR;
 11c:	0c b1       	in	r16, 0x0c	; 12
 11e:	c5 01       	movw	r24, r10
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x80>
				{ 
				
					a=ReceiveByte(); // recieves data from hyperterminal 
			
					_delay_ms(10); 
			  		lcd_gotoxy(j,i); // goes to specified position 
 124:	81 2f       	mov	r24, r17
 126:	6c 2f       	mov	r22, r28
 128:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
			
					lcd_putc(a); // display the character 
 12c:	80 2f       	mov	r24, r16
 12e:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_putc>
 132:	c6 01       	movw	r24, r12
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x94>
			
					_delay_ms(50);// delay imp so that value can be displayed on lcd 
					PORTC=0X01; // led on after display 
 138:	95 ba       	out	0x15, r9	; 21
	return data;/* Return the data */ 
} 
//------------FUNCTIONS TO WRITE USART----- 
void TransmitByte( unsigned char data ) 
{ 
	while ( (UCSRA & 0x20) == 0x00) 
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x9a>
		{;} /* Wait for empty transmit buffer */ 
	UDR = data; /* Start transmittion */ 
 13e:	0c b9       	out	0x0c, r16	; 12
 140:	c7 01       	movw	r24, r14
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0xa2>
			
					_delay_ms(50);// delay imp so that value can be displayed on lcd 
					PORTC=0X01; // led on after display 
					TransmitByte(a); // transit it back to hyperterminal 
					_delay_ms(200); 
					PORTC=0X00; 
 146:	15 ba       	out	0x15, r1	; 21
 148:	1f 5f       	subi	r17, 0xFF	; 255
	for (;;) /* loop forever */ 
	{ 
	
		for(i=0;i<2;i++) // 2 lines of lcd 
		{ 
			for(j=0;j<16;j++) // 16 characters in each line 
 14a:	10 31       	cpi	r17, 0x10	; 16
 14c:	29 f7       	brne	.-54     	; 0x118 <main+0x78>

	
	for (;;) /* loop forever */ 
	{ 
	
		for(i=0;i<2;i++) // 2 lines of lcd 
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	c2 30       	cpi	r28, 0x02	; 2
 152:	d1 05       	cpc	r29, r1
 154:	10 f0       	brcs	.+4      	; 0x15a <main+0xba>
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	dd cf       	rjmp	.-70     	; 0x118 <main+0x78>

0000015e <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 15e:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 160:	66 23       	and	r22, r22
 162:	11 f0       	breq	.+4      	; 0x168 <lcd_write+0xa>
       lcd_rs_high();
 164:	dc 9a       	sbi	0x1b, 4	; 27
 166:	01 c0       	rjmp	.+2      	; 0x16a <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 168:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
 16a:	dd 98       	cbi	0x1b, 5	; 27

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 16c:	8a b3       	in	r24, 0x1a	; 26
 16e:	8f 60       	ori	r24, 0x0F	; 15
 170:	8a bb       	out	0x1a, r24	; 26

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 172:	9b b3       	in	r25, 0x1b	; 27
 174:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 176:	82 2f       	mov	r24, r18
 178:	82 95       	swap	r24
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	89 2b       	or	r24, r25
 17e:	8b bb       	out	0x1b, r24	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 180:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_write+0x26>
    lcd_e_low();
 184:	de 98       	cbi	0x1b, 6	; 27
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 186:	2f 70       	andi	r18, 0x0F	; 15
 188:	29 2b       	or	r18, r25
 18a:	2b bb       	out	0x1b, r18	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 18c:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_write+0x32>
    lcd_e_low();
 190:	de 98       	cbi	0x1b, 6	; 27
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 192:	9f 60       	ori	r25, 0x0F	; 15
 194:	9b bb       	out	0x1b, r25	; 27
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 196:	08 95       	ret

00000198 <lcd_waitbusy>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 198:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
 19a:	dd 9a       	sbi	0x1b, 5	; 27
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 19c:	8a b3       	in	r24, 0x1a	; 26
 19e:	80 7f       	andi	r24, 0xF0	; 240
 1a0:	8a bb       	out	0x1a, r24	; 26
        
        lcd_e_high();
 1a2:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();        
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_waitbusy+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 1a6:	89 b3       	in	r24, 0x19	; 25
        lcd_e_low();
 1a8:	de 98       	cbi	0x1b, 6	; 27
        
        lcd_e_delay();                       /* Enable 500ns low       */
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_waitbusy+0x14>
        
        lcd_e_high();
 1ac:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_waitbusy+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 1b0:	99 b3       	in	r25, 0x19	; 25
        lcd_e_low();
 1b2:	de 98       	cbi	0x1b, 6	; 27

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 1b4:	83 fd       	sbrc	r24, 3
 1b6:	f0 cf       	rjmp	.-32     	; 0x198 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_waitbusy+0x24>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 1c0:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
 1c2:	dd 9a       	sbi	0x1b, 5	; 27
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 1c4:	8a b3       	in	r24, 0x1a	; 26
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	8a bb       	out	0x1a, r24	; 26
        
        lcd_e_high();
 1ca:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();        
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_waitbusy+0x36>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 1ce:	99 b3       	in	r25, 0x19	; 25
        lcd_e_low();
 1d0:	de 98       	cbi	0x1b, 6	; 27
        
        lcd_e_delay();                       /* Enable 500ns low       */
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_waitbusy+0x3c>
        
        lcd_e_high();
 1d4:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_waitbusy+0x40>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 1d8:	89 b3       	in	r24, 0x19	; 25
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	92 95       	swap	r25
 1de:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
 1e0:	de 98       	cbi	0x1b, 6	; 27
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
 1e2:	89 2b       	or	r24, r25
 1e4:	08 95       	ret

000001e6 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 1e6:	1f 93       	push	r17
 1e8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1ea:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_waitbusy>
    lcd_write(cmd,0);
 1ee:	81 2f       	mov	r24, r17
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_write>
}
 1f6:	1f 91       	pop	r17
 1f8:	08 95       	ret

000001fa <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 1fa:	1f 93       	push	r17
 1fc:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 1fe:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_waitbusy>
    lcd_write(data,1);
 202:	81 2f       	mov	r24, r17
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_write>
}
 20a:	1f 91       	pop	r17
 20c:	08 95       	ret

0000020e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 20e:	66 23       	and	r22, r22
 210:	11 f4       	brne	.+4      	; 0x216 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 212:	80 58       	subi	r24, 0x80	; 128
 214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 216:	80 54       	subi	r24, 0x40	; 64
 218:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
 21c:	08 95       	ret

0000021e <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 21e:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_waitbusy>
}
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret

00000226 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
}
 22c:	08 95       	ret

0000022e <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
}
 234:	08 95       	ret

00000236 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 236:	1f 93       	push	r17
 238:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 23a:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_waitbusy>
    if (c=='\n')
 23e:	1a 30       	cpi	r17, 0x0A	; 10
 240:	49 f4       	brne	.+18     	; 0x254 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 242:	80 34       	cpi	r24, 0x40	; 64
 244:	10 f0       	brcs	.+4      	; 0x24a <lcd_putc+0x14>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	01 c0       	rjmp	.+2      	; 0x24c <lcd_putc+0x16>
 24a:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 24c:	80 58       	subi	r24, 0x80	; 128
 24e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
 252:	04 c0       	rjmp	.+8      	; 0x25c <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 254:	81 2f       	mov	r24, r17
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_write>
    }

}/* lcd_putc */
 25c:	1f 91       	pop	r17
 25e:	08 95       	ret

00000260 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
 266:	02 c0       	rjmp	.+4      	; 0x26c <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 268:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 26c:	89 91       	ld	r24, Y+
 26e:	88 23       	and	r24, r24
 270:	d9 f7       	brne	.-10     	; 0x268 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	02 c0       	rjmp	.+4      	; 0x284 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 280:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_putc>
 284:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	84 91       	lpm	r24, Z+
 28a:	88 23       	and	r24, r24
 28c:	c9 f7       	brne	.-14     	; 0x280 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 294:	1f 93       	push	r17
 296:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 298:	8a b3       	in	r24, 0x1a	; 26
 29a:	8f 67       	ori	r24, 0x7F	; 127
 29c:	8a bb       	out	0x1a, r24	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	9e e3       	ldi	r25, 0x3E	; 62
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2a6:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2a8:	d8 9a       	sbi	0x1b, 0	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2aa:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcd_init+0x1a>
    lcd_e_low();
 2ae:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	93 e1       	ldi	r25, 0x13	; 19
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x20>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2b8:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_init+0x28>
    lcd_e_low();
 2bc:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2be:	80 e4       	ldi	r24, 0x40	; 64
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x30>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2c8:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_init+0x38>
    lcd_e_low();
 2cc:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ce:	fc 01       	movw	r30, r24
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2d4:	d8 98       	cbi	0x1b, 0	; 27

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2d6:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <lcd_init+0x46>
    lcd_e_low();
 2da:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_init+0x48>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2e6:	88 e0       	ldi	r24, 0x08	; 8
 2e8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2ec:	0e 94 13 01 	call	0x226	; 0x226 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2f6:	81 2f       	mov	r24, r17
 2f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_command>

}/* lcd_init */
 2fc:	1f 91       	pop	r17
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
