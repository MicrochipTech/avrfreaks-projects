
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000350  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000072c  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000083  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f4  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f6  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002df  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a8  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c9  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cf  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2b c0       	rjmp	.+86     	; 0x58 <__ctors_end>
   2:	3b c0       	rjmp	.+118    	; 0x7a <__bad_interrupt>
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	39 c0       	rjmp	.+114    	; 0x7a <__bad_interrupt>
   8:	c1 c0       	rjmp	.+386    	; 0x18c <__vector_4>
   a:	37 c0       	rjmp	.+110    	; 0x7a <__bad_interrupt>
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	35 c0       	rjmp	.+106    	; 0x7a <__bad_interrupt>
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	33 c0       	rjmp	.+102    	; 0x7a <__bad_interrupt>
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	31 c0       	rjmp	.+98     	; 0x7a <__bad_interrupt>
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	2f c0       	rjmp	.+94     	; 0x7a <__bad_interrupt>
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	2d c0       	rjmp	.+90     	; 0x7a <__bad_interrupt>
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	2b c0       	rjmp	.+86     	; 0x7a <__bad_interrupt>
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>

00000026 <symbol_t>:
  26:	7d 60 3e 7a 63 5b 5f 70 7f 7b 77 4f 0e 6e 1f 17     }`>zc[_p.{wO.n..
  36:	00 77 4f 0e 6e 1f 17 7b 67 40 6c 57 0d 56 46 4e     .wO.n..{g@lW.VFN
  46:	37 73 06 5b 0f 6d 4c 4c 67 6a 3e 1d 45 78 10 08     7s.[.mLLgj>.Ex..
  56:	01 02                                               ..

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf ed       	ldi	r28, 0xDF	; 223
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	02 d0       	rcall	.+4      	; 0x7c <main>
  78:	69 c1       	rjmp	.+722    	; 0x34c <_exit>

0000007a <__bad_interrupt>:
  7a:	97 c0       	rjmp	.+302    	; 0x1aa <__vector_default>

0000007c <main>:
#include "main.h"
#include "upd7225.h"	//LCD


int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29

	//inicjalizacja timera (wymagane przy sterowaniu CL1) 
	TCCR1B |= (1 << WGM12); 	// Ustawia timer w tryb CTC
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 100; 				// Ustawia wartość pożądaną na xxx
  86:	84 e6       	ldi	r24, 0x64	; 100
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10));	// Ustawia timer z preskalerem FCPU/1
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	81 60       	ori	r24, 0x01	; 1
  92:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A); 	// Zezwolenie na przerwania dla CTC
  94:	89 b7       	in	r24, 0x39	; 57
  96:	80 64       	ori	r24, 0x40	; 64
  98:	89 bf       	out	0x39, r24	; 57
	
	sei(); 						// Zezwolenie globalne na przerwania
  9a:	78 94       	sei
	
	InitLcd();					// Inicjalizacja LCD
  9c:	24 d1       	rcall	.+584    	; 0x2e6 <InitLcd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	c4 e6       	ldi	r28, 0x64	; 100
  a0:	d0 e0       	ldi	r29, 0x00	; 0
		

	while(1)
	{
		LcdCommand(CLEAR_MEM);
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	d6 d0       	rcall	.+428    	; 0x252 <LcdCommand>
		SetDataPointer(0);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	b5 d0       	rcall	.+362    	; 0x214 <SetDataPointer>
		write_text("[SHARP LH5000TR]");
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	f1 d0       	rcall	.+482    	; 0x292 <write_text>
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	97 e2       	ldi	r25, 0x27	; 39
  b4:	fe 01       	movw	r30, r28
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  bc:	d9 f7       	brne	.-10     	; 0xb4 <main+0x38>
		_delay_ms(1000);

		LcdCommand(CLEAR_MEM);
  be:	80 e2       	ldi	r24, 0x20	; 32
  c0:	c8 d0       	rcall	.+400    	; 0x252 <LcdCommand>
		write_text("-10.2345678901017");
  c2:	81 e7       	ldi	r24, 0x71	; 113
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	e5 d0       	rcall	.+458    	; 0x292 <write_text>
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	fe 01       	movw	r30, r28
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x50>
		_delay_ms(1000);
		
		LcdCommand(CLEAR_MEM);
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	bc d0       	rcall	.+376    	; 0x252 <LcdCommand>
		write_text("PAUSE PLAY STOP");
  da:	83 e8       	ldi	r24, 0x83	; 131
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	d9 d0       	rcall	.+434    	; 0x292 <write_text>
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	97 e2       	ldi	r25, 0x27	; 39
  e4:	fe 01       	movw	r30, r28
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <__stack+0x7>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__stack+0x5>
		_delay_ms(1000);
	
		LcdCommand(CLEAR_MEM);
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	b0 d0       	rcall	.+352    	; 0x252 <LcdCommand>
		write_text("-  PANCIO.NET  -");
  f2:	83 e9       	ldi	r24, 0x93	; 147
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	cd d0       	rcall	.+410    	; 0x292 <write_text>
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	97 e2       	ldi	r25, 0x27	; 39
  fc:	fe 01       	movw	r30, r28
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <__stack+0x1f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <__stack+0x1d>
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	97 e2       	ldi	r25, 0x27	; 39
 10a:	fe 01       	movw	r30, r28
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <__stack+0x2d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <__stack+0x2b>
 114:	80 e1       	ldi	r24, 0x10	; 16
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	fe 01       	movw	r30, r28
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <__stack+0x3b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <__stack+0x39>
		_delay_ms(1000);
		_delay_ms(1000);
		_delay_ms(1000);
		
		LcdCommand(CLEAR_MEM);
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	96 d0       	rcall	.+300    	; 0x252 <LcdCommand>
		write_text("- NETINSTAL.PL -");
 126:	84 ea       	ldi	r24, 0xA4	; 164
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	b3 d0       	rcall	.+358    	; 0x292 <write_text>
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	97 e2       	ldi	r25, 0x27	; 39
 130:	fe 01       	movw	r30, r28
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <__stack+0x53>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 136:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 138:	d9 f7       	brne	.-10     	; 0x130 <__stack+0x51>
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	97 e2       	ldi	r25, 0x27	; 39
 13e:	fe 01       	movw	r30, r28
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <__stack+0x61>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <__stack+0x5f>
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	97 e2       	ldi	r25, 0x27	; 39
 14c:	fe 01       	movw	r30, r28
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <__stack+0x6f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 154:	d9 f7       	brne	.-10     	; 0x14c <__stack+0x6d>
		_delay_ms(1000);
		_delay_ms(1000);
		_delay_ms(1000);

		LcdCommand(CLEAR_MEM);
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	7c d0       	rcall	.+248    	; 0x252 <LcdCommand>
		write_text("    [C] 2011    ");
 15a:	85 eb       	ldi	r24, 0xB5	; 181
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	99 d0       	rcall	.+306    	; 0x292 <write_text>
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	97 e2       	ldi	r25, 0x27	; 39
 164:	fe 01       	movw	r30, r28
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <__stack+0x87>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <__stack+0x85>
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	97 e2       	ldi	r25, 0x27	; 39
 172:	fe 01       	movw	r30, r28
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <__stack+0x95>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 178:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	d9 f7       	brne	.-10     	; 0x172 <__stack+0x93>
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	97 e2       	ldi	r25, 0x27	; 39
 180:	fe 01       	movw	r30, r28
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <__stack+0xa3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <__stack+0xa1>
 18a:	8b cf       	rjmp	.-234    	; 0xa2 <main+0x26>

0000018c <__vector_4>:
	0x02	//-	$61
};

//przrwanie
ISR(TIMER1_COMPA_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
	FLP_LCD_CL1; 
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	80 58       	subi	r24, 0x80	; 128
 19c:	88 bb       	out	0x18, r24	; 24
}
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_default>:

ISR(BADISR_vect){};
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <SIout>:

void SIout(char data) 					// Wysylanie bajtu danych przez SI
{
 1be:	58 2f       	mov	r21, r24
char c;

	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj dopoki wyswietlacz zajety
 1c0:	b5 9b       	sbis	0x16, 5	; 22
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <SIout+0x2>
 1c4:	8a ef       	ldi	r24, 0xFA	; 250
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <SIout+0xa>
 1cc:	90 e8       	ldi	r25, 0x80	; 128
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d2:	4d e0       	ldi	r20, 0x0D	; 13
	_delay_us(250);
    for(c = 0x80; c > 0; c >>= 1) 		// wyslij wszystkie bity poczawszy od MSB
    {
		CLR_LCD_SCK;					// LOW -> /SCK
 1d4:	c2 98       	cbi	0x18, 2	; 24
		if(data & c) 					
 1d6:	89 2f       	mov	r24, r25
 1d8:	85 23       	and	r24, r21
 1da:	11 f0       	breq	.+4      	; 0x1e0 <SIout+0x22>
		{
			SET_LCD_SI;					// HIGH -> SI 
 1dc:	c1 9a       	sbi	0x18, 1	; 24
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <SIout+0x24>
		}
		else 							
		{
			CLR_LCD_SI;					// LOW -> SI
 1e0:	c1 98       	cbi	0x18, 1	; 24
 1e2:	84 2f       	mov	r24, r20
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <SIout+0x26>
		}
		_delay_us(10); 
		SET_LCD_SCK;					// HIGH -> /SCK
 1e8:	c2 9a       	sbi	0x18, 2	; 24
 1ea:	84 2f       	mov	r24, r20
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <SIout+0x2e>
{
char c;

	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj dopoki wyswietlacz zajety
	_delay_us(250);
    for(c = 0x80; c > 0; c >>= 1) 		// wyslij wszystkie bity poczawszy od MSB
 1f0:	96 95       	lsr	r25
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	28 30       	cpi	r18, 0x08	; 8
 1f8:	31 05       	cpc	r19, r1
 1fa:	61 f7       	brne	.-40     	; 0x1d4 <SIout+0x16>
		}
		_delay_us(10); 
		SET_LCD_SCK;					// HIGH -> /SCK
		_delay_us(10); 
	}
}//SIout
 1fc:	08 95       	ret

000001fe <Startx>:

void Startx(char mode) 					// Ustawienie trybu transmisji (Command - /Data)
{
	CLR_LCD_CS;							// HIGH -> /CS  - podlacz kontroler LCD
 1fe:	c0 98       	cbi	0x18, 0	; 24
    if(mode) 							// jesli mode > 0 - tryb command
 200:	88 23       	and	r24, r24
 202:	11 f0       	breq	.+4      	; 0x208 <Startx+0xa>
    {
		SET_LCD_CD;						// HIGH -> C-/D - tryb komend
 204:	c4 9a       	sbi	0x18, 4	; 24
 206:	08 95       	ret
	}
    else
    {
		CLR_LCD_CD;						// LOW -> C-/D - tryb danych
 208:	c4 98       	cbi	0x18, 4	; 24
 20a:	08 95       	ret

0000020c <Stoptx>:
	}
}//Startx
 
void Stoptx() 							// Zakonczenie transmisji przez SI
{
	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj na gotowosc wyswietlacza
 20c:	b5 9b       	sbis	0x16, 5	; 22
 20e:	fe cf       	rjmp	.-4      	; 0x20c <Stoptx>

	SET_LCD_CS;							// HIGH -> /CS - zwolnij kontroler
 210:	c0 9a       	sbi	0x18, 0	; 24
}
 212:	08 95       	ret

00000214 <SetDataPointer>:

void SetDataPointer(char pos)			// ustawienie pozycji w pamieci wyswietlacza
{
 214:	1f 93       	push	r17
 216:	18 2f       	mov	r17, r24
    Startx(1); 							// tryb komend
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	f1 df       	rcall	.-30     	; 0x1fe <Startx>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21c:	8a ef       	ldi	r24, 0xFA	; 250
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <SetDataPointer+0xc>
    _delay_us(250);
    SIout(LOAD_DP | pos); 				// komenda LOAD_DP + pozycja
 224:	81 2f       	mov	r24, r17
 226:	80 6e       	ori	r24, 0xE0	; 224
 228:	ca df       	rcall	.-108    	; 0x1be <SIout>
	}
}//Startx
 
void Stoptx() 							// Zakonczenie transmisji przez SI
{
	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj na gotowosc wyswietlacza
 22a:	b5 9b       	sbis	0x16, 5	; 22
 22c:	fe cf       	rjmp	.-4      	; 0x22a <SetDataPointer+0x16>

	SET_LCD_CS;							// HIGH -> /CS - zwolnij kontroler
 22e:	c0 9a       	sbi	0x18, 0	; 24
{
    Startx(1); 							// tryb komend
    _delay_us(250);
    SIout(LOAD_DP | pos); 				// komenda LOAD_DP + pozycja
    Stoptx(); 							// zakoncz
}
 230:	1f 91       	pop	r17
 232:	08 95       	ret

00000234 <WriteData>:

void WriteData(char data) 				// zapisz dana do pamieci wyswietlacza  (i przesun pozycje)
{
 234:	1f 93       	push	r17
 236:	18 2f       	mov	r17, r24
    Startx(0);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	e1 df       	rcall	.-62     	; 0x1fe <Startx>
 23c:	8a ef       	ldi	r24, 0xFA	; 250
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <WriteData+0xc>
    _delay_us(250); 					// tryb danych
    SIout(data); 						// wyslij dana
 244:	81 2f       	mov	r24, r17
 246:	bb df       	rcall	.-138    	; 0x1be <SIout>
	}
}//Startx
 
void Stoptx() 							// Zakonczenie transmisji przez SI
{
	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj na gotowosc wyswietlacza
 248:	b5 9b       	sbis	0x16, 5	; 22
 24a:	fe cf       	rjmp	.-4      	; 0x248 <WriteData+0x14>

	SET_LCD_CS;							// HIGH -> /CS - zwolnij kontroler
 24c:	c0 9a       	sbi	0x18, 0	; 24
{
    Startx(0);
    _delay_us(250); 					// tryb danych
    SIout(data); 						// wyslij dana
    Stoptx(); 							// zakoncz
}
 24e:	1f 91       	pop	r17
 250:	08 95       	ret

00000252 <LcdCommand>:

//FUNKCJE DODATKOWE - czesciowe zapewnienie kompatybilnosci z HD44780

//wyslij komende do wyswietlacza
void LcdCommand(char comm)
{
 252:	1f 93       	push	r17
 254:	18 2f       	mov	r17, r24
	Startx(1);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	d2 df       	rcall	.-92     	; 0x1fe <Startx>
	SIout(comm);
 25a:	81 2f       	mov	r24, r17
 25c:	b0 df       	rcall	.-160    	; 0x1be <SIout>
	}
}//Startx
 
void Stoptx() 							// Zakonczenie transmisji przez SI
{
	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj na gotowosc wyswietlacza
 25e:	b5 9b       	sbis	0x16, 5	; 22
 260:	fe cf       	rjmp	.-4      	; 0x25e <LcdCommand+0xc>

	SET_LCD_CS;							// HIGH -> /CS - zwolnij kontroler
 262:	c0 9a       	sbi	0x18, 0	; 24
void LcdCommand(char comm)
{
	Startx(1);
	SIout(comm);
	Stoptx();
}
 264:	1f 91       	pop	r17
 266:	08 95       	ret

00000268 <lcd_putc>:

//procedura zapisu danej do wyswietlacza LCD sybmoli zpisanych w RAM
void lcd_putc(uint8_t index)
{
	WriteData(symbol_t[index]); 					// zapis do LCD
 268:	e6 e2       	ldi	r30, 0x26	; 38
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e8 0f       	add	r30, r24
 26e:	f1 1d       	adc	r31, r1
 270:	80 81       	ld	r24, Z
 272:	e0 df       	rcall	.-64     	; 0x234 <WriteData>
}
 274:	08 95       	ret

00000276 <lcd_putc_p>:
//procedura zapisu danej do wyswietlacza LCD sybmoli zpisanych w PGM
void lcd_putc_p(uint8_t index, uint8_t dot)
{
 276:	e8 2f       	mov	r30, r24
 278:	f0 e0       	ldi	r31, 0x00	; 0
	if(dot) WriteData(pgm_read_byte(&symbol_t[index])|0x80);	//zapisz do LCD z kropka
 27a:	66 23       	and	r22, r22
 27c:	29 f0       	breq	.+10     	; 0x288 <lcd_putc_p+0x12>
 27e:	ea 5d       	subi	r30, 0xDA	; 218
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	84 91       	lpm	r24, Z+
 284:	80 68       	ori	r24, 0x80	; 128
 286:	03 c0       	rjmp	.+6      	; 0x28e <lcd_putc_p+0x18>
	else WriteData(pgm_read_byte(&symbol_t[index])); 			// zapis do LCD bez kropki
 288:	ea 5d       	subi	r30, 0xDA	; 218
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	84 91       	lpm	r24, Z+
 28e:	d2 df       	rcall	.-92     	; 0x234 <WriteData>
 290:	08 95       	ret

00000292 <write_text>:
}


// procedura zapisu liczby(tekstu) do wyswietlacza LCD z pamieci PGM
void write_text(char *s)
{
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
 29e:	1a c0       	rjmp	.+52     	; 0x2d4 <write_text+0x42>
	while(*s) 	// do napotkania 0
	{
		uint8_t d;
		uint8_t dot=0;

		s++;
 2a0:	7e 01       	movw	r14, r28
 2a2:	08 94       	sec
 2a4:	e1 1c       	adc	r14, r1
 2a6:	f1 1c       	adc	r15, r1
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	8e 32       	cpi	r24, 0x2E	; 46
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <write_text+0x20>
 2b0:	11 e0       	ldi	r17, 0x01	; 1
		if((*s)==0x2e) dot=1; 			//detekcja .
		s--;

		if(*s==0x20) d=0x10;			//detekcja spacji
 2b2:	90 32       	cpi	r25, 0x20	; 32
 2b4:	11 f4       	brne	.+4      	; 0x2ba <write_text+0x28>
 2b6:	80 e1       	ldi	r24, 0x10	; 16
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <write_text+0x34>
		else if(*s==0x2d) d=0x31;			//detekcja -
 2ba:	9d 32       	cpi	r25, 0x2D	; 45
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <write_text+0x30>
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <write_text+0x34>
		else d = (*s-'0');
 2c2:	89 2f       	mov	r24, r25
 2c4:	80 53       	subi	r24, 0x30	; 48
		
		//zapisz znak wskazywany przez s na LCD
		lcd_putc_p(d,dot);
 2c6:	61 2f       	mov	r22, r17
 2c8:	d6 df       	rcall	.-84     	; 0x276 <lcd_putc_p>
		//lcd_putc_e(d);
		//lcd_putc(d);
		if(dot)s++;		// przesun w stringu gdy wykryto kropke
 2ca:	11 23       	and	r17, r17
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <write_text+0x3e>
 2ce:	7e 01       	movw	r14, r28
		s++; 			// zwieksz s (przygotuj nastepny znak)
 2d0:	e7 01       	movw	r28, r14
 2d2:	21 96       	adiw	r28, 0x01	; 1


// procedura zapisu liczby(tekstu) do wyswietlacza LCD z pamieci PGM
void write_text(char *s)
{
	while(*s) 	// do napotkania 0
 2d4:	98 81       	ld	r25, Y
 2d6:	99 23       	and	r25, r25
 2d8:	19 f7       	brne	.-58     	; 0x2a0 <write_text+0xe>
		//lcd_putc_e(d);
		//lcd_putc(d);
		if(dot)s++;		// przesun w stringu gdy wykryto kropke
		s++; 			// zwieksz s (przygotuj nastepny znak)
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <InitLcd>:

//funkcje inicjalizujace wyswietlacz
void InitLcd() 							// inicjaliacja LCD
{
	LCDPORT	=	0b11011111;				//wejscie tylko dla sygnalu /BUSY
 2e6:	8f ed       	ldi	r24, 0xDF	; 223
 2e8:	88 bb       	out	0x18, r24	; 24
	LCDDDR 	= 	_BV(cs_pin) | _BV(si_pin) | _BV(sck_pin) | _BV(res_pin) | _BV(cd_pin) | _BV(cl1_pin);
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	87 bb       	out	0x17, r24	; 23
 2ee:	88 ee       	ldi	r24, 0xE8	; 232
 2f0:	93 e0       	ldi	r25, 0x03	; 3
 2f2:	24 e6       	ldi	r18, 0x64	; 100
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <InitLcd+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fe:	d9 f7       	brne	.-10     	; 0x2f6 <InitLcd+0x10>
		
	_delay_ms(100);
	CLR_LCD_CS;							// wybranie ukladu
 300:	c0 98       	cbi	0x18, 0	; 24
    CLR_LCD_RES;						// LOW -> /RESET -  zerowanie układu
 302:	c3 98       	cbi	0x18, 3	; 24
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	97 e2       	ldi	r25, 0x27	; 39
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <InitLcd+0x22>
    _delay_ms(10);
    SET_LCD_RES;						// HIGH -> /RESET
 30c:	c3 9a       	sbi	0x18, 3	; 24
    
    Startx(1); 							// tryb komend
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	76 df       	rcall	.-276    	; 0x1fe <Startx>
	SIout(MODE_SET);					//tryb 
 312:	80 e4       	ldi	r24, 0x40	; 64
 314:	54 df       	rcall	.-344    	; 0x1be <SIout>
    SIout(WITHOUT_DECODER);				//tryb bez dekodowania znakow
 316:	84 e1       	ldi	r24, 0x14	; 20
 318:	52 df       	rcall	.-348    	; 0x1be <SIout>
    SIout(CLEAR_MEM);					//wyczysc pamiec LCD
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	50 df       	rcall	.-352    	; 0x1be <SIout>
    SIout(DISPLAY_ON);					//wlacz wyswietlacz
 31e:	81 e1       	ldi	r24, 0x11	; 17
 320:	4e df       	rcall	.-356    	; 0x1be <SIout>
	}
}//Startx
 
void Stoptx() 							// Zakonczenie transmisji przez SI
{
	while(bit_is_clear(LCDPIN, busy_pin)){}// czekaj na gotowosc wyswietlacza
 322:	b5 9b       	sbis	0x16, 5	; 22
 324:	fe cf       	rjmp	.-4      	; 0x322 <InitLcd+0x3c>

	SET_LCD_CS;							// HIGH -> /CS - zwolnij kontroler
 326:	c0 9a       	sbi	0x18, 0	; 24
	SIout(MODE_SET);					//tryb 
    SIout(WITHOUT_DECODER);				//tryb bez dekodowania znakow
    SIout(CLEAR_MEM);					//wyczysc pamiec LCD
    SIout(DISPLAY_ON);					//wlacz wyswietlacz
    Stoptx();							//zakoncz transmisje
}
 328:	08 95       	ret

0000032a <lcd_putc_e>:
	else WriteData(pgm_read_byte(&symbol_t[index])); 			// zapis do LCD bez kropki
}
//procedura zapisu danej do wyswietlacza LCD sybmoli zpisanych w EEPROM
void lcd_putc_e(uint8_t index)
{
	WriteData(eeprom_read_byte(&symbol_t[index]));	// zapis do LCD
 32a:	26 e2       	ldi	r18, 0x26	; 38
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	a9 01       	movw	r20, r18
 330:	48 0f       	add	r20, r24
 332:	51 1d       	adc	r21, r1
 334:	ca 01       	movw	r24, r20
 336:	02 d0       	rcall	.+4      	; 0x33c <__eerd_byte_tn2313>
 338:	7d df       	rcall	.-262    	; 0x234 <WriteData>
}
 33a:	08 95       	ret

0000033c <__eerd_byte_tn2313>:
 33c:	e1 99       	sbic	0x1c, 1	; 28
 33e:	fe cf       	rjmp	.-4      	; 0x33c <__eerd_byte_tn2313>
 340:	1f ba       	out	0x1f, r1	; 31
 342:	8e bb       	out	0x1e, r24	; 30
 344:	e0 9a       	sbi	0x1c, 0	; 28
 346:	99 27       	eor	r25, r25
 348:	8d b3       	in	r24, 0x1d	; 29
 34a:	08 95       	ret

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
