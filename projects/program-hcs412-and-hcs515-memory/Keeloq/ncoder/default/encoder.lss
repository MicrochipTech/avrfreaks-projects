
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000063  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000755  00000000  00000000  000003ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002d6  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000566  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000114  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000028a  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000f0  00000000  00000000  0000179e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e0       	ldi	r30, 0x08	; 8
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	6a d0       	rcall	.+212    	; 0x13c <main>
  68:	4d c1       	rjmp	.+666    	; 0x304 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <port_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "driver.h"


uint8_t port_init(void){
  6c:	84 b1       	in	r24, 0x04	; 4
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	84 b9       	out	0x04, r24	; 4
	PORT_DIR|=_BV(DATA)|_BV(CLK)|_BV(POWER);  	//all output
	PORT_OUT&=~_BV(DATA)&~_BV(CLK)&_BV(POWER);	//all low
  72:	85 b1       	in	r24, 0x05	; 5
  74:	84 70       	andi	r24, 0x04	; 4
  76:	85 b9       	out	0x05, r24	; 5
return 0;
}
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	08 95       	ret

0000007c <send_bit>:

void send_bit(uint8_t b){
  7c:	28 9a       	sbi	0x05, 0	; 5
	PORT_OUT|=_BV(CLK);  //clk high
	if(b) PORT_OUT|=_BV(DATA); //data high
  7e:	88 23       	and	r24, r24
  80:	49 f4       	brne	.+18     	; 0x94 <send_bit+0x18>
	else PORT_OUT&=~_BV(DATA);//data low
  82:	29 98       	cbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  84:	80 ea       	ldi	r24, 0xA0	; 160
  86:	98 2f       	mov	r25, r24
  88:	9a 95       	dec	r25
  8a:	f1 f7       	brne	.-4      	; 0x88 <send_bit+0xc>
	_delay_us(tclk);
	PORT_OUT&=~_BV(CLK); //clk low
  8c:	28 98       	cbi	0x05, 0	; 5
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <send_bit+0x12>
	_delay_us(tclk);
}
  92:	08 95       	ret
return 0;
}

void send_bit(uint8_t b){
	PORT_OUT|=_BV(CLK);  //clk high
	if(b) PORT_OUT|=_BV(DATA); //data high
  94:	29 9a       	sbi	0x05, 1	; 5
  96:	f6 cf       	rjmp	.-20     	; 0x84 <send_bit+0x8>

00000098 <send_word>:
	_delay_us(tclk);
	PORT_OUT&=~_BV(CLK); //clk low
	_delay_us(tclk);
}

void send_word(uint16_t word){
  98:	bc 01       	movw	r22, r24
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
return 0;
}

void send_bit(uint8_t b){
	PORT_OUT|=_BV(CLK);  //clk high
	if(b) PORT_OUT|=_BV(DATA); //data high
  9e:	e1 e0       	ldi	r30, 0x01	; 1
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	30 ea       	ldi	r19, 0xA0	; 160
  a4:	0d c0       	rjmp	.+26     	; 0xc0 <send_word+0x28>
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	83 2f       	mov	r24, r19
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <send_word+0x12>
	else PORT_OUT&=~_BV(DATA);//data low
	_delay_us(tclk);
	PORT_OUT&=~_BV(CLK); //clk low
  ae:	28 98       	cbi	0x05, 0	; 5
  b0:	83 2f       	mov	r24, r19
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <send_word+0x1a>
  b6:	4f 5f       	subi	r20, 0xFF	; 255
  b8:	5f 4f       	sbci	r21, 0xFF	; 255
}

void send_word(uint16_t word){
	uint8_t i;
	
	for(i=0;i<16;i++){
  ba:	40 31       	cpi	r20, 0x10	; 16
  bc:	51 05       	cpc	r21, r1
  be:	a1 f0       	breq	.+40     	; 0xe8 <send_word+0x50>
	PORT_OUT&=~_BV(DATA)&~_BV(CLK)&_BV(POWER);	//all low
return 0;
}

void send_bit(uint8_t b){
	PORT_OUT|=_BV(CLK);  //clk high
  c0:	28 9a       	sbi	0x05, 0	; 5
	if(b) PORT_OUT|=_BV(DATA); //data high
  c2:	cf 01       	movw	r24, r30
  c4:	04 2e       	mov	r0, r20
  c6:	02 c0       	rjmp	.+4      	; 0xcc <send_word+0x34>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <send_word+0x30>
  d0:	86 23       	and	r24, r22
  d2:	97 23       	and	r25, r23
  d4:	04 2e       	mov	r0, r20
  d6:	02 c0       	rjmp	.+4      	; 0xdc <send_word+0x44>
  d8:	96 95       	lsr	r25
  da:	87 95       	ror	r24
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <send_word+0x40>
  e0:	88 23       	and	r24, r24
  e2:	09 f7       	brne	.-62     	; 0xa6 <send_word+0xe>
	else PORT_OUT&=~_BV(DATA);//data low
  e4:	29 98       	cbi	0x05, 1	; 5
  e6:	e0 cf       	rjmp	.-64     	; 0xa8 <send_word+0x10>
	uint8_t i;
	
	for(i=0;i<16;i++){
		send_bit((word&_BV(i))>>i);
	};
	PORT_OUT|=_BV(CLK);  //clk high
  e8:	28 9a       	sbi	0x05, 0	; 5
	PORT_DIR&=~_BV(DATA);//data in
  ea:	21 98       	cbi	0x04, 1	; 4
  ec:	24 ef       	ldi	r18, 0xF4	; 244
  ee:	31 e0       	ldi	r19, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f0:	48 ec       	ldi	r20, 0xC8	; 200
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	ca 01       	movw	r24, r20
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <send_word+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d1 f7       	brne	.-12     	; 0xf4 <send_word+0x5c>
	_delay_ms(twc);	//wait write cycle
	//while(!((PORT_IN&DATA)>>DATA)) {_delay_us(200);} //wait for an ack
	//while((PORT_IN&DATA)>>DATA); 
	PORT_OUT&=~_BV(CLK); //clk low
 100:	28 98       	cbi	0x05, 0	; 5
	PORT_DIR|=_BV(DATA);//data out
 102:	21 9a       	sbi	0x04, 1	; 4
	PORT_OUT&=~_BV(DATA); //data low
 104:	29 98       	cbi	0x05, 1	; 5
 106:	80 ef       	ldi	r24, 0xF0	; 240
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <send_word+0x72>
	_delay_us(120); //hold time
}
 10e:	08 95       	ret

00000110 <get_word>:

uint16_t get_word(void){
 110:	21 98       	cbi	0x04, 1	; 4
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 118:	40 ea       	ldi	r20, 0xA0	; 160
	uint16_t data=0;
	uint8_t i;
	
	PORT_DIR&=~_BV(DATA); //data in
	for(i=0;i<16;i++){
		PORT_OUT|=_BV(CLK);  //clk high
 11a:	28 9a       	sbi	0x05, 0	; 5
 11c:	84 2f       	mov	r24, r20
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <get_word+0xe>
		_delay_us(tclk);
		PORT_OUT&=~_BV(CLK); //clk low
 122:	28 98       	cbi	0x05, 0	; 5
		data>>=1;
 124:	36 95       	lsr	r19
 126:	27 95       	ror	r18
		if((PORT_IN&_BV(DATA))>>DATA) data|=0x8000;
 128:	19 99       	sbic	0x03, 1	; 3
 12a:	30 68       	ori	r19, 0x80	; 128
 12c:	84 2f       	mov	r24, r20
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <get_word+0x1e>
uint16_t get_word(void){
	uint16_t data=0;
	uint8_t i;
	
	PORT_DIR&=~_BV(DATA); //data in
	for(i=0;i<16;i++){
 132:	9f 5f       	subi	r25, 0xFF	; 255
 134:	90 31       	cpi	r25, 0x10	; 16
 136:	89 f7       	brne	.-30     	; 0x11a <get_word+0xa>
		data>>=1;
		if((PORT_IN&_BV(DATA))>>DATA) data|=0x8000;
		_delay_us(tclk);
	};
return data;
}
 138:	c9 01       	movw	r24, r18
 13a:	08 95       	ret

0000013c <main>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "driver.h"


int main(void){
 13c:	af 92       	push	r10
 13e:	bf 92       	push	r11
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	c0 55       	subi	r28, 0x50	; 80
 156:	d0 40       	sbci	r29, 0x00	; 0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
	uint16_t out[20];
	uint16_t in[20];
	uint8_t i,count;
	
	cli();
 162:	f8 94       	cli
	PORT_OUT|=_BV(POWER);//power HCS
 164:	2a 9a       	sbi	0x05, 2	; 5
 166:	20 ed       	ldi	r18, 0xD0	; 208
 168:	37 e0       	ldi	r19, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16a:	48 ec       	ldi	r20, 0xC8	; 200
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	ca 01       	movw	r24, r20
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	21 50       	subi	r18, 0x01	; 1
 176:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 178:	d1 f7       	brne	.-12     	; 0x16e <main+0x32>
	_delay_ms(200);
	
	out[0]=0x9108;//manufacturer code
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	91 e9       	ldi	r25, 0x91	; 145
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	89 83       	std	Y+1, r24	; 0x01
	out[1]=0x86F0;
 182:	80 ef       	ldi	r24, 0xF0	; 240
 184:	96 e8       	ldi	r25, 0x86	; 134
 186:	9c 83       	std	Y+4, r25	; 0x04
 188:	8b 83       	std	Y+3, r24	; 0x03
	out[2]=0x58F2;
 18a:	82 ef       	ldi	r24, 0xF2	; 242
 18c:	98 e5       	ldi	r25, 0x58	; 88
 18e:	9e 83       	std	Y+6, r25	; 0x06
 190:	8d 83       	std	Y+5, r24	; 0x05
	out[3]=0x728B;
 192:	8b e8       	ldi	r24, 0x8B	; 139
 194:	92 e7       	ldi	r25, 0x72	; 114
 196:	98 87       	std	Y+8, r25	; 0x08
 198:	8f 83       	std	Y+7, r24	; 0x07
	out[4]=0x0000;//seed
 19a:	1a 86       	std	Y+10, r1	; 0x0a
 19c:	19 86       	std	Y+9, r1	; 0x09
	out[5]=0x0000;
 19e:	1c 86       	std	Y+12, r1	; 0x0c
 1a0:	1b 86       	std	Y+11, r1	; 0x0b
	out[6]=0x0000;
 1a2:	1e 86       	std	Y+14, r1	; 0x0e
 1a4:	1d 86       	std	Y+13, r1	; 0x0d
	out[7]=0x0000;
 1a6:	18 8a       	std	Y+16, r1	; 0x10
 1a8:	1f 86       	std	Y+15, r1	; 0x0f
	out[8]=0x00A0;
 1aa:	80 ea       	ldi	r24, 0xA0	; 160
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	9a 8b       	std	Y+18, r25	; 0x12
 1b0:	89 8b       	std	Y+17, r24	; 0x11
	out[9]=0x0710;
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	9c 8b       	std	Y+20, r25	; 0x14
 1b8:	8b 8b       	std	Y+19, r24	; 0x13
	out[10]=0x2071;//serial number word0
 1ba:	81 e7       	ldi	r24, 0x71	; 113
 1bc:	90 e2       	ldi	r25, 0x20	; 32
 1be:	9e 8b       	std	Y+22, r25	; 0x16
 1c0:	8d 8b       	std	Y+21, r24	; 0x15
	out[11]=0x0821;//serial number word1
 1c2:	81 e2       	ldi	r24, 0x21	; 33
 1c4:	98 e0       	ldi	r25, 0x08	; 8
 1c6:	98 8f       	std	Y+24, r25	; 0x18
 1c8:	8f 8b       	std	Y+23, r24	; 0x17
	out[12]=0x0005;//user
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	9a 8f       	std	Y+26, r25	; 0x1a
 1d0:	89 8f       	std	Y+25, r24	; 0x19
	out[13]=0x0006;
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9c 8f       	std	Y+28, r25	; 0x1c
 1d8:	8b 8f       	std	Y+27, r24	; 0x1b
	out[14]=0x0007;
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9e 8f       	std	Y+30, r25	; 0x1e
 1e0:	8d 8f       	std	Y+29, r24	; 0x1d
	out[15]=0x0008;
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	98 a3       	std	Y+32, r25	; 0x20
 1e8:	8f 8f       	std	Y+31, r24	; 0x1f
	out[16]=0x0000;//counter
 1ea:	1a a2       	std	Y+34, r1	; 0x22
 1ec:	19 a2       	std	Y+33, r1	; 0x21
	out[17]=0x0000;//reserved
 1ee:	1c a2       	std	Y+36, r1	; 0x24
 1f0:	1b a2       	std	Y+35, r1	; 0x23

	
	PORT_OUT|=_BV(CLK);  //clk high enter program mode
 1f2:	28 9a       	sbi	0x05, 0	; 5
 1f4:	80 e7       	ldi	r24, 0x70	; 112
 1f6:	97 e1       	ldi	r25, 0x17	; 23
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0xbc>
	_delay_ms(tps);
	PORT_OUT|=_BV(DATA);	//data high
 1fc:	29 9a       	sbi	0x05, 1	; 5
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	97 e2       	ldi	r25, 0x27	; 39
 202:	fc 01       	movw	r30, r24
 204:	31 97       	sbiw	r30, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0xc8>
	_delay_ms(tph1);
	PORT_OUT&=~_BV(DATA);//data low
 208:	29 98       	cbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 20a:	20 ea       	ldi	r18, 0xA0	; 160
 20c:	2a 95       	dec	r18
 20e:	f1 f7       	brne	.-4      	; 0x20c <main+0xd0>
	_delay_us(tph2);
	PORT_OUT&=~_BV(CLK);	//clk low
 210:	28 98       	cbi	0x05, 0	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0xd6>
 216:	5e 01       	movw	r10, r28
 218:	08 94       	sec
 21a:	a1 1c       	adc	r10, r1
 21c:	b1 1c       	adc	r11, r1
 21e:	85 01       	movw	r16, r10
 220:	25 e2       	ldi	r18, 0x25	; 37
 222:	e2 2e       	mov	r14, r18
 224:	f1 2c       	mov	r15, r1
 226:	ec 0e       	add	r14, r28
 228:	fd 1e       	adc	r15, r29
	_delay_ms(tpbw);     //bulk write wait time
	for(i=0;i<18;i++){ 	//send 18 words 
		send_word(out[i]);
 22a:	f8 01       	movw	r30, r16
 22c:	81 91       	ld	r24, Z+
 22e:	91 91       	ld	r25, Z+
 230:	8f 01       	movw	r16, r30
 232:	32 df       	rcall	.-412    	; 0x98 <send_word>
	_delay_ms(tph1);
	PORT_OUT&=~_BV(DATA);//data low
	_delay_us(tph2);
	PORT_OUT&=~_BV(CLK);	//clk low
	_delay_ms(tpbw);     //bulk write wait time
	for(i=0;i<18;i++){ 	//send 18 words 
 234:	0e 15       	cp	r16, r14
 236:	1f 05       	cpc	r17, r15
 238:	c1 f7       	brne	.-16     	; 0x22a <main+0xee>
 23a:	99 e2       	ldi	r25, 0x29	; 41
 23c:	c9 2e       	mov	r12, r25
 23e:	d1 2c       	mov	r13, r1
 240:	cc 0e       	add	r12, r28
 242:	dd 1e       	adc	r13, r29
 244:	86 01       	movw	r16, r12
		send_word(out[i]);
	};
	for(i=0;i<18;i++){
 246:	84 e2       	ldi	r24, 0x24	; 36
 248:	e8 2e       	mov	r14, r24
 24a:	f1 2c       	mov	r15, r1
 24c:	ec 0c       	add	r14, r12
 24e:	fd 1c       	adc	r15, r13
		in[i]=get_word();
 250:	5f df       	rcall	.-322    	; 0x110 <get_word>
 252:	f8 01       	movw	r30, r16
 254:	81 93       	st	Z+, r24
 256:	91 93       	st	Z+, r25
 258:	8f 01       	movw	r16, r30
	PORT_OUT&=~_BV(CLK);	//clk low
	_delay_ms(tpbw);     //bulk write wait time
	for(i=0;i<18;i++){ 	//send 18 words 
		send_word(out[i]);
	};
	for(i=0;i<18;i++){
 25a:	ee 15       	cp	r30, r14
 25c:	ff 05       	cpc	r31, r15
 25e:	c1 f7       	brne	.-16     	; 0x250 <main+0x114>
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	50 e0       	ldi	r21, 0x00	; 0
		in[i]=get_word();
	};
	count=0;
	for(i=0;i<18;i++){	//verify data
		if(out[i]==in[i]) count++;
 266:	f5 01       	movw	r30, r10
 268:	e4 0f       	add	r30, r20
 26a:	f5 1f       	adc	r31, r21
 26c:	d6 01       	movw	r26, r12
 26e:	a4 0f       	add	r26, r20
 270:	b5 1f       	adc	r27, r21
 272:	20 81       	ld	r18, Z
 274:	31 81       	ldd	r19, Z+1	; 0x01
 276:	8d 91       	ld	r24, X+
 278:	9c 91       	ld	r25, X
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	31 f5       	brne	.+76     	; 0x2cc <main+0x190>
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	4e 5f       	subi	r20, 0xFE	; 254
 284:	5f 4f       	sbci	r21, 0xFF	; 255
	};
	for(i=0;i<18;i++){
		in[i]=get_word();
	};
	count=0;
	for(i=0;i<18;i++){	//verify data
 286:	62 31       	cpi	r22, 0x12	; 18
 288:	71 f7       	brne	.-36     	; 0x266 <main+0x12a>
		if(out[i]==in[i]) count++;
		else break;
	};
	if(count==18){
		DDRD|=_BV(PD7);
 28a:	57 9a       	sbi	0x0a, 7	; 10
		PORTD|=_BV(PD7);
 28c:	5f 9a       	sbi	0x0b, 7	; 11
 28e:	28 e8       	ldi	r18, 0x88	; 136
 290:	33 e1       	ldi	r19, 0x13	; 19
 292:	48 ec       	ldi	r20, 0xC8	; 200
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	ca 01       	movw	r24, r20
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x15c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a0:	d1 f7       	brne	.-12     	; 0x296 <main+0x15a>
		_delay_ms(500);  //if succes led on for 0.5 seconds
		PORTD&=~_BV(PD7);//else blink 10 times
 2a2:	5f 98       	cbi	0x0b, 7	; 11
			PORTD&=~_BV(PD7);
			_delay_ms(200);
		};
	};
return 0;
}
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	c0 5b       	subi	r28, 0xB0	; 176
 2aa:	df 4f       	sbci	r29, 0xFF	; 255
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	08 95       	ret
	count=0;
	for(i=0;i<18;i++){	//verify data
		if(out[i]==in[i]) count++;
		else break;
	};
	if(count==18){
 2cc:	62 31       	cpi	r22, 0x12	; 18
 2ce:	e9 f2       	breq	.-70     	; 0x28a <main+0x14e>
		DDRD|=_BV(PD7);
		PORTD|=_BV(PD7);
		_delay_ms(500);  //if succes led on for 0.5 seconds
		PORTD&=~_BV(PD7);//else blink 10 times
	}else{
		DDRD|=_BV(PD7);
 2d0:	57 9a       	sbi	0x0a, 7	; 10
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	48 ec       	ldi	r20, 0xC8	; 200
 2d6:	50 e0       	ldi	r21, 0x00	; 0
		for(i=0;i<10;i++){
			PORTD|=_BV(PD7);
 2d8:	5f 9a       	sbi	0x0b, 7	; 11
 2da:	28 eb       	ldi	r18, 0xB8	; 184
 2dc:	3b e0       	ldi	r19, 0x0B	; 11
 2de:	ca 01       	movw	r24, r20
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e8:	d1 f7       	brne	.-12     	; 0x2de <main+0x1a2>
			_delay_ms(300);
			PORTD&=~_BV(PD7);
 2ea:	5f 98       	cbi	0x0b, 7	; 11
 2ec:	20 ed       	ldi	r18, 0xD0	; 208
 2ee:	37 e0       	ldi	r19, 0x07	; 7
 2f0:	ca 01       	movw	r24, r20
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x1b6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2fa:	d1 f7       	brne	.-12     	; 0x2f0 <main+0x1b4>
		PORTD|=_BV(PD7);
		_delay_ms(500);  //if succes led on for 0.5 seconds
		PORTD&=~_BV(PD7);//else blink 10 times
	}else{
		DDRD|=_BV(PD7);
		for(i=0;i<10;i++){
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	6a 30       	cpi	r22, 0x0A	; 10
 300:	59 f7       	brne	.-42     	; 0x2d8 <main+0x19c>
 302:	d0 cf       	rjmp	.-96     	; 0x2a4 <main+0x168>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
