
keelo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000050  00800100  00000b24  00000b98  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001c0  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000146d  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000552  00000000  00000000  00002225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d9b  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00003514  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a9  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a5c  00000000  00000000  0000396d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000290  00000000  00000000  000043c9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
   2:	1e c1       	rjmp	.+572    	; 0x240 <__bad_interrupt>
   4:	1d c1       	rjmp	.+570    	; 0x240 <__bad_interrupt>
   6:	9d c3       	rjmp	.+1850   	; 0x742 <__vector_3>
   8:	1b c1       	rjmp	.+566    	; 0x240 <__bad_interrupt>
   a:	1a c1       	rjmp	.+564    	; 0x240 <__bad_interrupt>
   c:	19 c1       	rjmp	.+562    	; 0x240 <__bad_interrupt>
   e:	18 c1       	rjmp	.+560    	; 0x240 <__bad_interrupt>
  10:	17 c1       	rjmp	.+558    	; 0x240 <__bad_interrupt>
  12:	16 c1       	rjmp	.+556    	; 0x240 <__bad_interrupt>
  14:	15 c1       	rjmp	.+554    	; 0x240 <__bad_interrupt>
  16:	14 c1       	rjmp	.+552    	; 0x240 <__bad_interrupt>
  18:	13 c1       	rjmp	.+550    	; 0x240 <__bad_interrupt>
  1a:	12 c1       	rjmp	.+548    	; 0x240 <__bad_interrupt>
  1c:	11 c1       	rjmp	.+546    	; 0x240 <__bad_interrupt>
  1e:	10 c1       	rjmp	.+544    	; 0x240 <__bad_interrupt>
  20:	0f c1       	rjmp	.+542    	; 0x240 <__bad_interrupt>
  22:	0e c1       	rjmp	.+540    	; 0x240 <__bad_interrupt>
  24:	e8 c3       	rjmp	.+2000   	; 0x7f6 <__vector_18>
  26:	13 c4       	rjmp	.+2086   	; 0x84e <__vector_19>
  28:	0b c1       	rjmp	.+534    	; 0x240 <__bad_interrupt>
  2a:	0a c1       	rjmp	.+532    	; 0x240 <__bad_interrupt>
  2c:	09 c1       	rjmp	.+530    	; 0x240 <__bad_interrupt>
  2e:	08 c1       	rjmp	.+528    	; 0x240 <__bad_interrupt>
  30:	07 c1       	rjmp	.+526    	; 0x240 <__bad_interrupt>
  32:	06 c1       	rjmp	.+524    	; 0x240 <__bad_interrupt>

00000034 <c.1556>:
  34:	67 6f 69 6e 67 20 74 6f 20 73 6c 65 65 70 2e 0a     going to sleep..
	...

00000045 <c.1554>:
  45:	0a 00                                               ..

00000047 <c.1548>:
  47:	44 61 74 61 20 66 72 6f 6d 20 64 65 63 6f 64 65     Data from decode
  57:	72 3a 20 00                                         r: .

0000005b <c.1546>:
  5b:	50 6f 77 65 72 20 6f 6e 2e 0a 00                    Power on...

00000066 <c.1531>:
  66:	6e 6f 20 72 65 73 70 6f 6e 73 65 20 74 6f 20 72     no response to r
  76:	65 71 75 65 73 74 0a 00                             equest..

0000007e <c.1529>:
  7e:	6e 6f 74 20 61 63 6b 0a 00                          not ack..

00000087 <c.1527>:
  87:	70 72 6f 67 72 61 6d 20 73 75 63 63 65 73 73 2e     program success.
  97:	0a 00                                               ..

00000099 <c.1506>:
  99:	6e 6f 20 72 65 73 70 6f 6e 73 65 20 74 6f 20 72     no response to r
  a9:	65 71 75 65 73 74 0a 00                             equest..

000000b1 <c.1504>:
  b1:	6e 6f 74 20 61 63 6b 0a 00                          not ack..

000000ba <c.1502>:
  ba:	61 6c 6c 20 74 72 61 6e 73 6d 69 74 74 65 72 73     all transmitters
  ca:	20 65 72 61 73 65 64 2e 0a 00                        erased...

000000d4 <c.1483>:
  d4:	6e 6f 20 72 65 73 70 6f 6e 73 65 20 74 6f 20 72     no response to r
  e4:	65 71 75 65 73 74 0a 00                             equest..

000000ec <c.1481>:
  ec:	6e 6f 74 20 61 63 6b 0a 00                          not ack..

000000f5 <c.1479>:
  f5:	6c 65 61 72 6e 20 6d 6f 64 65 20 65 6e 74 65 72     learn mode enter
 105:	65 64 2e 0a 00                                      ed...

0000010a <c.1429>:
 10a:	20 00                                                .

0000010c <c.1426>:
 10c:	54 72 61 6e 73 6d 69 74 74 65 72 20 6c 65 61 72     Transmitter lear
 11c:	6e 65 64 2e 20 44 65 63 6f 64 65 64 20 6d 65 73     ned. Decoded mes
 12c:	73 61 67 65 3a 20 00                                sage: .

00000133 <c.1424>:
 133:	4e 6f 20 72 65 73 70 6f 6e 73 65 20 74 6f 20 43     No response to C
 143:	4c 4b 20 68 69 67 68 2e 0a 00                       LK high...

0000014d <c.1422>:
 14d:	4e 6f 20 73 65 63 6f 6e 64 20 74 72 61 6e 73 6d     No second transm
 15d:	69 73 73 69 6f 6e 20 72 65 63 65 69 76 65 64 20     ission received 
 16d:	77 69 74 68 69 6e 20 33 30 20 73 65 63 6f 6e 64     within 30 second
 17d:	73 2e 0a 00                                         s...

00000181 <c.1418>:
 181:	46 69 72 73 74 20 74 72 61 6e 73 6d 69 73 73 69     First transmissi
 191:	6f 6e 20 72 65 63 65 69 76 65 64 2e 20 33 30 20     on received. 30 
 1a1:	73 65 63 6f 6e 64 73 20 72 65 6d 61 69 6e 69 6e     seconds remainin
 1b1:	67 21 0a 00                                         g!..

000001b5 <c.1416>:
 1b5:	45 72 72 6f 72 20 6f 6e 20 66 69 72 73 74 20 74     Error on first t
 1c5:	72 61 6e 73 6d 69 73 73 69 6f 6e 2e 0a 00           ransmission...

000001d3 <c.1414>:
 1d3:	4e 6f 20 74 72 61 6e 73 6d 69 73 73 69 6f 6e 20     No transmission 
 1e3:	72 65 63 65 69 76 65 64 2e 0a 00                    received...

000001ee <c.1410>:
 1ee:	57 61 69 74 69 6e 67 20 66 6f 72 20 61 20 74 72     Waiting for a tr
 1fe:	61 6e 73 6d 69 74 74 65 72 2e 0a 00                 ansmitter...

0000020a <__ctors_end>:
 20a:	11 24       	eor	r1, r1
 20c:	1f be       	out	0x3f, r1	; 63
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	d4 e0       	ldi	r29, 0x04	; 4
 212:	de bf       	out	0x3e, r29	; 62
 214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
 216:	11 e0       	ldi	r17, 0x01	; 1
 218:	a0 e0       	ldi	r26, 0x00	; 0
 21a:	b1 e0       	ldi	r27, 0x01	; 1
 21c:	e4 e2       	ldi	r30, 0x24	; 36
 21e:	fb e0       	ldi	r31, 0x0B	; 11
 220:	02 c0       	rjmp	.+4      	; 0x226 <.do_copy_data_start>

00000222 <.do_copy_data_loop>:
 222:	05 90       	lpm	r0, Z+
 224:	0d 92       	st	X+, r0

00000226 <.do_copy_data_start>:
 226:	a0 30       	cpi	r26, 0x00	; 0
 228:	b1 07       	cpc	r27, r17
 22a:	d9 f7       	brne	.-10     	; 0x222 <.do_copy_data_loop>

0000022c <__do_clear_bss>:
 22c:	11 e0       	ldi	r17, 0x01	; 1
 22e:	a0 e0       	ldi	r26, 0x00	; 0
 230:	b1 e0       	ldi	r27, 0x01	; 1
 232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
 234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
 236:	a0 35       	cpi	r26, 0x50	; 80
 238:	b1 07       	cpc	r27, r17
 23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
 23c:	19 d2       	rcall	.+1074   	; 0x670 <main>
 23e:	70 c4       	rjmp	.+2272   	; 0xb20 <_exit>

00000240 <__bad_interrupt>:
 240:	df ce       	rjmp	.-578    	; 0x0 <__vectors>

00000242 <port_init>:
#define F_CPU 8000000UL // 8MHz
#include <avr/io.h>
#include <util/delay.h>
#include "driver.h"

extern uint8_t port_init(void){
 242:	84 b1       	in	r24, 0x04	; 4
 244:	83 60       	ori	r24, 0x03	; 3
 246:	84 b9       	out	0x04, r24	; 4
	PORT_DIR|=_BV(DATA)|_BV(CLK); //all output 
	PORT_OUT&=~_BV(DATA)&~_BV(CLK); //all low	
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8c 7f       	andi	r24, 0xFC	; 252
 24c:	85 b9       	out	0x05, r24	; 5
	PCMSK0|=_BV(PCINT1);    //interrupt on pin change PB1
 24e:	eb e6       	ldi	r30, 0x6B	; 107
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	82 60       	ori	r24, 0x02	; 2
 256:	80 83       	st	Z, r24
return 0;
}
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	08 95       	ret

0000025c <request_command>:
// Desc: send request command
// Rets: ret 1 on success, 0 on error
// Date: 2008/05/19
// Modf:
//	
extern uint8_t request_command(void){
 25c:	28 9a       	sbi	0x05, 0	; 5
	uint16_t count=0;
	uint8_t status=1;
	
	PORT_OUT|=_BV(CLK); //clk high
	PORT_DIR&=~_BV(DATA); //data in
 25e:	21 98       	cbi	0x04, 1	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	9e e4       	ldi	r25, 0x4E	; 78
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <request_command+0x8>
	_delay_ms(10);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 268:	19 99       	sbic	0x03, 1	; 3
 26a:	0e c0       	rjmp	.+28     	; 0x288 <request_command+0x2c>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 270:	3d e0       	ldi	r19, 0x0D	; 13
 272:	05 c0       	rjmp	.+10     	; 0x27e <request_command+0x22>
		count++;
 274:	01 96       	adiw	r24, 0x01	; 1
		if(count<MAX_IT) _delay_us(5);
 276:	2d e7       	ldi	r18, 0x7D	; 125
 278:	80 30       	cpi	r24, 0x00	; 0
 27a:	92 07       	cpc	r25, r18
 27c:	71 f0       	breq	.+28     	; 0x29a <request_command+0x3e>
 27e:	23 2f       	mov	r18, r19
 280:	2a 95       	dec	r18
 282:	f1 f7       	brne	.-4      	; 0x280 <request_command+0x24>
	uint8_t status=1;
	
	PORT_OUT|=_BV(CLK); //clk high
	PORT_DIR&=~_BV(DATA); //data in
	_delay_ms(10);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 284:	19 9b       	sbis	0x03, 1	; 3
 286:	f6 cf       	rjmp	.-20     	; 0x274 <request_command+0x18>
 288:	81 e0       	ldi	r24, 0x01	; 1
		else{
			status=0;
			break;
		};
	};
	PORT_OUT&=~_BV(CLK); //clk low
 28a:	28 98       	cbi	0x05, 0	; 5
	PORT_DIR|=_BV(DATA); //data output 
 28c:	21 9a       	sbi	0x04, 1	; 4
	PORT_OUT&=~_BV(DATA); //low		
 28e:	29 98       	cbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 290:	e8 ec       	ldi	r30, 0xC8	; 200
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <request_command+0x38>
	_delay_us(100);  //time to first command bit
return status;
}
 298:	08 95       	ret
	PORT_OUT|=_BV(CLK); //clk high
	PORT_DIR&=~_BV(DATA); //data in
	_delay_ms(10);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
		count++;
		if(count<MAX_IT) _delay_us(5);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	f6 cf       	rjmp	.-20     	; 0x28a <request_command+0x2e>

0000029e <get_ack>:
// Desc: get acknoledge after programm or erase
// Rets: ret 1 on success, 0 on error
// Date: 2008/05/19
// Modf:
//	
extern uint8_t get_ack(void){
 29e:	28 9a       	sbi	0x05, 0	; 5
	uint16_t count=0;
	uint8_t status=1;
	
	PORT_OUT|=_BV(CLK);  //clk high
	PORT_DIR&=~_BV(DATA); //data in
 2a0:	21 98       	cbi	0x04, 1	; 4
 2a2:	80 ed       	ldi	r24, 0xD0	; 208
 2a4:	97 e0       	ldi	r25, 0x07	; 7
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <get_ack+0x8>
	_delay_ms(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 2aa:	19 99       	sbic	0x03, 1	; 3
 2ac:	1f c0       	rjmp	.+62     	; 0x2ec <get_ack+0x4e>
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2b2:	9a e1       	ldi	r25, 0x1A	; 26
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <get_ack+0x24>
		count++;
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
		if(count<MAX_IT) _delay_us(10);
 2ba:	8d e7       	ldi	r24, 0x7D	; 125
 2bc:	20 30       	cpi	r18, 0x00	; 0
 2be:	38 07       	cpc	r19, r24
 2c0:	99 f0       	breq	.+38     	; 0x2e8 <get_ack+0x4a>
 2c2:	89 2f       	mov	r24, r25
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <get_ack+0x26>
	uint8_t status=1;
	
	PORT_OUT|=_BV(CLK);  //clk high
	PORT_DIR&=~_BV(DATA); //data in
	_delay_ms(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 2c8:	19 9b       	sbis	0x03, 1	; 3
 2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <get_ack+0x18>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	95 e8       	ldi	r25, 0x85	; 133
 2d0:	9a 95       	dec	r25
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <get_ack+0x32>
			status=0;
			break;
		};
	};
	_delay_us(50);
	PORT_OUT&=~_BV(CLK);
 2d4:	28 98       	cbi	0x05, 0	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2d6:	e8 ec       	ldi	r30, 0xC8	; 200
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <get_ack+0x3c>
	_delay_us(100);
	if(count<3000) status=0; // under 30mS error
 2de:	28 5b       	subi	r18, 0xB8	; 184
 2e0:	3b 40       	sbci	r19, 0x0B	; 11
 2e2:	08 f4       	brcc	.+2      	; 0x2e6 <get_ack+0x48>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
return status;
}
 2e6:	08 95       	ret
	PORT_OUT|=_BV(CLK);  //clk high
	PORT_DIR&=~_BV(DATA); //data in
	_delay_ms(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
		count++;
		if(count<MAX_IT) _delay_us(10);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	f1 cf       	rjmp	.-30     	; 0x2ce <get_ack+0x30>
	uint8_t status=1;
	
	PORT_OUT|=_BV(CLK);  //clk high
	PORT_DIR&=~_BV(DATA); //data in
	_delay_ms(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	ed cf       	rjmp	.-38     	; 0x2ce <get_ack+0x30>

000002f4 <get_ack2>:
// Desc: get acknoledge after sending the learn command
// Rets: ret 1 on success, 0 on error
// Date: 2008/05/19
// Modf:
//	
extern uint8_t get_ack2(void){
 2f4:	21 98       	cbi	0x04, 1	; 4
	uint8_t count=0;
	uint8_t status=1;
	
	PORT_DIR&=~_BV(DATA); //data in
	PORT_OUT|=_BV(CLK);  //clk high	
 2f6:	28 9a       	sbi	0x05, 0	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <get_ack2+0x6>
	_delay_us(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 2fe:	19 99       	sbic	0x03, 1	; 3
 300:	0b c0       	rjmp	.+22     	; 0x318 <get_ack2+0x24>
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	22 e0       	ldi	r18, 0x02	; 2
 306:	03 c0       	rjmp	.+6      	; 0x30e <get_ack2+0x1a>
		count++;
 308:	9f 5f       	subi	r25, 0xFF	; 255
		if(count<100) _delay_us(1);
 30a:	94 36       	cpi	r25, 0x64	; 100
 30c:	79 f0       	breq	.+30     	; 0x32c <get_ack2+0x38>
 30e:	82 2f       	mov	r24, r18
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <get_ack2+0x1c>
	uint8_t status=1;
	
	PORT_DIR&=~_BV(DATA); //data in
	PORT_OUT|=_BV(CLK);  //clk high	
	_delay_us(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
 314:	19 9b       	sbis	0x03, 1	; 3
 316:	f8 cf       	rjmp	.-16     	; 0x308 <get_ack2+0x14>
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	85 e8       	ldi	r24, 0x85	; 133
 31c:	98 2f       	mov	r25, r24
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <get_ack2+0x2a>
			status=0;
			break;
		};
	};
	_delay_us(50);
	PORT_OUT&=~_BV(CLK);
 322:	28 98       	cbi	0x05, 0	; 5
 324:	8a 95       	dec	r24
 326:	f1 f7       	brne	.-4      	; 0x324 <get_ack2+0x30>
	_delay_us(50);
return status;
}	
 328:	82 2f       	mov	r24, r18
 32a:	08 95       	ret
	PORT_DIR&=~_BV(DATA); //data in
	PORT_OUT|=_BV(CLK);  //clk high	
	_delay_us(1);
	while(!((PORT_IN&_BV(DATA))>>DATA)){
		count++;
		if(count<100) _delay_us(1);
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	f5 cf       	rjmp	.-22     	; 0x31a <get_ack2+0x26>

00000330 <send_octet>:
// Desc: send one byte to the device
// Rets: nothing
// Date: 2008/05/19
// Modf:
//		
extern void send_octet(uint8_t data){
 330:	21 9a       	sbi	0x04, 1	; 4
 332:	68 2f       	mov	r22, r24
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(50); //command last bit to data first bit
}

extern void send_bit(uint8_t b){
	PORT_OUT|=_BV(CLK);  //clk high
	if(b) PORT_OUT|=_BV(DATA);
 33a:	e1 e0       	ldi	r30, 0x01	; 1
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	35 e8       	ldi	r19, 0x85	; 133
 340:	0d c0       	rjmp	.+26     	; 0x35c <send_octet+0x2c>
 342:	29 9a       	sbi	0x05, 1	; 5
 344:	83 2f       	mov	r24, r19
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <send_octet+0x16>
	else PORT_OUT&=~_BV(DATA);
	_delay_us(50);
	PORT_OUT&=~_BV(CLK); //clk low
 34a:	28 98       	cbi	0x05, 0	; 5
 34c:	83 2f       	mov	r24, r19
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <send_octet+0x1e>
 352:	4f 5f       	subi	r20, 0xFF	; 255
 354:	5f 4f       	sbci	r21, 0xFF	; 255
//		
extern void send_octet(uint8_t data){
	uint8_t i;
	
	PORT_DIR|=_BV(DATA); //data output 		
	for(i=0;i<8;i++){
 356:	48 30       	cpi	r20, 0x08	; 8
 358:	51 05       	cpc	r21, r1
 35a:	a1 f0       	breq	.+40     	; 0x384 <send_octet+0x54>
	};
	_delay_us(50); //command last bit to data first bit
}

extern void send_bit(uint8_t b){
	PORT_OUT|=_BV(CLK);  //clk high
 35c:	28 9a       	sbi	0x05, 0	; 5
	if(b) PORT_OUT|=_BV(DATA);
 35e:	cf 01       	movw	r24, r30
 360:	04 2e       	mov	r0, r20
 362:	02 c0       	rjmp	.+4      	; 0x368 <send_octet+0x38>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <send_octet+0x34>
 36c:	86 23       	and	r24, r22
 36e:	97 23       	and	r25, r23
 370:	04 2e       	mov	r0, r20
 372:	02 c0       	rjmp	.+4      	; 0x378 <send_octet+0x48>
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <send_octet+0x44>
 37c:	88 23       	and	r24, r24
 37e:	09 f7       	brne	.-62     	; 0x342 <send_octet+0x12>
	else PORT_OUT&=~_BV(DATA);
 380:	29 98       	cbi	0x05, 1	; 5
 382:	e0 cf       	rjmp	.-64     	; 0x344 <send_octet+0x14>
 384:	85 e8       	ldi	r24, 0x85	; 133
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <send_octet+0x56>
	PORT_DIR|=_BV(DATA); //data output 		
	for(i=0;i<8;i++){
		send_bit((data&_BV(i))>>i);
	};
	_delay_us(50); //command last bit to data first bit
}
 38a:	08 95       	ret

0000038c <send_bit>:

extern void send_bit(uint8_t b){
 38c:	28 9a       	sbi	0x05, 0	; 5
	PORT_OUT|=_BV(CLK);  //clk high
	if(b) PORT_OUT|=_BV(DATA);
 38e:	88 23       	and	r24, r24
 390:	49 f4       	brne	.+18     	; 0x3a4 <send_bit+0x18>
	else PORT_OUT&=~_BV(DATA);
 392:	29 98       	cbi	0x05, 1	; 5
 394:	85 e8       	ldi	r24, 0x85	; 133
 396:	98 2f       	mov	r25, r24
 398:	9a 95       	dec	r25
 39a:	f1 f7       	brne	.-4      	; 0x398 <send_bit+0xc>
	_delay_us(50);
	PORT_OUT&=~_BV(CLK); //clk low
 39c:	28 98       	cbi	0x05, 0	; 5
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <send_bit+0x12>
	_delay_us(50);
}
 3a2:	08 95       	ret
	_delay_us(50); //command last bit to data first bit
}

extern void send_bit(uint8_t b){
	PORT_OUT|=_BV(CLK);  //clk high
	if(b) PORT_OUT|=_BV(DATA);
 3a4:	29 9a       	sbi	0x05, 1	; 5
 3a6:	f6 cf       	rjmp	.-20     	; 0x394 <send_bit+0x8>

000003a8 <get_bytes>:
// Desc: receive 'len' bytes from device
// Rets: nothing
// Date: 2008/05/19
// Modf:
//	
extern void get_bytes(uint8_t *buf,uint8_t len){
 3a8:	48 2f       	mov	r20, r24
	uint8_t i,j;
	uint8_t data=0;
	
	PORT_DIR&=~_BV(DATA); //data in		
 3aa:	21 98       	cbi	0x04, 1	; 4
	for(j=0;j<len;j++){	
 3ac:	66 23       	and	r22, r22
 3ae:	c1 f0       	breq	.+48     	; 0x3e0 <get_bytes+0x38>
 3b0:	9c 01       	movw	r18, r24
 3b2:	f9 01       	movw	r30, r18
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	35 e8       	ldi	r19, 0x85	; 133
 3b8:	90 e0       	ldi	r25, 0x00	; 0
		for(i=0;i<8;i++){
			PORT_OUT|=_BV(CLK);  //clk high
 3ba:	28 9a       	sbi	0x05, 0	; 5
 3bc:	83 2f       	mov	r24, r19
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <get_bytes+0x16>
			_delay_us(50);
			PORT_OUT&=~_BV(CLK); //clk low
 3c2:	28 98       	cbi	0x05, 0	; 5
			data>>=1;
 3c4:	26 95       	lsr	r18
			if((PORT_IN&_BV(DATA))>>DATA) data|=0x80;
 3c6:	19 99       	sbic	0x03, 1	; 3
 3c8:	20 68       	ori	r18, 0x80	; 128
 3ca:	83 2f       	mov	r24, r19
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <get_bytes+0x24>
	uint8_t i,j;
	uint8_t data=0;
	
	PORT_DIR&=~_BV(DATA); //data in		
	for(j=0;j<len;j++){	
		for(i=0;i<8;i++){
 3d0:	9f 5f       	subi	r25, 0xFF	; 255
 3d2:	98 30       	cpi	r25, 0x08	; 8
 3d4:	91 f7       	brne	.-28     	; 0x3ba <get_bytes+0x12>
			PORT_OUT&=~_BV(CLK); //clk low
			data>>=1;
			if((PORT_IN&_BV(DATA))>>DATA) data|=0x80;
			_delay_us(50);
		};
		*buf++=data;
 3d6:	21 93       	st	Z+, r18
extern void get_bytes(uint8_t *buf,uint8_t len){
	uint8_t i,j;
	uint8_t data=0;
	
	PORT_DIR&=~_BV(DATA); //data in		
	for(j=0;j<len;j++){	
 3d8:	8e 2f       	mov	r24, r30
 3da:	84 1b       	sub	r24, r20
 3dc:	86 17       	cp	r24, r22
 3de:	60 f3       	brcs	.-40     	; 0x3b8 <get_bytes+0x10>
 3e0:	08 95       	ret

000003e2 <prog_mem>:
// Desc: programm memory with config byte am manufacturer code
// Rets: puts usart messages
// Date: 2008/05/19
// Modf:
//	
uint8_t prog_mem(void){
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	df 93       	push	r29
 3ec:	cf 93       	push	r28
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	64 97       	sbiw	r28, 0x14	; 20
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t i;
	uint8_t status=0;
	uint8_t buffer[20];
	
	buffer[0]=0xB4; //command program
 3fe:	84 eb       	ldi	r24, 0xB4	; 180
 400:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]=0x00; //config byte
 402:	1a 82       	std	Y+2, r1	; 0x02
	buffer[2]=0xE2; //manufacturer code LSB 00 E2 AF D1 BC 59 43 21 3A
 404:	82 ee       	ldi	r24, 0xE2	; 226
 406:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3]=0xAF;
 408:	8f ea       	ldi	r24, 0xAF	; 175
 40a:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4]=0xD1;
 40c:	81 ed       	ldi	r24, 0xD1	; 209
 40e:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5]=0xBC;
 410:	8c eb       	ldi	r24, 0xBC	; 188
 412:	8e 83       	std	Y+6, r24	; 0x06
	buffer[6]=0x59;
 414:	89 e5       	ldi	r24, 0x59	; 89
 416:	8f 83       	std	Y+7, r24	; 0x07
	buffer[7]=0x43;
 418:	83 e4       	ldi	r24, 0x43	; 67
 41a:	88 87       	std	Y+8, r24	; 0x08
	buffer[8]=0x21;
 41c:	81 e2       	ldi	r24, 0x21	; 33
 41e:	89 87       	std	Y+9, r24	; 0x09
	buffer[9]=0x3A;
 420:	8a e3       	ldi	r24, 0x3A	; 58
 422:	8a 87       	std	Y+10, r24	; 0x0a

	PCICR&=~_BV(PCIE0);
 424:	80 91 68 00 	lds	r24, 0x0068
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	80 93 68 00 	sts	0x0068, r24
	if(request_command()){
 42e:	16 df       	rcall	.-468    	; 0x25c <request_command>
 430:	88 23       	and	r24, r24
 432:	69 f1       	breq	.+90     	; 0x48e <prog_mem+0xac>
 434:	8e 01       	movw	r16, r28
 436:	0f 5f       	subi	r16, 0xFF	; 255
 438:	1f 4f       	sbci	r17, 0xFF	; 255
 43a:	8b e0       	ldi	r24, 0x0B	; 11
 43c:	e8 2e       	mov	r14, r24
 43e:	f1 2c       	mov	r15, r1
 440:	ec 0e       	add	r14, r28
 442:	fd 1e       	adc	r15, r29
		//usart_puts_P("programming\n");
		for(i=0;i<10;i++){
			send_octet(buffer[i]);
 444:	f8 01       	movw	r30, r16
 446:	81 91       	ld	r24, Z+
 448:	8f 01       	movw	r16, r30
 44a:	72 df       	rcall	.-284    	; 0x330 <send_octet>
	buffer[9]=0x3A;

	PCICR&=~_BV(PCIE0);
	if(request_command()){
		//usart_puts_P("programming\n");
		for(i=0;i<10;i++){
 44c:	0e 15       	cp	r16, r14
 44e:	1f 05       	cpc	r17, r15
 450:	c9 f7       	brne	.-14     	; 0x444 <prog_mem+0x62>
			send_octet(buffer[i]);
		};
		status=get_ack();
 452:	25 df       	rcall	.-438    	; 0x29e <get_ack>
 454:	18 2f       	mov	r17, r24
		if(status){
 456:	88 23       	and	r24, r24
 458:	b1 f4       	brne	.+44     	; 0x486 <prog_mem+0xa4>
			usart_puts_P("program success.\n");
		}else usart_puts_P("not ack\n");
 45a:	8e e7       	ldi	r24, 0x7E	; 126
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	65 d2       	rcall	.+1226   	; 0x92a <usart_puts_p>
	}else usart_puts_P("no response to request\n");
	PCICR|=_BV(PCIE0);
 460:	80 91 68 00 	lds	r24, 0x0068
 464:	81 60       	ori	r24, 0x01	; 1
 466:	80 93 68 00 	sts	0x0068, r24
return status;
}
 46a:	81 2f       	mov	r24, r17
 46c:	64 96       	adiw	r28, 0x14	; 20
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	cf 91       	pop	r28
 47a:	df 91       	pop	r29
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret
		for(i=0;i<10;i++){
			send_octet(buffer[i]);
		};
		status=get_ack();
		if(status){
			usart_puts_P("program success.\n");
 486:	87 e8       	ldi	r24, 0x87	; 135
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	4f d2       	rcall	.+1182   	; 0x92a <usart_puts_p>
 48c:	e9 cf       	rjmp	.-46     	; 0x460 <prog_mem+0x7e>
		}else usart_puts_P("not ack\n");
	}else usart_puts_P("no response to request\n");
 48e:	86 e6       	ldi	r24, 0x66	; 102
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	4b d2       	rcall	.+1174   	; 0x92a <usart_puts_p>
 494:	10 e0       	ldi	r17, 0x00	; 0
 496:	e4 cf       	rjmp	.-56     	; 0x460 <prog_mem+0x7e>

00000498 <erase_all>:
// Desc: erase all transmitters in the decoder
// Rets: 0 on error, 1 on success
// Date: 2008/05/19
// Modf:
//	
uint8_t erase_all(void){
 498:	1f 93       	push	r17
 49a:	df 93       	push	r29
 49c:	cf 93       	push	r28
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <erase_all+0x8>
 4a0:	0f 92       	push	r0
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[3];
	uint8_t status=0;
	
	buffer[0]=0xC3; //erase all command
 4a6:	83 ec       	ldi	r24, 0xC3	; 195
 4a8:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]=0x00; //one dummy byte
 4aa:	1a 82       	std	Y+2, r1	; 0x02
	buffer[2]=0xAE;
 4ac:	8e ea       	ldi	r24, 0xAE	; 174
 4ae:	8b 83       	std	Y+3, r24	; 0x03
	
	PCICR&=~_BV(PCIE0); //disable interrupt
 4b0:	80 91 68 00 	lds	r24, 0x0068
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	80 93 68 00 	sts	0x0068, r24
	if(request_command()){
 4ba:	d0 de       	rcall	.-608    	; 0x25c <request_command>
 4bc:	88 23       	and	r24, r24
 4be:	f1 f0       	breq	.+60     	; 0x4fc <erase_all+0x64>
		for(uint8_t i=0;i<3;i++){
			send_octet(buffer[i]);
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	36 df       	rcall	.-404    	; 0x330 <send_octet>
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	34 df       	rcall	.-408    	; 0x330 <send_octet>
 4c8:	8e ea       	ldi	r24, 0xAE	; 174
 4ca:	32 df       	rcall	.-412    	; 0x330 <send_octet>
		};
		status=get_ack();
 4cc:	e8 de       	rcall	.-560    	; 0x29e <get_ack>
 4ce:	18 2f       	mov	r17, r24
		if(status){
 4d0:	88 23       	and	r24, r24
 4d2:	81 f4       	brne	.+32     	; 0x4f4 <erase_all+0x5c>
			usart_puts_P("all transmitters erased.\n");
		}else usart_puts_P("not ack\n");
 4d4:	81 eb       	ldi	r24, 0xB1	; 177
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	28 d2       	rcall	.+1104   	; 0x92a <usart_puts_p>
	}else usart_puts_P("no response to request\n");
	PCICR|=_BV(PCIE0);
 4da:	80 91 68 00 	lds	r24, 0x0068
 4de:	81 60       	ori	r24, 0x01	; 1
 4e0:	80 93 68 00 	sts	0x0068, r24
return status;
}
 4e4:	81 2f       	mov	r24, r17
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	cf 91       	pop	r28
 4ee:	df 91       	pop	r29
 4f0:	1f 91       	pop	r17
 4f2:	08 95       	ret
		for(uint8_t i=0;i<3;i++){
			send_octet(buffer[i]);
		};
		status=get_ack();
		if(status){
			usart_puts_P("all transmitters erased.\n");
 4f4:	8a eb       	ldi	r24, 0xBA	; 186
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	18 d2       	rcall	.+1072   	; 0x92a <usart_puts_p>
 4fa:	ef cf       	rjmp	.-34     	; 0x4da <erase_all+0x42>
		}else usart_puts_P("not ack\n");
	}else usart_puts_P("no response to request\n");
 4fc:	89 e9       	ldi	r24, 0x99	; 153
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	14 d2       	rcall	.+1064   	; 0x92a <usart_puts_p>
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	ea cf       	rjmp	.-44     	; 0x4da <erase_all+0x42>

00000506 <activate_learn>:
// Desc: activate learn command
// Rets: 0 on error, 1 on success
// Date: 2008/05/19
// Modf:
//	
uint8_t activate_learn(void){
 506:	1f 93       	push	r17
 508:	df 93       	push	r29
 50a:	cf 93       	push	r28
 50c:	00 d0       	rcall	.+0      	; 0x50e <activate_learn+0x8>
 50e:	0f 92       	push	r0
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
	uint8_t buffer[3];
	uint8_t status=0;
	
	buffer[0]=0xD2; //learn command
 514:	82 ed       	ldi	r24, 0xD2	; 210
 516:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]=0x3C; //two dummy bytes
 518:	8c e3       	ldi	r24, 0x3C	; 60
 51a:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2]=0xAE;
 51c:	8e ea       	ldi	r24, 0xAE	; 174
 51e:	8b 83       	std	Y+3, r24	; 0x03
	
	PCICR&=~_BV(PCIE0);
 520:	80 91 68 00 	lds	r24, 0x0068
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	80 93 68 00 	sts	0x0068, r24
	if(request_command()){
 52a:	98 de       	rcall	.-720    	; 0x25c <request_command>
 52c:	88 23       	and	r24, r24
 52e:	01 f1       	breq	.+64     	; 0x570 <activate_learn+0x6a>
		for(uint8_t i=0;i<3;i++){
			send_octet(buffer[i]);
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	fe de       	rcall	.-516    	; 0x330 <send_octet>
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	fc de       	rcall	.-520    	; 0x330 <send_octet>
 538:	8e ea       	ldi	r24, 0xAE	; 174
 53a:	fa de       	rcall	.-524    	; 0x330 <send_octet>
		};
		status=get_ack2();
 53c:	db de       	rcall	.-586    	; 0x2f4 <get_ack2>
 53e:	18 2f       	mov	r17, r24
		if(status){
 540:	88 23       	and	r24, r24
 542:	59 f4       	brne	.+22     	; 0x55a <activate_learn+0x54>
			usart_puts_P("learn mode entered.\n");
		}else usart_puts_P("not ack\n");
 544:	8c ee       	ldi	r24, 0xEC	; 236
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	f0 d1       	rcall	.+992    	; 0x92a <usart_puts_p>
	}else usart_puts_P("no response to request\n");
return status;
}
 54a:	81 2f       	mov	r24, r17
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	1f 91       	pop	r17
 558:	08 95       	ret
		for(uint8_t i=0;i<3;i++){
			send_octet(buffer[i]);
		};
		status=get_ack2();
		if(status){
			usart_puts_P("learn mode entered.\n");
 55a:	85 ef       	ldi	r24, 0xF5	; 245
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	e5 d1       	rcall	.+970    	; 0x92a <usart_puts_p>
		}else usart_puts_P("not ack\n");
	}else usart_puts_P("no response to request\n");
return status;
}
 560:	81 2f       	mov	r24, r17
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	cf 91       	pop	r28
 56a:	df 91       	pop	r29
 56c:	1f 91       	pop	r17
 56e:	08 95       	ret
		};
		status=get_ack2();
		if(status){
			usart_puts_P("learn mode entered.\n");
		}else usart_puts_P("not ack\n");
	}else usart_puts_P("no response to request\n");
 570:	84 ed       	ldi	r24, 0xD4	; 212
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	da d1       	rcall	.+948    	; 0x92a <usart_puts_p>
 576:	10 e0       	ldi	r17, 0x00	; 0
return status;
}
 578:	81 2f       	mov	r24, r17
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	cf 91       	pop	r28
 582:	df 91       	pop	r29
 584:	1f 91       	pop	r17
 586:	08 95       	ret

00000588 <read_learn>:
// Desc: read status byte
// Rets: 0 on error, 1 on success
// Date: 2008/05/20
// Modf:
//	
uint8_t read_learn(void){
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
	uint16_t timeout=0;
	uint8_t status=0;

	PORT_DIR&=~_BV(DATA); //data in
 58c:	21 98       	cbi	0x04, 1	; 4
	usart_puts_P("Waiting for a transmitter.\n");
 58e:	8e ee       	ldi	r24, 0xEE	; 238
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	cb d1       	rcall	.+918    	; 0x92a <usart_puts_p>
 594:	c0 e0       	ldi	r28, 0x00	; 0
 596:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 598:	20 ed       	ldi	r18, 0xD0	; 208
 59a:	37 e0       	ldi	r19, 0x07	; 7
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <read_learn+0x1e>
	do{
		_delay_ms(1);	//loop until HCS515 responds  
		timeout++;		//or until ~32 sec.expires
		if((PORT_IN&_BV(DATA))>>DATA) break;
	}while(timeout<MAX_IT);
 59e:	8d e7       	ldi	r24, 0x7D	; 125
 5a0:	c0 30       	cpi	r28, 0x00	; 0
 5a2:	d8 07       	cpc	r29, r24
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <read_learn+0x2a>
 5a6:	c9 01       	movw	r24, r18
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <read_learn+0x20>

	PORT_DIR&=~_BV(DATA); //data in
	usart_puts_P("Waiting for a transmitter.\n");
	do{
		_delay_ms(1);	//loop until HCS515 responds  
		timeout++;		//or until ~32 sec.expires
 5ac:	21 96       	adiw	r28, 0x01	; 1
		if((PORT_IN&_BV(DATA))>>DATA) break;
 5ae:	19 9b       	sbis	0x03, 1	; 3
 5b0:	f6 cf       	rjmp	.-20     	; 0x59e <read_learn+0x16>
	}while(timeout<MAX_IT);
	if(!((PORT_IN&_BV(DATA))>>DATA)){
 5b2:	19 9b       	sbis	0x03, 1	; 3
 5b4:	48 c0       	rjmp	.+144    	; 0x646 <read_learn+0xbe>
		usart_puts_P("No transmission received.\n");
		return status;
 5b6:	28 ee       	ldi	r18, 0xE8	; 232
 5b8:	33 e0       	ldi	r19, 0x03	; 3
 5ba:	48 ec       	ldi	r20, 0xC8	; 200
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	ca 01       	movw	r24, r20
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <read_learn+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c4:	21 50       	subi	r18, 0x01	; 1
 5c6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5c8:	d1 f7       	brne	.-12     	; 0x5be <read_learn+0x36>
	};
	_delay_ms(100);
	if((PORT_IN&_BV(DATA))>>DATA){
 5ca:	19 99       	sbic	0x03, 1	; 3
 5cc:	35 c0       	rjmp	.+106    	; 0x638 <read_learn+0xb0>
		usart_puts_P("Error on first transmission.\n");
		return status;
	}else{
		usart_puts_P("First transmission received. 30 seconds remaining!\n");
 5ce:	81 e8       	ldi	r24, 0x81	; 129
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	ab d1       	rcall	.+854    	; 0x92a <usart_puts_p>
 5d4:	20 ed       	ldi	r18, 0xD0	; 208
 5d6:	37 e0       	ldi	r19, 0x07	; 7
 5d8:	c9 01       	movw	r24, r18
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <read_learn+0x52>
	if(status){		//wait for second transmission
		status=0;
		do{
			_delay_ms(1);	//loop until HCS515 responds  
			timeout++;		//or until ~32 sec.expires
			if((PORT_IN&_BV(DATA))>>DATA) break;
 5de:	19 99       	sbic	0x03, 1	; 3
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <read_learn+0x64>
	};*/
	if(status){		//wait for second transmission
		status=0;
		do{
			_delay_ms(1);	//loop until HCS515 responds  
			timeout++;		//or until ~32 sec.expires
 5e2:	21 96       	adiw	r28, 0x01	; 1
			if((PORT_IN&_BV(DATA))>>DATA) break;
		}while(timeout<MAX_IT);
 5e4:	8d e7       	ldi	r24, 0x7D	; 125
 5e6:	c0 30       	cpi	r28, 0x00	; 0
 5e8:	d8 07       	cpc	r29, r24
 5ea:	b0 f3       	brcs	.-20     	; 0x5d8 <read_learn+0x50>
		if(!((PORT_IN&_BV(DATA))>>DATA)){
 5ec:	19 9b       	sbis	0x03, 1	; 3
 5ee:	39 c0       	rjmp	.+114    	; 0x662 <read_learn+0xda>
 5f0:	88 ec       	ldi	r24, 0xC8	; 200
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	fc 01       	movw	r30, r24
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <read_learn+0x6e>
			usart_puts_P("No second transmission received within 30 seconds.\n");
			return status;
		};		
		_delay_us(100);  // tcla min.50uS
		PORT_OUT|=_BV(CLK); //clk high
 5fa:	28 9a       	sbi	0x05, 0	; 5
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <read_learn+0x74>
		_delay_us(100);
		if(!((PORT_IN&_BV(DATA))>>DATA)){
 600:	19 99       	sbic	0x03, 1	; 3
 602:	28 c0       	rjmp	.+80     	; 0x654 <read_learn+0xcc>
			PORT_OUT&=~_BV(CLK);//clk low
 604:	28 98       	cbi	0x05, 0	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 606:	85 e8       	ldi	r24, 0x85	; 133
 608:	8a 95       	dec	r24
 60a:	f1 f7       	brne	.-4      	; 0x608 <read_learn+0x80>
			_delay_us(50);
			get_bytes(buffer,10);
 60c:	6a e0       	ldi	r22, 0x0A	; 10
 60e:	85 e4       	ldi	r24, 0x45	; 69
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	ca de       	rcall	.-620    	; 0x3a8 <get_bytes>
			status=1;
		}else{
			usart_puts_P("No response to CLK high.\n");
			return status;
		};
		usart_puts_P("Transmitter learned. Decoded message: ");
 614:	8c e0       	ldi	r24, 0x0C	; 12
 616:	91 e0       	ldi	r25, 0x01	; 1
 618:	88 d1       	rcall	.+784    	; 0x92a <usart_puts_p>
 61a:	c5 e4       	ldi	r28, 0x45	; 69
 61c:	d1 e0       	ldi	r29, 0x01	; 1
		for(uint8_t i=0;i<10;i++){
			usart_puthex_byte(buffer[i]);
 61e:	89 91       	ld	r24, Y+
 620:	c1 d1       	rcall	.+898    	; 0x9a4 <usart_puthex_byte>
			usart_puts_P(" ");
 622:	8a e0       	ldi	r24, 0x0A	; 10
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	81 d1       	rcall	.+770    	; 0x92a <usart_puts_p>
		}else{
			usart_puts_P("No response to CLK high.\n");
			return status;
		};
		usart_puts_P("Transmitter learned. Decoded message: ");
		for(uint8_t i=0;i<10;i++){
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	cf 34       	cpi	r28, 0x4F	; 79
 62c:	d8 07       	cpc	r29, r24
 62e:	b9 f7       	brne	.-18     	; 0x61e <read_learn+0x96>
 630:	81 e0       	ldi	r24, 0x01	; 1
			usart_puthex_byte(buffer[i]);
			usart_puts_P(" ");
		};
	}
return status;
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret
		usart_puts_P("No transmission received.\n");
		return status;
	};
	_delay_ms(100);
	if((PORT_IN&_BV(DATA))>>DATA){
		usart_puts_P("Error on first transmission.\n");
 638:	85 eb       	ldi	r24, 0xB5	; 181
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	76 d1       	rcall	.+748    	; 0x92a <usart_puts_p>
 63e:	80 e0       	ldi	r24, 0x00	; 0
			usart_puthex_byte(buffer[i]);
			usart_puts_P(" ");
		};
	}
return status;
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret
		_delay_ms(1);	//loop until HCS515 responds  
		timeout++;		//or until ~32 sec.expires
		if((PORT_IN&_BV(DATA))>>DATA) break;
	}while(timeout<MAX_IT);
	if(!((PORT_IN&_BV(DATA))>>DATA)){
		usart_puts_P("No transmission received.\n");
 646:	83 ed       	ldi	r24, 0xD3	; 211
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	6f d1       	rcall	.+734    	; 0x92a <usart_puts_p>
 64c:	80 e0       	ldi	r24, 0x00	; 0
			usart_puthex_byte(buffer[i]);
			usart_puts_P(" ");
		};
	}
return status;
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret
			PORT_OUT&=~_BV(CLK);//clk low
			_delay_us(50);
			get_bytes(buffer,10);
			status=1;
		}else{
			usart_puts_P("No response to CLK high.\n");
 654:	83 e3       	ldi	r24, 0x33	; 51
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	68 d1       	rcall	.+720    	; 0x92a <usart_puts_p>
 65a:	80 e0       	ldi	r24, 0x00	; 0
			usart_puthex_byte(buffer[i]);
			usart_puts_P(" ");
		};
	}
return status;
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret
			_delay_ms(1);	//loop until HCS515 responds  
			timeout++;		//or until ~32 sec.expires
			if((PORT_IN&_BV(DATA))>>DATA) break;
		}while(timeout<MAX_IT);
		if(!((PORT_IN&_BV(DATA))>>DATA)){
			usart_puts_P("No second transmission received within 30 seconds.\n");
 662:	8d e4       	ldi	r24, 0x4D	; 77
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	61 d1       	rcall	.+706    	; 0x92a <usart_puts_p>
 668:	80 e0       	ldi	r24, 0x00	; 0
			usart_puthex_byte(buffer[i]);
			usart_puts_P(" ");
		};
	}
return status;
}
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <main>:
	PCICR|=_BV(PCIE0);
return status;
}


int main(void){
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
	
	cli();
 678:	f8 94       	cli
	usart_init(103);
 67a:	87 e6       	ldi	r24, 0x67	; 103
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	a5 d0       	rcall	.+330    	; 0x7ca <usart_init>
	port_init();
 680:	e0 dd       	rcall	.-1088   	; 0x242 <port_init>
	set_sleep_mode(0);
 682:	83 b7       	in	r24, 0x33	; 51
 684:	81 7f       	andi	r24, 0xF1	; 241
 686:	83 bf       	out	0x33, r24	; 51
	sei();
 688:	78 94       	sei
	PCICR|=_BV(PCIE0); //enable change on pin interrupt
 68a:	80 91 68 00 	lds	r24, 0x0068
 68e:	81 60       	ori	r24, 0x01	; 1
 690:	80 93 68 00 	sts	0x0068, r24
	DDRD|=_BV(PD7);
 694:	57 9a       	sbi	0x0a, 7	; 10
	DDRD&=~_BV(PD6);
 696:	56 98       	cbi	0x0a, 6	; 10
	PORTD|=_BV(PD6);	//pull-up resistor
 698:	5e 9a       	sbi	0x0b, 6	; 11
	usart_puts_P("Power on.\n");
 69a:	8b e5       	ldi	r24, 0x5B	; 91
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	45 d1       	rcall	.+650    	; 0x92a <usart_puts_p>
 6a0:	88 e8       	ldi	r24, 0x88	; 136
 6a2:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6a4:	28 ec       	ldi	r18, 0xC8	; 200
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	31 97       	sbiw	r30, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b0:	d9 f7       	brne	.-10     	; 0x6a8 <main+0x38>
	_delay_ms(500);
	//prog_mem();
	
	status=0;
 6b2:	10 92 4f 01 	sts	0x014F, r1
 6b6:	08 ec       	ldi	r16, 0xC8	; 200
 6b8:	10 e0       	ldi	r17, 0x00	; 0
	while(1){
		PORT_DIR&=~_BV(DATA);   //data in
 6ba:	21 98       	cbi	0x04, 1	; 4
		if(PIND&_BV(PD6)){
 6bc:	4e 99       	sbic	0x09, 6	; 9
 6be:	19 c0       	rjmp	.+50     	; 0x6f2 <main+0x82>
			if(activate_learn()){
				read_learn();
				PCICR|=_BV(PCIE0);
			};
		};
		if(status){
 6c0:	80 91 4f 01 	lds	r24, 0x014F
 6c4:	88 23       	and	r24, r24
 6c6:	11 f5       	brne	.+68     	; 0x70c <main+0x9c>
			if(buffer[0]==0x88){
				if(PIND&_BV(PD7)) PORTD&=~_BV(PD7);
				else PORTD|=_BV(PD7);
			};
		};
		usart_puts_P("going to sleep.\n");
 6c8:	84 e3       	ldi	r24, 0x34	; 52
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	2e d1       	rcall	.+604    	; 0x92a <usart_puts_p>
 6ce:	24 ef       	ldi	r18, 0xF4	; 244
 6d0:	31 e0       	ldi	r19, 0x01	; 1
 6d2:	c8 01       	movw	r24, r16
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6d8:	21 50       	subi	r18, 0x01	; 1
 6da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6dc:	d1 f7       	brne	.-12     	; 0x6d2 <main+0x62>
		_delay_ms(50);
		sleep_mode();
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	81 60       	ori	r24, 0x01	; 1
 6e2:	83 bf       	out	0x33, r24	; 51
 6e4:	88 95       	sleep
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	8e 7f       	andi	r24, 0xFE	; 254
 6ea:	83 bf       	out	0x33, r24	; 51
	_delay_ms(500);
	//prog_mem();
	
	status=0;
	while(1){
		PORT_DIR&=~_BV(DATA);   //data in
 6ec:	21 98       	cbi	0x04, 1	; 4
		if(PIND&_BV(PD6)){
 6ee:	4e 9b       	sbis	0x09, 6	; 9
 6f0:	e7 cf       	rjmp	.-50     	; 0x6c0 <main+0x50>
			if(activate_learn()){
 6f2:	09 df       	rcall	.-494    	; 0x506 <activate_learn>
 6f4:	88 23       	and	r24, r24
 6f6:	21 f3       	breq	.-56     	; 0x6c0 <main+0x50>
				read_learn();
 6f8:	47 df       	rcall	.-370    	; 0x588 <read_learn>
				PCICR|=_BV(PCIE0);
 6fa:	80 91 68 00 	lds	r24, 0x0068
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	80 93 68 00 	sts	0x0068, r24
			};
		};
		if(status){
 704:	80 91 4f 01 	lds	r24, 0x014F
 708:	88 23       	and	r24, r24
 70a:	f1 f2       	breq	.-68     	; 0x6c8 <main+0x58>
			status=0;
 70c:	10 92 4f 01 	sts	0x014F, r1
			usart_puts_P("Data from decoder: ");
 710:	87 e4       	ldi	r24, 0x47	; 71
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0a d1       	rcall	.+532    	; 0x92a <usart_puts_p>
 716:	ce e4       	ldi	r28, 0x4E	; 78
 718:	d1 e0       	ldi	r29, 0x01	; 1
			for(int8_t i=9;i>=0;i--){
				usart_puthex_byte(buffer[i]);
 71a:	88 81       	ld	r24, Y
 71c:	43 d1       	rcall	.+646    	; 0x9a4 <usart_puthex_byte>
 71e:	21 97       	sbiw	r28, 0x01	; 1
			};
		};
		if(status){
			status=0;
			usart_puts_P("Data from decoder: ");
			for(int8_t i=9;i>=0;i--){
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	c4 34       	cpi	r28, 0x44	; 68
 724:	d8 07       	cpc	r29, r24
 726:	c9 f7       	brne	.-14     	; 0x71a <main+0xaa>
				usart_puthex_byte(buffer[i]);
			};
			usart_puts_P("\n");
 728:	85 e4       	ldi	r24, 0x45	; 69
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	fe d0       	rcall	.+508    	; 0x92a <usart_puts_p>
			if(buffer[0]==0x88){
 72e:	80 91 45 01 	lds	r24, 0x0145
 732:	88 38       	cpi	r24, 0x88	; 136
 734:	49 f6       	brne	.-110    	; 0x6c8 <main+0x58>
				if(PIND&_BV(PD7)) PORTD&=~_BV(PD7);
 736:	4f 99       	sbic	0x09, 7	; 9
 738:	02 c0       	rjmp	.+4      	; 0x73e <main+0xce>
				else PORTD|=_BV(PD7);
 73a:	5f 9a       	sbi	0x0b, 7	; 11
 73c:	c5 cf       	rjmp	.-118    	; 0x6c8 <main+0x58>
			for(int8_t i=9;i>=0;i--){
				usart_puthex_byte(buffer[i]);
			};
			usart_puts_P("\n");
			if(buffer[0]==0x88){
				if(PIND&_BV(PD7)) PORTD&=~_BV(PD7);
 73e:	5f 98       	cbi	0x0b, 7	; 11
 740:	c3 cf       	rjmp	.-122    	; 0x6c8 <main+0x58>

00000742 <__vector_3>:
// Desc: on PB1 change, sends acknoledge and read 10 bytes(read transmission)
// Rets: 0 on error, 1 on valid transmission
// Date: 2008/05/19
// Modf:
//	
ISR(PCINT0_vect){
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	ef 93       	push	r30
 762:	ff 93       	push	r31
	cli();
 764:	f8 94       	cli
	if((PORT_IN&_BV(DATA))>>DATA){
 766:	19 9b       	sbis	0x03, 1	; 3
 768:	0e c0       	rjmp	.+28     	; 0x786 <__vector_3+0x44>
 76a:	80 e2       	ldi	r24, 0x20	; 32
 76c:	93 e0       	ldi	r25, 0x03	; 3
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <__vector_3+0x2c>
		_delay_us(400); // tcla micro request ack 300uS (min.50uS max. 1mS)
		PORT_OUT|=_BV(CLK); //clk high (acknoledge)
 772:	28 9a       	sbi	0x05, 0	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 774:	95 e8       	ldi	r25, 0x85	; 133
 776:	89 2f       	mov	r24, r25
 778:	8a 95       	dec	r24
 77a:	f1 f7       	brne	.-4      	; 0x778 <__vector_3+0x36>
		_delay_us(50);   //wait for decoder ack (max. 4uS)
		if(!((PORT_IN&_BV(DATA))>>DATA)){
 77c:	19 9b       	sbis	0x03, 1	; 3
 77e:	15 c0       	rjmp	.+42     	; 0x7aa <__vector_3+0x68>
			_delay_us(50);
			PORT_OUT&=~_BV(CLK); //clk low
			_delay_us(200); //time to first bit
			get_bytes(buffer,10);
		}else{
			status=0;
 780:	10 92 4f 01 	sts	0x014F, r1
			PORT_OUT&=~_BV(CLK); //clk low
 784:	28 98       	cbi	0x05, 0	; 5
		};
	};
	sei();
 786:	78 94       	sei
}
 788:	ff 91       	pop	r31
 78a:	ef 91       	pop	r30
 78c:	bf 91       	pop	r27
 78e:	af 91       	pop	r26
 790:	9f 91       	pop	r25
 792:	8f 91       	pop	r24
 794:	7f 91       	pop	r23
 796:	6f 91       	pop	r22
 798:	5f 91       	pop	r21
 79a:	4f 91       	pop	r20
 79c:	3f 91       	pop	r19
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti
	if((PORT_IN&_BV(DATA))>>DATA){
		_delay_us(400); // tcla micro request ack 300uS (min.50uS max. 1mS)
		PORT_OUT|=_BV(CLK); //clk high (acknoledge)
		_delay_us(50);   //wait for decoder ack (max. 4uS)
		if(!((PORT_IN&_BV(DATA))>>DATA)){
			status=1;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	80 93 4f 01 	sts	0x014F, r24
 7b0:	89 2f       	mov	r24, r25
 7b2:	8a 95       	dec	r24
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <__vector_3+0x70>
			_delay_us(50);
			PORT_OUT&=~_BV(CLK); //clk low
 7b6:	28 98       	cbi	0x05, 0	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 7b8:	80 e9       	ldi	r24, 0x90	; 144
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	01 97       	sbiw	r24, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <__vector_3+0x7a>
			_delay_us(200); //time to first bit
			get_bytes(buffer,10);
 7c0:	6a e0       	ldi	r22, 0x0A	; 10
 7c2:	85 e4       	ldi	r24, 0x45	; 69
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	f0 dd       	rcall	.-1056   	; 0x3a8 <get_bytes>
 7c8:	de cf       	rjmp	.-68     	; 0x786 <__vector_3+0x44>

000007ca <usart_init>:
// Desc: init the USART module 
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_init(unsigned int baudrate){
 7ca:	90 93 c5 00 	sts	0x00C5, r25
	unsigned char x;

	/* Set the baud rate */
	UBRR0H=(unsigned char) (baudrate>>8);                  
	UBRR0L=(unsigned char) baudrate;
 7ce:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable UART receiver and transmitter */
	UCSR0B=_BV(RXCIE0)|_BV(RXEN0)|_BV(TXEN0);
 7d2:	88 e9       	ldi	r24, 0x98	; 152
 7d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0A=_BV(U2X0);
 7d8:	82 e0       	ldi	r24, 0x02	; 2
 7da:	80 93 c0 00 	sts	0x00C0, r24
	
	/* Set frame format: 8 data 2stop */
	//UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);    //For devices with Extended IO
	UCSR0C=_BV(UCSZ01)|_BV(UCSZ00);   //For devices without Extended IO
 7de:	86 e0       	ldi	r24, 0x06	; 6
 7e0:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Flush receive buffer */
	x = 0; 			   
	usart_rxtail = x;
 7e4:	10 92 21 01 	sts	0x0121, r1
	usart_rxhead = x;
 7e8:	10 92 20 01 	sts	0x0120, r1
	usart_txtail = x;
 7ec:	10 92 43 01 	sts	0x0143, r1
	usart_txhead = x;
 7f0:	10 92 42 01 	sts	0x0142, r1
}
 7f4:	08 95       	ret

000007f6 <__vector_18>:
// Desc: interrupt on RX
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
ISR(USART_RX_vect) {
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	ef 93       	push	r30
 808:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	unsigned char usr;
	unsigned char lastrxerror;
	
	usr=UCSR0A;
 80a:	90 91 c0 00 	lds	r25, 0x00C0
	data=UDR0;   /* Read the received data */                 
 80e:	20 91 c6 00 	lds	r18, 0x00C6
	tmphead=(usart_rxhead + 1) & USART_RX_BUFFER_MASK;	/* Calculate buffer index */
 812:	e0 91 20 01 	lds	r30, 0x0120
 816:	ef 5f       	subi	r30, 0xFF	; 255
 818:	ef 71       	andi	r30, 0x1F	; 31
	lastrxerror=(usr&(_BV(FE0)|_BV(DOR0)));
	
	if(tmphead == usart_rxtail){
 81a:	80 91 21 01 	lds	r24, 0x0121
 81e:	e8 17       	cp	r30, r24
 820:	a1 f0       	breq	.+40     	; 0x84a <__vector_18+0x54>
	unsigned char lastrxerror;
	
	usr=UCSR0A;
	data=UDR0;   /* Read the received data */                 
	tmphead=(usart_rxhead + 1) & USART_RX_BUFFER_MASK;	/* Calculate buffer index */
	lastrxerror=(usr&(_BV(FE0)|_BV(DOR0)));
 822:	89 2f       	mov	r24, r25
 824:	88 71       	andi	r24, 0x18	; 24
	
	if(tmphead == usart_rxtail){
		lastrxerror=USART_BUFFER_OVERFLOW;/* ERROR! Receive buffer overflow */
	}else{
		usart_rxhead=tmphead;      /* Store new index */
 826:	e0 93 20 01 	sts	0x0120, r30
		usart_rxbuf[tmphead]=data; /* Store received data in buffer */
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	e0 50       	subi	r30, 0x00	; 0
 82e:	ff 4f       	sbci	r31, 0xFF	; 255
 830:	20 83       	st	Z, r18
		};
	usart_lastrxerror=lastrxerror;
 832:	80 93 44 01 	sts	0x0144, r24
}
 836:	ff 91       	pop	r31
 838:	ef 91       	pop	r30
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	2f 91       	pop	r18
 840:	0f 90       	pop	r0
 842:	0f be       	out	0x3f, r0	; 63
 844:	0f 90       	pop	r0
 846:	1f 90       	pop	r1
 848:	18 95       	reti
	usr=UCSR0A;
	data=UDR0;   /* Read the received data */                 
	tmphead=(usart_rxhead + 1) & USART_RX_BUFFER_MASK;	/* Calculate buffer index */
	lastrxerror=(usr&(_BV(FE0)|_BV(DOR0)));
	
	if(tmphead == usart_rxtail){
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	f2 cf       	rjmp	.-28     	; 0x832 <__vector_18+0x3c>

0000084e <__vector_19>:
// Desc: called when the usart ready to transmit the next byte
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
ISR(USART_UDRE_vect){
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
	unsigned char tmptail;

	if(usart_txhead != usart_txtail){   	/* Check if all data is transmitted */	
 860:	90 91 42 01 	lds	r25, 0x0142
 864:	80 91 43 01 	lds	r24, 0x0143
 868:	98 17       	cp	r25, r24
 86a:	a9 f0       	breq	.+42     	; 0x896 <__vector_19+0x48>
		tmptail=(usart_txtail + 1 ) & USART_TX_BUFFER_MASK;	/* Calculate buffer index */
 86c:	e0 91 43 01 	lds	r30, 0x0143
 870:	ef 5f       	subi	r30, 0xFF	; 255
 872:	ef 71       	andi	r30, 0x1F	; 31
		usart_txtail=tmptail;      /* Store new index */
 874:	e0 93 43 01 	sts	0x0143, r30
		UDR0=usart_txbuf[tmptail];  /* Start transmition */
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	ee 5d       	subi	r30, 0xDE	; 222
 87c:	fe 4f       	sbci	r31, 0xFE	; 254
 87e:	80 81       	ld	r24, Z
 880:	80 93 c6 00 	sts	0x00C6, r24
	}
		else{
		UCSR0B &= ~_BV(UDRIE0);         /* Disable UDRE interrupt */
		};
}
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti
		tmptail=(usart_txtail + 1 ) & USART_TX_BUFFER_MASK;	/* Calculate buffer index */
		usart_txtail=tmptail;      /* Store new index */
		UDR0=usart_txbuf[tmptail];  /* Start transmition */
	}
		else{
		UCSR0B &= ~_BV(UDRIE0);         /* Disable UDRE interrupt */
 896:	80 91 c1 00 	lds	r24, 0x00C1
 89a:	8f 7d       	andi	r24, 0xDF	; 223
 89c:	80 93 c1 00 	sts	0x00C1, r24
 8a0:	f1 cf       	rjmp	.-30     	; 0x884 <__vector_19+0x36>

000008a2 <usart_getc>:
// Desc: return byte from ringbuffer 
// Rets: byte from ringbuffer
// Date: 2008/04/03
// Modf:
//
unsigned char usart_getc(void){
 8a2:	90 91 20 01 	lds	r25, 0x0120
 8a6:	80 91 21 01 	lds	r24, 0x0121
 8aa:	98 17       	cp	r25, r24
 8ac:	d1 f3       	breq	.-12     	; 0x8a2 <usart_getc>
	unsigned char tmptail;
	
	while(usart_rxhead == usart_rxtail);  /* Wait for incomming data */
	tmptail=( usart_rxtail + 1 ) & USART_RX_BUFFER_MASK;/* Calculate buffer index */	
 8ae:	e0 91 21 01 	lds	r30, 0x0121
 8b2:	ef 5f       	subi	r30, 0xFF	; 255
 8b4:	ef 71       	andi	r30, 0x1F	; 31
	usart_rxtail=tmptail;                /* Store new index */	
 8b6:	e0 93 21 01 	sts	0x0121, r30
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	e0 50       	subi	r30, 0x00	; 0
 8be:	ff 4f       	sbci	r31, 0xFF	; 255
	return usart_rxbuf[tmptail];           /* Return data */
}
 8c0:	80 81       	ld	r24, Z
 8c2:	08 95       	ret

000008c4 <usart_putc>:
// Desc: write byte to ringbuffer
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_putc(unsigned char data){
 8c4:	28 2f       	mov	r18, r24
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 8c6:	90 91 42 01 	lds	r25, 0x0142
 8ca:	9f 5f       	subi	r25, 0xFF	; 255
 8cc:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 8ce:	80 91 43 01 	lds	r24, 0x0143
 8d2:	98 17       	cp	r25, r24
 8d4:	e1 f3       	breq	.-8      	; 0x8ce <usart_putc+0xa>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 8d6:	e9 2f       	mov	r30, r25
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	ee 5d       	subi	r30, 0xDE	; 222
 8dc:	fe 4f       	sbci	r31, 0xFE	; 254
 8de:	20 83       	st	Z, r18
	usart_txhead=tmphead;                /* Store new index */
 8e0:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 8e4:	80 91 c1 00 	lds	r24, 0x00C1
 8e8:	80 62       	ori	r24, 0x20	; 32
 8ea:	80 93 c1 00 	sts	0x00C1, r24
}
 8ee:	08 95       	ret

000008f0 <usart_puts>:
// Desc: send string
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puts(const char *s){
 8f0:	dc 01       	movw	r26, r24
	while(*s){
 8f2:	2c 91       	ld	r18, X
 8f4:	22 23       	and	r18, r18
 8f6:	c1 f0       	breq	.+48     	; 0x928 <usart_puts+0x38>
		usart_putc(*s++);
 8f8:	11 96       	adiw	r26, 0x01	; 1
// Modf:
//
void usart_putc(unsigned char data){
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 8fa:	90 91 42 01 	lds	r25, 0x0142
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 902:	80 91 43 01 	lds	r24, 0x0143
 906:	98 17       	cp	r25, r24
 908:	e1 f3       	breq	.-8      	; 0x902 <usart_puts+0x12>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 90a:	e9 2f       	mov	r30, r25
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	ee 5d       	subi	r30, 0xDE	; 222
 910:	fe 4f       	sbci	r31, 0xFE	; 254
 912:	20 83       	st	Z, r18
	usart_txhead=tmphead;                /* Store new index */
 914:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 918:	80 91 c1 00 	lds	r24, 0x00C1
 91c:	80 62       	ori	r24, 0x20	; 32
 91e:	80 93 c1 00 	sts	0x00C1, r24
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puts(const char *s){
	while(*s){
 922:	2c 91       	ld	r18, X
 924:	22 23       	and	r18, r18
 926:	41 f7       	brne	.-48     	; 0x8f8 <usart_puts+0x8>
 928:	08 95       	ret

0000092a <usart_puts_p>:
// Desc: send string from flash 
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puts_p(const char *progmem_s ){
 92a:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 92c:	44 91       	lpm	r20, Z+
 92e:	44 23       	and	r20, r20
 930:	d9 f0       	breq	.+54     	; 0x968 <usart_puts_p+0x3e>
 932:	9c 01       	movw	r18, r24
 934:	2f 5f       	subi	r18, 0xFF	; 255
 936:	3f 4f       	sbci	r19, 0xFF	; 255
// Modf:
//
void usart_putc(unsigned char data){
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 938:	90 91 42 01 	lds	r25, 0x0142
 93c:	9f 5f       	subi	r25, 0xFF	; 255
 93e:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 940:	80 91 43 01 	lds	r24, 0x0143
 944:	98 17       	cp	r25, r24
 946:	e1 f3       	breq	.-8      	; 0x940 <usart_puts_p+0x16>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 948:	e9 2f       	mov	r30, r25
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	ee 5d       	subi	r30, 0xDE	; 222
 94e:	fe 4f       	sbci	r31, 0xFE	; 254
 950:	40 83       	st	Z, r20
	usart_txhead=tmphead;                /* Store new index */
 952:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 956:	80 91 c1 00 	lds	r24, 0x00C1
 95a:	80 62       	ori	r24, 0x20	; 32
 95c:	80 93 c1 00 	sts	0x00C1, r24
// Modf:
//
void usart_puts_p(const char *progmem_s ){
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 960:	f9 01       	movw	r30, r18
 962:	44 91       	lpm	r20, Z+
 964:	44 23       	and	r20, r20
 966:	31 f7       	brne	.-52     	; 0x934 <usart_puts_p+0xa>
 968:	08 95       	ret

0000096a <usart_puthex_nibble>:
// Desc: put lower nibble as hex to ASCII
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puthex_nibble(const unsigned char b){
 96a:	8f 70       	andi	r24, 0x0F	; 15
   unsigned char  c = b & 0x0f;
   
	if (c>9) c += 'A'-10;
 96c:	8a 30       	cpi	r24, 0x0A	; 10
 96e:	b8 f0       	brcs	.+46     	; 0x99e <usart_puthex_nibble+0x34>
 970:	28 2f       	mov	r18, r24
 972:	29 5c       	subi	r18, 0xC9	; 201
// Modf:
//
void usart_putc(unsigned char data){
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 974:	90 91 42 01 	lds	r25, 0x0142
 978:	9f 5f       	subi	r25, 0xFF	; 255
 97a:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 97c:	80 91 43 01 	lds	r24, 0x0143
 980:	98 17       	cp	r25, r24
 982:	e1 f3       	breq	.-8      	; 0x97c <usart_puthex_nibble+0x12>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 984:	e9 2f       	mov	r30, r25
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	ee 5d       	subi	r30, 0xDE	; 222
 98a:	fe 4f       	sbci	r31, 0xFE	; 254
 98c:	20 83       	st	Z, r18
	usart_txhead=tmphead;                /* Store new index */
 98e:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 992:	80 91 c1 00 	lds	r24, 0x00C1
 996:	80 62       	ori	r24, 0x20	; 32
 998:	80 93 c1 00 	sts	0x00C1, r24
   unsigned char  c = b & 0x0f;
   
	if (c>9) c += 'A'-10;
   else c += '0';
   usart_putc(c);
}
 99c:	08 95       	ret
//
void usart_puthex_nibble(const unsigned char b){
   unsigned char  c = b & 0x0f;
   
	if (c>9) c += 'A'-10;
   else c += '0';
 99e:	28 2f       	mov	r18, r24
 9a0:	20 5d       	subi	r18, 0xD0	; 208
 9a2:	e8 cf       	rjmp	.-48     	; 0x974 <usart_puthex_nibble+0xa>

000009a4 <usart_puthex_byte>:
// Desc: put upper and lower nibble as hex to ASCII 
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puthex_byte(const unsigned char  b){
 9a4:	38 2f       	mov	r19, r24
   usart_puthex_nibble(b>>4);
 9a6:	82 95       	swap	r24
 9a8:	8f 70       	andi	r24, 0x0F	; 15
// Modf:
//
void usart_puthex_nibble(const unsigned char b){
   unsigned char  c = b & 0x0f;
   
	if (c>9) c += 'A'-10;
 9aa:	8a 30       	cpi	r24, 0x0A	; 10
 9ac:	a0 f1       	brcs	.+104    	; 0xa16 <usart_puthex_byte+0x72>
 9ae:	28 2f       	mov	r18, r24
 9b0:	29 5c       	subi	r18, 0xC9	; 201
// Modf:
//
void usart_putc(unsigned char data){
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 9b2:	90 91 42 01 	lds	r25, 0x0142
 9b6:	9f 5f       	subi	r25, 0xFF	; 255
 9b8:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 9ba:	80 91 43 01 	lds	r24, 0x0143
 9be:	98 17       	cp	r25, r24
 9c0:	e1 f3       	breq	.-8      	; 0x9ba <usart_puthex_byte+0x16>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 9c2:	e9 2f       	mov	r30, r25
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	ee 5d       	subi	r30, 0xDE	; 222
 9c8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ca:	20 83       	st	Z, r18
	usart_txhead=tmphead;                /* Store new index */
 9cc:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 9d0:	80 91 c1 00 	lds	r24, 0x00C1
 9d4:	80 62       	ori	r24, 0x20	; 32
 9d6:	80 93 c1 00 	sts	0x00C1, r24
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puthex_nibble(const unsigned char b){
   unsigned char  c = b & 0x0f;
 9da:	83 2f       	mov	r24, r19
 9dc:	8f 70       	andi	r24, 0x0F	; 15
   
	if (c>9) c += 'A'-10;
 9de:	8a 30       	cpi	r24, 0x0A	; 10
 9e0:	b8 f0       	brcs	.+46     	; 0xa10 <usart_puthex_byte+0x6c>
 9e2:	28 2f       	mov	r18, r24
 9e4:	29 5c       	subi	r18, 0xC9	; 201
// Modf:
//
void usart_putc(unsigned char data){
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 9e6:	90 91 42 01 	lds	r25, 0x0142
 9ea:	9f 5f       	subi	r25, 0xFF	; 255
 9ec:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 9ee:	80 91 43 01 	lds	r24, 0x0143
 9f2:	98 17       	cp	r25, r24
 9f4:	e1 f3       	breq	.-8      	; 0x9ee <usart_puthex_byte+0x4a>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 9f6:	e9 2f       	mov	r30, r25
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	ee 5d       	subi	r30, 0xDE	; 222
 9fc:	fe 4f       	sbci	r31, 0xFE	; 254
 9fe:	20 83       	st	Z, r18
	usart_txhead=tmphead;                /* Store new index */
 a00:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 a04:	80 91 c1 00 	lds	r24, 0x00C1
 a08:	80 62       	ori	r24, 0x20	; 32
 a0a:	80 93 c1 00 	sts	0x00C1, r24
// Modf:
//
void usart_puthex_byte(const unsigned char  b){
   usart_puthex_nibble(b>>4);
   usart_puthex_nibble(b);
} 
 a0e:	08 95       	ret
//
void usart_puthex_nibble(const unsigned char b){
   unsigned char  c = b & 0x0f;
   
	if (c>9) c += 'A'-10;
   else c += '0';
 a10:	28 2f       	mov	r18, r24
 a12:	20 5d       	subi	r18, 0xD0	; 208
 a14:	e8 cf       	rjmp	.-48     	; 0x9e6 <usart_puthex_byte+0x42>
 a16:	28 2f       	mov	r18, r24
 a18:	20 5d       	subi	r18, 0xD0	; 208
 a1a:	cb cf       	rjmp	.-106    	; 0x9b2 <usart_puthex_byte+0xe>

00000a1c <buffer_stat>:
// Desc: receive buffer status
// Rets: 0 if buffer empty
// Date: 2008/04/03
// Modf:
//
unsigned char buffer_stat(void){
 a1c:	90 91 20 01 	lds	r25, 0x0120
 a20:	80 91 21 01 	lds	r24, 0x0121
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	98 13       	cpse	r25, r24
 a28:	21 e0       	ldi	r18, 0x01	; 1
	return(usart_rxhead != usart_rxtail); /* Return 0 (FALSE) if the receive buffer is empty */
}
 a2a:	82 2f       	mov	r24, r18
 a2c:	08 95       	ret

00000a2e <usart_puti>:
// Desc: send integer as ASCII 
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puti( const int val ){
 a2e:	df 93       	push	r29
 a30:	cf 93       	push	r28
 a32:	cd b7       	in	r28, 0x3d	; 61
 a34:	de b7       	in	r29, 0x3e	; 62
 a36:	61 97       	sbiw	r28, 0x11	; 17
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
   char buffer[sizeof(int)*8+1];
    
   usart_puts( itoa(val, buffer, 10) );
 a42:	4a e0       	ldi	r20, 0x0A	; 10
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	be 01       	movw	r22, r28
 a48:	6f 5f       	subi	r22, 0xFF	; 255
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	26 d0       	rcall	.+76     	; 0xa9a <itoa>
 a4e:	fc 01       	movw	r30, r24
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puts(const char *s){
	while(*s){
 a50:	20 81       	ld	r18, Z
 a52:	22 23       	and	r18, r18
 a54:	c9 f0       	breq	.+50     	; 0xa88 <usart_puti+0x5a>
 a56:	dc 01       	movw	r26, r24
		usart_putc(*s++);
 a58:	11 96       	adiw	r26, 0x01	; 1
// Modf:
//
void usart_putc(unsigned char data){
	unsigned char tmphead;
	
	tmphead = ( usart_txhead + 1 ) & USART_TX_BUFFER_MASK;/* Calculate buffer index */ 
 a5a:	90 91 42 01 	lds	r25, 0x0142
 a5e:	9f 5f       	subi	r25, 0xFF	; 255
 a60:	9f 71       	andi	r25, 0x1F	; 31
	while ( tmphead == usart_txtail );/* Wait for free space in buffer */
 a62:	80 91 43 01 	lds	r24, 0x0143
 a66:	98 17       	cp	r25, r24
 a68:	e1 f3       	breq	.-8      	; 0xa62 <usart_puti+0x34>
	usart_txbuf[tmphead]=data;           /* Store data in buffer */
 a6a:	e9 2f       	mov	r30, r25
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	ee 5d       	subi	r30, 0xDE	; 222
 a70:	fe 4f       	sbci	r31, 0xFE	; 254
 a72:	20 83       	st	Z, r18
	usart_txhead=tmphead;                /* Store new index */
 a74:	90 93 42 01 	sts	0x0142, r25
	UCSR0B|=_BV(UDRIE0);                    /* Enable UDRE interrupt */
 a78:	80 91 c1 00 	lds	r24, 0x00C1
 a7c:	80 62       	ori	r24, 0x20	; 32
 a7e:	80 93 c1 00 	sts	0x00C1, r24
// Rets: nothing
// Date: 2008/04/03
// Modf:
//
void usart_puts(const char *s){
	while(*s){
 a82:	2c 91       	ld	r18, X
 a84:	22 23       	and	r18, r18
 a86:	41 f7       	brne	.-48     	; 0xa58 <usart_puti+0x2a>
//
void usart_puti( const int val ){
   char buffer[sizeof(int)*8+1];
    
   usart_puts( itoa(val, buffer, 10) );
}
 a88:	61 96       	adiw	r28, 0x11	; 17
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	cf 91       	pop	r28
 a96:	df 91       	pop	r29
 a98:	08 95       	ret

00000a9a <itoa>:
 a9a:	fb 01       	movw	r30, r22
 a9c:	9f 01       	movw	r18, r30
 a9e:	e8 94       	clt
 aa0:	42 30       	cpi	r20, 0x02	; 2
 aa2:	bc f0       	brlt	.+46     	; 0xad2 <itoa+0x38>
 aa4:	45 32       	cpi	r20, 0x25	; 37
 aa6:	ac f4       	brge	.+42     	; 0xad2 <itoa+0x38>
 aa8:	4a 30       	cpi	r20, 0x0A	; 10
 aaa:	29 f4       	brne	.+10     	; 0xab6 <itoa+0x1c>
 aac:	97 fb       	bst	r25, 7
 aae:	1e f4       	brtc	.+6      	; 0xab6 <itoa+0x1c>
 ab0:	90 95       	com	r25
 ab2:	81 95       	neg	r24
 ab4:	9f 4f       	sbci	r25, 0xFF	; 255
 ab6:	64 2f       	mov	r22, r20
 ab8:	77 27       	eor	r23, r23
 aba:	1e d0       	rcall	.+60     	; 0xaf8 <__udivmodhi4>
 abc:	80 5d       	subi	r24, 0xD0	; 208
 abe:	8a 33       	cpi	r24, 0x3A	; 58
 ac0:	0c f0       	brlt	.+2      	; 0xac4 <itoa+0x2a>
 ac2:	89 5d       	subi	r24, 0xD9	; 217
 ac4:	81 93       	st	Z+, r24
 ac6:	cb 01       	movw	r24, r22
 ac8:	00 97       	sbiw	r24, 0x00	; 0
 aca:	a9 f7       	brne	.-22     	; 0xab6 <itoa+0x1c>
 acc:	16 f4       	brtc	.+4      	; 0xad2 <itoa+0x38>
 ace:	5d e2       	ldi	r21, 0x2D	; 45
 ad0:	51 93       	st	Z+, r21
 ad2:	10 82       	st	Z, r1
 ad4:	c9 01       	movw	r24, r18
 ad6:	00 c0       	rjmp	.+0      	; 0xad8 <strrev>

00000ad8 <strrev>:
 ad8:	dc 01       	movw	r26, r24
 ada:	fc 01       	movw	r30, r24
 adc:	67 2f       	mov	r22, r23
 ade:	71 91       	ld	r23, Z+
 ae0:	77 23       	and	r23, r23
 ae2:	e1 f7       	brne	.-8      	; 0xadc <strrev+0x4>
 ae4:	32 97       	sbiw	r30, 0x02	; 2
 ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <strrev+0x18>
 ae8:	7c 91       	ld	r23, X
 aea:	6d 93       	st	X+, r22
 aec:	70 83       	st	Z, r23
 aee:	62 91       	ld	r22, -Z
 af0:	ae 17       	cp	r26, r30
 af2:	bf 07       	cpc	r27, r31
 af4:	c8 f3       	brcs	.-14     	; 0xae8 <strrev+0x10>
 af6:	08 95       	ret

00000af8 <__udivmodhi4>:
 af8:	aa 1b       	sub	r26, r26
 afa:	bb 1b       	sub	r27, r27
 afc:	51 e1       	ldi	r21, 0x11	; 17
 afe:	07 c0       	rjmp	.+14     	; 0xb0e <__udivmodhi4_ep>

00000b00 <__udivmodhi4_loop>:
 b00:	aa 1f       	adc	r26, r26
 b02:	bb 1f       	adc	r27, r27
 b04:	a6 17       	cp	r26, r22
 b06:	b7 07       	cpc	r27, r23
 b08:	10 f0       	brcs	.+4      	; 0xb0e <__udivmodhi4_ep>
 b0a:	a6 1b       	sub	r26, r22
 b0c:	b7 0b       	sbc	r27, r23

00000b0e <__udivmodhi4_ep>:
 b0e:	88 1f       	adc	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	5a 95       	dec	r21
 b14:	a9 f7       	brne	.-22     	; 0xb00 <__udivmodhi4_loop>
 b16:	80 95       	com	r24
 b18:	90 95       	com	r25
 b1a:	bc 01       	movw	r22, r24
 b1c:	cd 01       	movw	r24, r26
 b1e:	08 95       	ret

00000b20 <_exit>:
 b20:	f8 94       	cli

00000b22 <__stop_program>:
 b22:	ff cf       	rjmp	.-2      	; 0xb22 <__stop_program>
