
AVRASM ver. 1.52  main.asm Thu Oct 27 14:34:15 2005


         ;CodeVisionAVR C Compiler V1.24.5 Light
         ;(C) Copyright 1998-2005 Pavel Haiduc, HP InfoTech s.r.l.
         ;http://www.hpinfotech.com
         ;e-mail:office@hpinfotech.com
         
         ;Chip type              : AT90S8515
         ;Clock frequency        : 7.372800 MHz
         ;Memory model           : Small
         ;Optimize for           : Speed
         ;(s)printf features     : int, width
         ;(s)scanf features      : int, width
         ;External SRAM size     : 0
         ;Data Stack size        : 128 byte(s)
         ;Heap size              : 0 byte(s)
         ;Promote char to int    : No
         ;char is unsigned       : Yes
         ;8 bit enums            : No
         ;Word align FLASH struct: No
         ;Automatic register allocation : On
         
          	.DEVICE AT90S8515
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU USR=0xB
          	.EQU UDR=0xC
          	.EQU SPSR=0xE
          	.EQU SPDR=0xF
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU EECR=0x1C
          	.EQU EEDR=0x1D
          	.EQU EEARL=0x1E
          	.EQU EEARH=0x1F
          	.EQU WDTCR=0x21
          	.EQU MCUCR=0x35
          	.EQU RAMPZ=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
         
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
         
          	.EQU __se_bit=0x20
          	.EQU __sm_mask=0x10
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	LDI  R30,0
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTBRM
          	LDI  R@0,LOW(@1)
          	.ENDM
         
          	.MACRO __POINTWRM
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __POINTBRMN
          	LDI  R@0,LOW(@1+@2)
          	.ENDM
         
          	.MACRO __POINTWRMN
          	LDI  R@0,LOW(@2+@3)
          	LDI  R@1,HIGH(@2+@3)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@2,@0+@1
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@2,@0+@1
          	LDS  R@3,@0+@1+1
          	.ENDM
         
          	.MACRO __GETWRZ
          	LDD  R@0,Z+@2
          	LDD  R@1,Z+@2+1
          	.ENDM
         
          	.MACRO __GETD2Z
          	LDD  R26,Z+@0
          	LDD  R27,Z+@0+1
          	LDD  R24,Z+@0+2
          	LDD  R25,Z+@0+3
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTDZ2
          	STD  Z+@0,R26
          	STD  Z+@0+1,R27
          	STD  Z+@0+2,R24
          	STD  Z+@0+3,R25
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __PUTBZR
          	STD  Z+@1,R@0
          	.ENDM
         
          	.MACRO __PUTWZR
          	STD  Z+@2,R@0
          	STD  Z+@2+1,R@1
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
         
          	.MACRO __CALL1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	RCALL __GETW1PF
          	ICALL
          	.ENDM
         
         
          	.MACRO __CALL2EN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	RCALL __EEPROMRDW
          	ICALL
          	.ENDM
         
         
          	.MACRO __GETW1STACK
          	IN   R26,SPL
          	IN   R27,SPH
          	ADIW R26,@0+1
          	LD   R30,X+
          	LD   R31,X
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RN
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RN
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RN
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	RCALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RNS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RNS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RNS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	RCALL __PUTDP1
          	.ENDM
         
         
          	.MACRO __GETB1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOV  R30,R0
          	MOV  R31,R1
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOV  R26,R0
          	MOV  R27,R1
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOV  R30,R28
          	MOV  R31,R29
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOV  R26,R28
          	MOV  R27,R29
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "main.vec"
         
         ;INTERRUPT VECTORS
000000 c14c      	RJMP __RESET
000001 c429      	RJMP _ext_int0_isr
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c17e      	RJMP _uart_rx_isr
00000a cff5      	RJMP 0x00
00000b c1b4      	RJMP _uart_tx_isr
00000c cff3      	RJMP 0x00
         
          	.INCLUDE "main.inc"
          	.DEF _rx_wr_index=R4
          	.DEF _rx_rd_index=R5
          	.DEF _rx_counter=R6
          	.DEF _tx_wr_index=R7
          	.DEF _tx_rd_index=R8
          	.DEF _tx_counter=R9
          _menuline:
          	.DB  0x20,0x41,0x29,0x39,0x32,0x30,0x30,0x20
00000d 4120
00000e 3929
00000f 3032
000010 2030
          	.DB  0x20,0x42,0x29,0x31,0x34,0x34,0x30,0x30
000011 4220
000012 3129
000013 3434
000014 3030
          	.DB  0x20,0x0,0x0,0x0,0x20,0x43,0x29,0x31
000015 0020
000016 0000
000017 4320
000018 3129
          	.DB  0x39,0x32,0x30,0x30,0x20,0x44,0x29,0x33
000019 3239
00001a 3030
00001b 4420
00001c 3329
          	.DB  0x38,0x34,0x30,0x30,0x20,0x0,0x0,0x0
00001d 3438
00001e 3030
00001f 0020
000020 0000
          	.DB  0x20,0x45,0x29,0x35,0x36,0x30,0x30,0x30
000021 4520
000022 3529
000023 3036
000024 3030
          	.DB  0x20,0x46,0x29,0x35,0x37,0x36,0x30,0x30
000025 4620
000026 3529
000027 3637
000028 3030
          	.DB  0x20,0x0,0x0,0x0,0x20,0x20,0x20,0x20
000029 0020
00002a 0000
00002b 2020
00002c 2020
          	.DB  0x20,0x47,0x29,0x31,0x31,0x35,0x32,0x30
00002d 4720
00002e 3129
00002f 3531
000030 3032
          	.DB  0x30,0x20,0x20,0x20,0x20,0x0,0x0,0x0
000031 2030
000032 2020
000033 0020
000034 0000
          	.DB  0x20,0x4D,0x29,0x20,0x4D,0x61,0x6E,0x75
000035 4d20
000036 2029
000037 614d
000038 756e
          	.DB  0x61,0x6C,0x20,0x55,0x42,0x52,0x52,0x20
000039 6c61
00003a 5520
00003b 5242
00003c 2052
          	.DB  0x20,0x0,0x0,0x0,0x5A,0x29,0x42,0x61
00003d 0020
00003e 0000
00003f 295a
000040 6142
          	.DB  0x63,0x6B,0x6C,0x69,0x67,0x68,0x20,0x6F
000041 6b63
000042 696c
000043 6867
000044 6f20
          	.DB  0x6E,0x2F,0x6F,0x66,0x66,0x0,0x0,0x0
000045 2f6e
000046 666f
000047 0066
000048 0000
          _uparrow:
          	.DB  0x4,0xE,0x1F,0x4,0x4,0x4,0x4,0x4
000049 0e04
00004a 041f
00004b 0404
00004c 0404
          _Downarrow:
          	.DB  0x4,0x4,0x4,0x4,0x4,0x1F,0xE,0x4
00004d 0404
00004e 0404
00004f 1f04
000050 040e
          _f2:
          	.DB  0x1F,0x10,0x1C,0x17,0x11,0x12,0x14,0x17
000051 101f
000052 171c
000053 1211
000054 1714
          _f3:
          	.DB  0x1F,0x10,0x1C,0x17,0x11,0x13,0x11,0x17
000055 101f
000056 171c
000057 1311
000058 1711
          _0x1D:
          	.DB  0x0
000059 0000
          _unshifted:
          	.DB  0xD,0x9,0xE,0x60,0x15,0x71,0x16,0x31
00005a 090d
00005b 600e
00005c 7115
00005d 3116
          	.DB  0x1A,0x7A,0x1B,0x73,0x1C,0x61,0x1D,0x77
00005e 7a1a
00005f 731b
000060 611c
000061 771d
          	.DB  0x1E,0x32,0x21,0x63,0x22,0x78,0x23,0x64
000062 321e
000063 6321
000064 7822
000065 6423
          	.DB  0x24,0x65,0x25,0x34,0x26,0x33,0x29,0x20
000066 6524
000067 3425
000068 3326
000069 2029
          	.DB  0x2A,0x76,0x2B,0x66,0x2C,0x74,0x2D,0x72
00006a 762a
00006b 662b
00006c 742c
00006d 722d
          	.DB  0x2E,0x35,0x31,0x6E,0x32,0x62,0x33,0x68
00006e 352e
00006f 6e31
000070 6232
000071 6833
          	.DB  0x34,0x67,0x35,0x79,0x36,0x36,0x39,0x2C
000072 6734
000073 7935
000074 3636
000075 2c39
          	.DB  0x3A,0x6D,0x3B,0x6A,0x3C,0x75,0x3D,0x37
000076 6d3a
000077 6a3b
000078 753c
000079 373d
          	.DB  0x3E,0x38,0x41,0x2C,0x42,0x6B,0x43,0x69
00007a 383e
00007b 2c41
00007c 6b42
00007d 6943
          	.DB  0x44,0x6F,0x45,0x30,0x46,0x39,0x49,0x2E
00007e 6f44
00007f 3045
000080 3946
000081 2e49
          	.DB  0x4A,0x2F,0x4B,0x6C,0x4C,0x3B,0x4D,0x70
000082 2f4a
000083 6c4b
000084 3b4c
000085 704d
          	.DB  0x4E,0x2D,0x52,0x2C,0x54,0x5B,0x55,0x3D
000086 2d4e
000087 2c52
000088 5b54
000089 3d55
          	.DB  0x5A,0xD,0x5B,0x5D,0x5D,0x5C,0x61,0x3C
00008a 0d5a
00008b 5d5b
00008c 5c5d
00008d 3c61
          	.DB  0x66,0x8,0x69,0x31,0x6B,0x34,0x6C,0x37
00008e 0866
00008f 3169
000090 346b
000091 376c
          	.DB  0x70,0x30,0x71,0x2E,0x72,0x32,0x73,0x35
000092 3070
000093 2e71
000094 3272
000095 3573
          	.DB  0x74,0x36,0x75,0x38,0x79,0x2B,0x7A,0x33
000096 3674
000097 3875
000098 2b79
000099 337a
          	.DB  0x7B,0x2D,0x7C,0x2A,0x7D,0x39
00009a 2d7b
00009b 2a7c
00009c 397d
          _shifted:
          	.DB  0xD,0x9,0xE,0x7E,0x15,0x51,0x16,0x21
00009d 090d
00009e 7e0e
00009f 5115
0000a0 2116
          	.DB  0x1A,0x5A,0x1B,0x53,0x1C,0x41,0x1D,0x57
0000a1 5a1a
0000a2 531b
0000a3 411c
0000a4 571d
          	.DB  0x1E,0x40,0x21,0x43,0x22,0x58,0x23,0x44
0000a5 401e
0000a6 4321
0000a7 5822
0000a8 4423
          	.DB  0x24,0x45,0x25,0x24,0x26,0x23,0x29,0x20
0000a9 4524
0000aa 2425
0000ab 2326
0000ac 2029
          	.DB  0x2A,0x56,0x2B,0x46,0x2C,0x54,0x2D,0x52
0000ad 562a
0000ae 462b
0000af 542c
0000b0 522d
          	.DB  0x2E,0x25,0x31,0x4E,0x32,0x42,0x33,0x48
0000b1 252e
0000b2 4e31
0000b3 4232
0000b4 4833
          	.DB  0x34,0x47,0x35,0x59,0x36,0x5E,0x39,0x4C
0000b5 4734
0000b6 5935
0000b7 5e36
0000b8 4c39
          	.DB  0x3A,0x4D,0x3B,0x4A,0x3C,0x55,0x3D,0x26
0000b9 4d3a
0000ba 4a3b
0000bb 553c
0000bc 263d
          	.DB  0x3E,0x2A,0x41,0x3C,0x42,0x4B,0x43,0x49
0000bd 2a3e
0000be 3c41
0000bf 4b42
0000c0 4943
          	.DB  0x44,0x4F,0x45,0x29,0x46,0x28,0x49,0x3E
0000c1 4f44
0000c2 2945
0000c3 2846
0000c4 3e49
          	.DB  0x4A,0x3F,0x4B,0x4C,0x4C,0x3A,0x4D,0x50
0000c5 3f4a
0000c6 4c4b
0000c7 3a4c
0000c8 504d
          	.DB  0x4E,0x5F,0x52,0x22,0x54,0x7B,0x55,0x2B
0000c9 5f4e
0000ca 2252
0000cb 7b54
0000cc 2b55
          	.DB  0x5A,0xD,0x5B,0x7D,0x5D,0x7C,0x61,0x3E
0000cd 0d5a
0000ce 7d5b
0000cf 7c5d
0000d0 3e61
          	.DB  0x66,0x8,0x69,0x31,0x6B,0x34,0x6C,0x37
0000d1 0866
0000d2 3169
0000d3 346b
0000d4 376c
          	.DB  0x70,0x30,0x71,0x2E,0x72,0x32,0x73,0x35
0000d5 3070
0000d6 2e71
0000d7 3272
0000d8 3573
          	.DB  0x74,0x36,0x75,0x38,0x79,0x2B,0x7A,0x33
0000d9 3674
0000da 3875
0000db 2b79
0000dc 337a
          	.DB  0x7B,0x2D,0x7C,0x2A,0x7D,0x39
0000dd 2d7b
0000de 2a7c
0000df 397d
          	.DEF _edge=R10
          	.DEF _bitcount=R11
          	.DEF _inpt=R12
          	.DEF _buffcnt=R14
          _248:
          	.DB  0x80,0xC0
0000e0 c080
          _tbl10_G8:
          	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
0000e1 2710
0000e2 03e8
0000e3 0064
0000e4 000a
          	.DB  0x1,0x0
0000e5 0001
          _tbl16_G8:
          	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
0000e6 1000
0000e7 0100
0000e8 0010
0000e9 0001
          _0:
          	.DB  0x20,0x20,0x57,0x45,0x4C,0x43,0x4F,0x4D
0000ea 2020
0000eb 4557
0000ec 434c
0000ed 4d4f
          	.DB  0x45,0x20,0x54,0x4F,0x20,0x44,0x41,0x4E
0000ee 2045
0000ef 4f54
0000f0 4420
0000f1 4e41
          	.DB  0x53,0x0,0x20,0x20,0x20,0x4C,0x43,0x44
0000f2 0053
0000f3 2020
0000f4 4c20
0000f5 4443
          	.DB  0x20,0x54,0x45,0x52,0x4D,0x49,0x4E,0x41
0000f6 5420
0000f7 5245
0000f8 494d
0000f9 414e
          	.DB  0x4C,0x0,0x20,0x50,0x6C,0x45,0x41,0x53
0000fa 004c
0000fb 5020
0000fc 456c
0000fd 5341
          	.DB  0x45,0x20,0x45,0x4E,0x54,0x45,0x52,0x20
0000fe 2045
0000ff 4e45
000100 4554
000101 2052
          	.DB  0x54,0x48,0x45,0x0,0x20,0x20,0x48,0x45
000102 4854
000103 0045
000104 2020
000105 4548
          	.DB  0x58,0x20,0x55,0x42,0x52,0x52,0x20,0x55
000106 2058
000107 4255
000108 5252
000109 5520
          	.DB  0x20,0x57,0x41,0x4E,0x54,0x0,0x20,0x20
00010a 5720
00010b 4e41
00010c 0054
00010d 2020
          	.DB  0x55,0x42,0x52,0x52,0x3D,0x30,0x78,0x0
00010e 4255
00010f 5252
000110 303d
000111 0078
          	.DB  0x20,0x59,0x4F,0x55,0x20,0x48,0x41,0x56
000112 5920
000113 554f
000114 4820
000115 5641
          	.DB  0x45,0x20,0x45,0x4E,0x54,0x45,0x52,0x45
000116 2045
000117 4e45
000118 4554
000119 4552
          	.DB  0x44,0x0,0x20,0x27,0x30,0x78,0x0,0x27
00011a 0044
00011b 2720
00011c 7830
00011d 2700
          	.DB  0x20,0x50,0x52,0x45,0x53,0x53,0x20,0x45
00011e 5020
00011f 4552
000120 5353
000121 4520
          	.DB  0x4E,0x54,0x45,0x52,0x0,0x20,0x54,0x4F
000122 544e
000123 5245
000124 2000
000125 4f54
          	.DB  0x20,0x55,0x53,0x45,0x20,0x54,0x48,0x49
000126 5520
000127 4553
000128 5420
000129 4948
          	.DB  0x53,0x20,0x55,0x42,0x52,0x52,0x0,0x20
00012a 2053
00012b 4255
00012c 5252
00012d 2000
          	.DB  0x4F,0x52,0x20,0x46,0x35,0x20,0x54,0x4F
00012e 524f
00012f 4620
000130 2035
000131 4f54
          	.DB  0x20,0x52,0x45,0x2D,0x45,0x4E,0x54,0x45
000132 5220
000133 2d45
000134 4e45
000135 4554
          	.DB  0x52,0x0,0x25,0x69,0x0
000136 0052
000137 6925
000138 0000
         
         ;DATA STACK END MARKER INITIALIZATION
          __DSTACK_END:
          	.DB  'D','S','T','A','C','K','E','N','D',0
000139 5344
00013a 4154
00013b 4b43
00013c 4e45
00013d 0044
         
         ;HARDWARE STACK END MARKER INITIALIZATION
          __HSTACK_END:
          	.DB  'H','S','T','A','C','K','E','N','D',0
00013e 5348
00013f 4154
000140 4b43
000141 4e45
000142 0044
         
          __GLOBAL_INI_TBL:
          	.DW  0x09
000143 0009
          	.DW  0x60
000144 0060
          	.DW  __DSTACK_END*2
000145 0272
         
          	.DW  0x09
000146 0009
          	.DW  0x23C
000147 023c
          	.DW  __HSTACK_END*2
000148 027c
         
          	.DW  0x02
000149 0002
          	.DW  __base_y_G7
00014a 0235
          	.DW  _248*2
00014b 01c0
         
          	.DW  0
00014c 0000
         
          __RESET:
00014d 94f8      	CLI
00014e 27ee      	CLR  R30
00014f bbec      	OUT  EECR,R30
000150 bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
000151 e1f8      	LDI  R31,0x18
000152 bdf1      	OUT  WDTCR,R31
000153 bde1      	OUT  WDTCR,R30
         
         ;CLEAR R2-R14
000154 e08d      	LDI  R24,13
000155 e0a2      	LDI  R26,2
000156 27bb      	CLR  R27
          __CLEAR_REG:
000157 93ed      	ST   X+,R30
000158 958a      	DEC  R24
000159 f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
00015a e080      	LDI  R24,LOW(0x200)
00015b e092      	LDI  R25,HIGH(0x200)
00015c e6a0      	LDI  R26,0x60
          __CLEAR_SRAM:
00015d 93ed      	ST   X+,R30
00015e 9701      	SBIW R24,1
00015f f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
000160 e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000161 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
000162 95c8      	LPM
000163 9631      	ADIW R30,1
000164 2d80      	MOV  R24,R0
000165 95c8      	LPM
000166 9631      	ADIW R30,1
000167 2d90      	MOV  R25,R0
000168 9700      	SBIW R24,0
000169 f0b9      	BREQ __GLOBAL_INI_END
00016a 95c8      	LPM
00016b 9631      	ADIW R30,1
00016c 2da0      	MOV  R26,R0
00016d 95c8      	LPM
00016e 9631      	ADIW R30,1
00016f 2db0      	MOV  R27,R0
000170 95c8      	LPM
000171 9631      	ADIW R30,1
000172 2c10      	MOV  R1,R0
000173 95c8      	LPM
000174 9631      	ADIW R30,1
000175 2f6e      	MOV  R22,R30
000176 2f7f      	MOV  R23,R31
000177 2df0      	MOV  R31,R0
000178 2de1      	MOV  R30,R1
          __GLOBAL_INI_LOOP:
000179 95c8      	LPM
00017a 9631      	ADIW R30,1
00017b 920d      	ST   X+,R0
00017c 9701      	SBIW R24,1
00017d f7d9      	BRNE __GLOBAL_INI_LOOP
00017e 2fe6      	MOV  R30,R22
00017f 2ff7      	MOV  R31,R23
000180 cfe1      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;STACK POINTER INITIALIZATION
000181 e5ef      	LDI  R30,LOW(0x25F)
000182 bfed      	OUT  SPL,R30
000183 e0e2      	LDI  R30,HIGH(0x25F)
000184 bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
000185 eec0      	LDI  R28,LOW(0xE0)
000186 e0d0      	LDI  R29,HIGH(0xE0)
         
000187 c08a      	RJMP _main
         
          	.ESEG
          	.ORG 0
         
          	.DSEG
          	.ORG 0xE0
         ;       1 // Remember to include avr313.xcl as your linker file. (Modified for AT90S8515)
         ;       2 
         ;       3 //#include <pgmspace.h>
         ;       4 //#include <stdio.h>
         ;       5 //#include <stdlib.h>
         ;       6 #include <90s8515.h>
         ;       7 #include <delay.h>
         ;       8 
         ;       9 //#include "serial.h"
         ;      10 #include "gpr.h"
         ;      11 #include "kb.h"
         ;      12 //#include "capture.h"
         ;      13 // Alphanumeric LCD Module functions
         ;      14 #asm
         ;      15    .equ __lcd_port=0x18 ;PORTB  
             .equ __lcd_port=0x18 ;PORTB  
         ;      16 #endasm
         ;      17 #include <lcd.h>
         ;      18 
         ;      19 #define backlight PORTD.5
         ;      20 #define RXB8 1
         ;      21 #define TXB8 0
         ;      22 #define OVR 3
         ;      23 #define FE 4
         ;      24 #define UDRE 5
         ;      25 #define RXC 7
         ;      26 
         ;      27 #define FRAMING_ERROR (1<<FE)
         ;      28 #define DATA_OVERRUN (1<<OVR)
         ;      29 #define DATA_REGISTER_EMPTY (1<<UDRE)
         ;      30 #define RX_COMPLETE (1<<RXC)
         ;      31 
         ;      32 // UART Receiver buffer
         ;      33 #define RX_BUFFER_SIZE 96
         ;      34 char rx_buffer[RX_BUFFER_SIZE];
          _rx_buffer:
0000e0      	.BYTE 0x60
         ;      35 
         ;      36 #if RX_BUFFER_SIZE<256
         ;      37 unsigned char rx_wr_index,rx_rd_index,rx_counter;
         ;      38 #else
         ;      39 unsigned int rx_wr_index,rx_rd_index,rx_counter;
         ;      40 #endif
         ;      41 
         ;      42 // This flag is set on UART Receiver buffer overflow
         ;      43 bit rx_buffer_overflow;
         ;      44 
         ;      45 // UART Receiver interrupt service routine
         ;      46 interrupt [UART_RXC] void uart_rx_isr(void)
         ;      47 {
         
          	.CSEG
          _uart_rx_isr:
000188 93aa      	ST   -Y,R26
000189 93ba      	ST   -Y,R27
00018a 93ea      	ST   -Y,R30
00018b b7ef      	IN   R30,SREG
00018c 93ea      	ST   -Y,R30
         ;      48 char status,data;
         ;      49 status=USR;
00018d dd7d      	RCALL __SAVELOCR2
         ;	status -> R16
         ;	data -> R17
00018e b10b      	IN   R16,11
         ;      50 data=UDR;
00018f b11c      	IN   R17,12
         ;      51 if ((status & (FRAMING_ERROR | DATA_OVERRUN))==0)
000190 2fe0      	MOV  R30,R16
000191 71e8      	ANDI R30,LOW(0x18)
000192 f489      	BRNE _0x3
         ;      52    {
         ;      53    rx_buffer[rx_wr_index]=data;
000193 2da4      	MOV  R26,R4
000194 e0b0      	LDI  R27,0
000195 52a0      	SUBI R26,LOW(-_rx_buffer)
000196 4fbf      	SBCI R27,HIGH(-_rx_buffer)
000197 931c      	ST   X,R17
         ;      54    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000198 9443      	INC  R4
000199 e6e0      	LDI  R30,LOW(96)
00019a 15e4      	CP   R30,R4
00019b f409      	BRNE _0x4
00019c 2444      	CLR  R4
         ;      55    if (++rx_counter == RX_BUFFER_SIZE)
          _0x4:
00019d 9463      	INC  R6
00019e e6e0      	LDI  R30,LOW(96)
00019f 15e6      	CP   R30,R6
0001a0 f419      	BRNE _0x5
         ;      56       {
         ;      57       rx_counter=0;
0001a1 2466      	CLR  R6
         ;      58       rx_buffer_overflow=1;
0001a2 9468      	SET
0001a3 f820      	BLD  R2,0
         ;      59       };
          _0x5:
         ;      60    };
          _0x3:
         ;      61 }
0001a4 dd70      	RCALL __LOADLOCR2P
0001a5 91e9      	LD   R30,Y+
0001a6 bfef      	OUT  SREG,R30
0001a7 91e9      	LD   R30,Y+
0001a8 91b9      	LD   R27,Y+
0001a9 91a9      	LD   R26,Y+
0001aa 9518      	RETI
         ;      62 
         ;      63 #ifndef _DEBUG_TERMINAL_IO_
         ;      64 // Get a character from the UART Receiver buffer
         ;      65 #define _ALTERNATE_GETCHAR_
         ;      66 #pragma used+
         ;      67 char getchar(void)
         ;      68 {
          _getchar:
         ;      69 char data;
         ;      70 //while (rx_counter==0);
         ;      71 if(rx_counter!=0)
0001ab 930a      	ST   -Y,R16
         ;	data -> R16
0001ac 2066      	TST  R6
0001ad f079      	BREQ _0x6
         ;      72 {
         ;      73 data=rx_buffer[rx_rd_index];
0001ae 2de5      	MOV  R30,R5
0001af e0f0      	LDI  R31,0
0001b0 52e0      	SUBI R30,LOW(-_rx_buffer)
0001b1 4fff      	SBCI R31,HIGH(-_rx_buffer)
0001b2 8100      	LD   R16,Z
         ;      74 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0001b3 9453      	INC  R5
0001b4 e6e0      	LDI  R30,LOW(96)
0001b5 15e5      	CP   R30,R5
0001b6 f409      	BRNE _0x7
0001b7 2455      	CLR  R5
         ;      75 #asm("cli")
          _0x7:
0001b8 94f8      	cli
         ;      76 --rx_counter;
0001b9 946a      	DEC  R6
         ;      77 #asm("sei")
0001ba 9478      	sei
         ;      78 return data;
0001bb 2fe0      	MOV  R30,R16
0001bc c001      	RJMP _0x15A
         ;      79 }
         ;      80 else
          _0x6:
         ;      81 return 0;
0001bd e0e0      	LDI  R30,LOW(0)
         ;      82 }
          _0x15A:
0001be 9109      	LD   R16,Y+
0001bf 9508      	RET
         ;      83 #pragma used-
         ;      84 #endif
         ;      85 
         ;      86 // UART Transmitter buffer
         ;      87 #define TX_BUFFER_SIZE 8
         ;      88 char tx_buffer[TX_BUFFER_SIZE];
         
          	.DSEG
          _tx_buffer:
000140      	.BYTE 0x8
         ;      89 
         ;      90 #if TX_BUFFER_SIZE<256
         ;      91 unsigned char tx_wr_index,tx_rd_index,tx_counter;
         ;      92 #else
         ;      93 unsigned int tx_wr_index,tx_rd_index,tx_counter;
         ;      94 #endif
         ;      95 
         ;      96 // UART Transmitter interrupt service routine
         ;      97 interrupt [UART_TXC] void uart_tx_isr(void)
         ;      98 {
         
          	.CSEG
          _uart_tx_isr:
0001c0 93ea      	ST   -Y,R30
0001c1 93fa      	ST   -Y,R31
0001c2 b7ef      	IN   R30,SREG
0001c3 93ea      	ST   -Y,R30
         ;      99 if (tx_counter)
0001c4 2099      	TST  R9
0001c5 f061      	BREQ _0x9
         ;     100    {
         ;     101    --tx_counter;
0001c6 949a      	DEC  R9
         ;     102    UDR=tx_buffer[tx_rd_index];
0001c7 2de8      	MOV  R30,R8
0001c8 e0f0      	LDI  R31,0
0001c9 5ce0      	SUBI R30,LOW(-_tx_buffer)
0001ca 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0001cb 81e0      	LD   R30,Z
0001cc b9ec      	OUT  0xC,R30
         ;     103    if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0001cd 9483      	INC  R8
0001ce e0e8      	LDI  R30,LOW(8)
0001cf 15e8      	CP   R30,R8
0001d0 f409      	BRNE _0xA
0001d1 2488      	CLR  R8
         ;     104    };
          _0xA:
          _0x9:
         ;     105 }
0001d2 91e9      	LD   R30,Y+
0001d3 bfef      	OUT  SREG,R30
0001d4 91f9      	LD   R31,Y+
0001d5 91e9      	LD   R30,Y+
0001d6 9518      	RETI
         ;     106 
         ;     107 #ifndef _DEBUG_TERMINAL_IO_
         ;     108 // Write a character to the UART Transmitter buffer
         ;     109 #define _ALTERNATE_PUTCHAR_
         ;     110 #pragma used+
         ;     111 void putchar(char c)
         ;     112 {
          _putchar:
         ;     113 while (tx_counter == TX_BUFFER_SIZE);
          _0xB:
0001d7 e0e8      	LDI  R30,LOW(8)
0001d8 15e9      	CP   R30,R9
0001d9 f3e9      	BREQ _0xB
         ;     114 #asm("cli")
0001da 94f8      	cli
         ;     115 if (tx_counter || ((USR & DATA_REGISTER_EMPTY)==0))
0001db 2099      	TST  R9
0001dc f411      	BRNE _0xF
0001dd 995d      	SBIC 0xB,5
0001de c00d      	RJMP _0xE
          _0xF:
         ;     116    {
         ;     117    tx_buffer[tx_wr_index]=c;
0001df 2de7      	MOV  R30,R7
0001e0 e0f0      	LDI  R31,0
0001e1 5ce0      	SUBI R30,LOW(-_tx_buffer)
0001e2 4ffe      	SBCI R31,HIGH(-_tx_buffer)
0001e3 81a8      	LD   R26,Y
0001e4 83a0      	STD  Z+0,R26
         ;     118    if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
0001e5 9473      	INC  R7
0001e6 e0e8      	LDI  R30,LOW(8)
0001e7 15e7      	CP   R30,R7
0001e8 f409      	BRNE _0x11
0001e9 2477      	CLR  R7
         ;     119    ++tx_counter;
          _0x11:
0001ea 9493      	INC  R9
         ;     120    }
         ;     121 else
0001eb c002      	RJMP _0x12
          _0xE:
         ;     122    UDR=c;
0001ec 81e8      	LD   R30,Y
0001ed b9ec      	OUT  0xC,R30
         ;     123 #asm("sei")
          _0x12:
0001ee 9478      	sei
         ;     124 }
0001ef c398      	RJMP _0x158
         ;     125 #pragma used-
         ;     126 #endif
         ;     127 
         ;     128 // Standard Input/Output functions
         ;     129 #include <stdio.h>
         ;     130 #include <stdlib.h>
         ;     131  
         ;     132 flash unsigned char menuline[6][20]={
         ;     133 " A)9200  B)14400 ",
         ;     134 " C)19200 D)38400 ",
         ;     135 " E)56000 F)57600 ",
         ;     136 "     G)115200    ",
         ;     137 " M) Manual UBRR  ",
         ;     138 "Z)Backligh on/off"};
         ;     139  
         ;     140 flash unsigned char  uparrow[8]={
         ;     141 0b0000100,
         ;     142 0b0001110,
         ;     143 0b0011111,
         ;     144 0b0000100,
         ;     145 0b0000100,
         ;     146 0b0000100,
         ;     147 0b0000100,
         ;     148 0b0000100};
         ;     149 
         ;     150 flash unsigned char  Downarrow[8]={
         ;     151 0b0000100,
         ;     152 0b0000100,
         ;     153 0b0000100,
         ;     154 0b0000100,
         ;     155 0b0000100,
         ;     156 0b0011111,
         ;     157 0b0001110,
         ;     158 0b0000100};
         ;     159 
         ;     160 flash unsigned char  f2[8]={
         ;     161 0b0011111,
         ;     162 0b0010000,
         ;     163 0b0011100,
         ;     164 0b0010111,
         ;     165 0b0010001,
         ;     166 0b0010010,
         ;     167 0b0010100,
         ;     168 0b0010111}; 
         ;     169 
         ;     170 flash unsigned char  f3[8]={
         ;     171 0b0011111,
         ;     172 0b0010000,
         ;     173 0b0011100,
         ;     174 0b0010111,
         ;     175 0b0010001,
         ;     176 0b0010011,
         ;     177 0b0010001,
         ;     178 0b0010111};
         ;     179 
         ;     180 
         ;     181 
         ;     182 void define_char(unsigned char flash *pc,unsigned char char_code)
         ;     183 {
          _define_char:
         ;     184 unsigned int i1,a1;
         ;     185 a1=(char_code<<3) | 0x40;
0001f0 dd18      	RCALL __SAVELOCR4
         ;	*pc -> Y+5
         ;	char_code -> Y+4
         ;	i1 -> R16,R17
         ;	a1 -> R18,R19
0001f1 81ec      	LDD  R30,Y+4
0001f2 dd10      	RCALL __LSLB3
0001f3 64e0      	ORI  R30,0x40
0001f4 e0f0      	LDI  R31,0
0001f5   +  	__PUTW1R 18,19
         ;     186 for (i1=0; i1<8; i1++) lcd_write_byte(a1++,*pc++);
0001f7   +  	__GETWRN 16,17,0
          _0x14:
0001f9   +  	__CPWRN 16,17,8
0001fc f490      	BRSH _0x15
0001fd   +  	__GETW1R 18,19
0001ff   +  	__ADDWRN 18,19,1
000201 93ea      	ST   -Y,R30
000202 81ee      	LDD  R30,Y+6
000203 81ff      	LDD  R31,Y+6+1
000204 9631      	ADIW R30,1
000205 83ee      	STD  Y+6,R30
000206 83ff      	STD  Y+6+1,R31
000207 9731      	SBIW R30,1
000208 95c8      	LPM
000209 2de0      	MOV  R30,R0
00020a 93ea      	ST   -Y,R30
00020b da5a      	RCALL _lcd_write_byte
         ;     187 }
00020c   +  	__ADDWRN 16,17,1
00020e cfea      	RJMP _0x14
          _0x15:
00020f dd00      	RCALL __LOADLOCR4
000210 9627      	ADIW R28,7
000211 9508      	RET
         ;     188 
         ;     189 
         ;     190 
         ;     191 void menu (void);                     
         ;     192 int comunicate (void);
         ;     193 void cap_init(void);
         ;     194 void low_level_init(void);
         ;     195 void do_states (char);
         ;     196 void main(void)
         ;     197 
         ;     198 { 
          _main:
         ;     199 
         ;     200 int display;
         ;     201 PORTD=0x00;
         ;	display -> R16,R17
000212 e0e0      	LDI  R30,LOW(0)
000213 bbe2      	OUT  0x12,R30
         ;     202 DDRD=0x20;
000214 e2e0      	LDI  R30,LOW(32)
000215 bbe1      	OUT  0x11,R30
         ;     203 
         ;     204 
         ;     205 
         ;     206      
         ;     207     low_level_init();
000216 d3a0      	RCALL _low_level_init
         ;     208     lcd_init(20);
000217 e1e4      	LDI  R30,LOW(20)
000218 93ea      	ST   -Y,R30
000219 dad6      	RCALL _lcd_init
         ;     209     _lcd_ready();
00021a da24      	RCALL __lcd_ready
         ;     210     _lcd_write_data(0xf);
00021b e0ef      	LDI  R30,LOW(15)
00021c 93ea      	ST   -Y,R30
00021d da3a      	RCALL __lcd_write_data
         ;     211     
         ;     212     
         ;     213     
         ;     214    // init_uart();    // Initializes the UART transmit buffer
         ;     215     init_kb();        // Initialize keyboard reception
00021e d1fb      	RCALL _init_kb
         ;     216     cap_init();
00021f d39f      	RCALL _cap_init
         ;     217    
         ;     218         
         ;     219     menu();
000220 d00e      	RCALL _menu
         ;     220     while(1)
          _0x16:
         ;     221     {   
         ;     222         
         ;     223              
         ;     224         display=1;
000221   +  	__GETWRN 16,17,1
         ;     225         while(display==1) 
          _0x19:
000223 e0e1      	LDI  R30,LOW(1)
000224 e0f0      	LDI  R31,HIGH(1)
000225 17e0      	CP   R30,R16
000226 07f1      	CPC  R31,R17
000227 f421      	BRNE _0x1B
         ;     226         {   
         ;     227                 
         ;     228                 display=comunicate();
000228 d9da      	RCALL _comunicate
000229   +  	__PUTW1R 16,17
         ;     229         }
00022b cff7      	RJMP _0x19
          _0x1B:
         ;     230         menu();
00022c d002      	RCALL _menu
         ;     231         
         ;     232     }
00022d cff3      	RJMP _0x16
         ;     233 }
          _0x1C:
00022e cfff      	RJMP _0x1C
         ;     234      
         ;     235 void menu (void)
         ;     236 
         ;     237 { 
          _menu:
         ;     238         //backlight=0;
         ;     239         char  key1,out,i,i1,i2,h1,h2,loop=0;
         ;     240         out=1;
00022f 9722      	SBIW R28,2
000230 e081      	LDI  R24,1
000231 e0a0      	LDI  R26,LOW(0)
000232 e0b0      	LDI  R27,HIGH(0)
000233 ebe2      	LDI  R30,LOW(_0x1D*2)
000234 e0f0      	LDI  R31,HIGH(_0x1D*2)
000235 dce2      	RCALL __INITLOCB
000236 dcd0      	RCALL __SAVELOCR6
         ;	key1 -> R16
         ;	out -> R17
         ;	i -> R18
         ;	i1 -> R19
         ;	i2 -> R20
         ;	h1 -> R21
         ;	h2 -> Y+7
         ;	loop -> Y+6
000237 e011      	LDI  R17,LOW(1)
         ;     241         i=2;
000238 e022      	LDI  R18,LOW(2)
         ;     242         define_char(uparrow,0);
000239 e9e2      	LDI  R30,LOW(_uparrow*2)
00023a e0f0      	LDI  R31,HIGH(_uparrow*2)
00023b 93fa      	ST   -Y,R31
00023c 93ea      	ST   -Y,R30
00023d e0e0      	LDI  R30,LOW(0)
00023e 93ea      	ST   -Y,R30
00023f dfb0      	RCALL _define_char
         ;     243         define_char(f2,1);
000240 eae2      	LDI  R30,LOW(_f2*2)
000241 e0f0      	LDI  R31,HIGH(_f2*2)
000242 93fa      	ST   -Y,R31
000243 93ea      	ST   -Y,R30
000244 e0e1      	LDI  R30,LOW(1)
000245 93ea      	ST   -Y,R30
000246 dfa9      	RCALL _define_char
         ;     244         define_char(f3,2);
000247 eaea      	LDI  R30,LOW(_f3*2)
000248 e0f0      	LDI  R31,HIGH(_f3*2)
000249 93fa      	ST   -Y,R31
00024a 93ea      	ST   -Y,R30
00024b e0e2      	LDI  R30,LOW(2)
00024c 93ea      	ST   -Y,R30
00024d dfa2      	RCALL _define_char
         ;     245         define_char(Downarrow,3);
00024e e9ea      	LDI  R30,LOW(_Downarrow*2)
00024f e0f0      	LDI  R31,HIGH(_Downarrow*2)
000250 93fa      	ST   -Y,R31
000251 93ea      	ST   -Y,R30
000252 e0e3      	LDI  R30,LOW(3)
000253 93ea      	ST   -Y,R30
000254 df9b      	RCALL _define_char
         ;     246         
         ;     247 
         ;     248         
         ;     249         lcd_clear();
000255 da3c      	RCALL _lcd_clear
         ;     250         lcd_putchar(0);
000256 e0e0      	LDI  R30,LOW(0)
000257 93ea      	ST   -Y,R30
000258 da4b      	RCALL _lcd_putchar
         ;     251         lcd_putsf("  WELCOME TO DANS");
000259   +  	__POINTW1FN _0,0
00025b 93fa      	ST   -Y,R31
00025c 93ea      	ST   -Y,R30
00025d da77      	RCALL _lcd_putsf
         ;     252         lcd_gotoxy(0,1);
00025e e0e0      	LDI  R30,LOW(0)
00025f 93ea      	ST   -Y,R30
000260 e0e1      	LDI  R30,LOW(1)
000261 93ea      	ST   -Y,R30
000262 da1d      	RCALL _lcd_gotoxy
         ;     253         lcd_putchar(1);
000263 e0e1      	LDI  R30,LOW(1)
000264 93ea      	ST   -Y,R30
000265 da3e      	RCALL _lcd_putchar
         ;     254         lcd_putsf("   LCD TERMINAL");
000266   +  	__POINTW1FN _0,18
000268 93fa      	ST   -Y,R31
000269 93ea      	ST   -Y,R30
00026a da6a      	RCALL _lcd_putsf
         ;     255         lcd_gotoxy(0,2);
00026b e0e0      	LDI  R30,LOW(0)
00026c 93ea      	ST   -Y,R30
00026d e0e2      	LDI  R30,LOW(2)
00026e 93ea      	ST   -Y,R30
00026f da10      	RCALL _lcd_gotoxy
         ;     256         lcd_putchar(2);
000270 e0e2      	LDI  R30,LOW(2)
000271 93ea      	ST   -Y,R30
000272 da31      	RCALL _lcd_putchar
         ;     257         lcd_putsf( menuline[i]);      
000273 e1aa      	LDI  R26,LOW(_menuline*2)
000274 e0b0      	LDI  R27,HIGH(_menuline*2)
000275 2fe2      	MOV  R30,R18
000276 e0f0      	LDI  R31,0
000277 93bf      	PUSH R27
000278 93af      	PUSH R26
000279 e1a4      	LDI  R26,LOW(20)
00027a e0b0      	LDI  R27,HIGH(20)
00027b dc63      	RCALL __MULW12U
00027c 91af      	POP  R26
00027d 91bf      	POP  R27
00027e 0fea      	ADD  R30,R26
00027f 1ffb      	ADC  R31,R27
000280 93fa      	ST   -Y,R31
000281 93ea      	ST   -Y,R30
000282 da52      	RCALL _lcd_putsf
         ;     258         lcd_gotoxy(0,3);
000283 e0e0      	LDI  R30,LOW(0)
000284 93ea      	ST   -Y,R30
000285 e0e3      	LDI  R30,LOW(3)
000286 93ea      	ST   -Y,R30
000287 d9f8      	RCALL _lcd_gotoxy
         ;     259         lcd_putchar(3);
000288 e0e3      	LDI  R30,LOW(3)
000289 93ea      	ST   -Y,R30
00028a da19      	RCALL _lcd_putchar
         ;     260         i++;
00028b 5f2f      	SUBI R18,-1
         ;     261         lcd_putsf( menuline[i]);
00028c e1aa      	LDI  R26,LOW(_menuline*2)
00028d e0b0      	LDI  R27,HIGH(_menuline*2)
00028e 2fe2      	MOV  R30,R18
00028f e0f0      	LDI  R31,0
000290 93bf      	PUSH R27
000291 93af      	PUSH R26
000292 e1a4      	LDI  R26,LOW(20)
000293 e0b0      	LDI  R27,HIGH(20)
000294 dc4a      	RCALL __MULW12U
000295 91af      	POP  R26
000296 91bf      	POP  R27
000297 0fea      	ADD  R30,R26
000298 1ffb      	ADC  R31,R27
000299 93fa      	ST   -Y,R31
00029a 93ea      	ST   -Y,R30
00029b da39      	RCALL _lcd_putsf
         ;     262         _lcd_ready();
00029c d9a2      	RCALL __lcd_ready
         ;     263        _lcd_write_data(0xc);
00029d e0ec      	LDI  R30,LOW(12)
00029e 93ea      	ST   -Y,R30
00029f d9b8      	RCALL __lcd_write_data
         ;     264         while (out==1)
          _0x1E:
0002a0 3011      	CPI  R17,1
0002a1 f009      	BREQ PC+2
0002a2 c0b4      	RJMP _0x20
         ;     265         {
         ;     266                 key1=getchar_kb();
0002a3 d2e6      	RCALL _getchar_kb
0002a4 2f0e      	MOV  R16,R30
         ;     267                 while (key1==0)
          _0x21:
0002a5 3000      	CPI  R16,0
0002a6 f419      	BRNE _0x23
         ;     268                 {         
         ;     269                 key1=getchar_kb();
0002a7 d2e2      	RCALL _getchar_kb
0002a8 2f0e      	MOV  R16,R30
         ;     270                 }
0002a9 cffb      	RJMP _0x21
          _0x23:
         ;     271         
         ;     272         
         ;     273                 switch (key1)
0002aa 2fe0      	MOV  R30,R16
         ;     274                 {
         ;     275                         case 'a':
0002ab 36e1      	CPI  R30,LOW(0x61)
0002ac f421      	BRNE _0x27
         ;     276                         UBRR=0x2f;          // 9600bps @ 3.6864 MHz
0002ad e2ef      	LDI  R30,LOW(47)
0002ae b9e9      	OUT  0x9,R30
         ;     277                         out=0;
0002af e010      	LDI  R17,LOW(0)
         ;     278                         break;
0002b0 c0a5      	RJMP _0x26
         ;     279                 
         ;     280                         case 'b':
          _0x27:
0002b1 36e2      	CPI  R30,LOW(0x62)
0002b2 f421      	BRNE _0x28
         ;     281                         UBRR=0x1F;          // 14400bps @ 3.6864 MHz
0002b3 e1ef      	LDI  R30,LOW(31)
0002b4 b9e9      	OUT  0x9,R30
         ;     282                         out=0;
0002b5 e010      	LDI  R17,LOW(0)
         ;     283                         break;
0002b6 c09f      	RJMP _0x26
         ;     284                 
         ;     285                         case 'c':
          _0x28:
0002b7 36e3      	CPI  R30,LOW(0x63)
0002b8 f421      	BRNE _0x29
         ;     286                         UBRR=0x17;          //19200 @ 3.6864 MHz
0002b9 e1e7      	LDI  R30,LOW(23)
0002ba b9e9      	OUT  0x9,R30
         ;     287                         out=0;
0002bb e010      	LDI  R17,LOW(0)
         ;     288                         break;
0002bc c099      	RJMP _0x26
         ;     289                 
         ;     290                         case 'd':
          _0x29:
0002bd 36e4      	CPI  R30,LOW(0x64)
0002be f421      	BRNE _0x2A
         ;     291                         UBRR=0x0b;
0002bf e0eb      	LDI  R30,LOW(11)
0002c0 b9e9      	OUT  0x9,R30
         ;     292                         out=0;
0002c1 e010      	LDI  R17,LOW(0)
         ;     293                         break;
0002c2 c093      	RJMP _0x26
         ;     294                 
         ;     295                         case 'e':
          _0x2A:
0002c3 36e5      	CPI  R30,LOW(0x65)
0002c4 f421      	BRNE _0x2B
         ;     296                         UBRR=0x07;
0002c5 e0e7      	LDI  R30,LOW(7)
0002c6 b9e9      	OUT  0x9,R30
         ;     297                         out=0;
0002c7 e010      	LDI  R17,LOW(0)
         ;     298                         break;
0002c8 c08d      	RJMP _0x26
         ;     299                 
         ;     300                         case 'f':
          _0x2B:
0002c9 36e6      	CPI  R30,LOW(0x66)
0002ca f421      	BRNE _0x2C
         ;     301                         UBRR=0x07;
0002cb e0e7      	LDI  R30,LOW(7)
0002cc b9e9      	OUT  0x9,R30
         ;     302                         out=0;
0002cd e010      	LDI  R17,LOW(0)
         ;     303                         break;
0002ce c087      	RJMP _0x26
         ;     304                 
         ;     305                         case 'g':
          _0x2C:
0002cf 36e7      	CPI  R30,LOW(0x67)
0002d0 f421      	BRNE _0x2D
         ;     306                         UBRR=0x03;
0002d1 e0e3      	LDI  R30,LOW(3)
0002d2 b9e9      	OUT  0x9,R30
         ;     307                         out=0;
0002d3 e010      	LDI  R17,LOW(0)
         ;     308                         break;
0002d4 c081      	RJMP _0x26
         ;     309                 
         ;     310                        
         ;     311                 
         ;     312                         case 0xff:
          _0x2D:
0002d5 3fef      	CPI  R30,LOW(0xFF)
0002d6 f5b1      	BRNE _0x2E
         ;     313                         key1=0;
0002d7 e000      	LDI  R16,LOW(0)
         ;     314                                 if (i-1>0)
0002d8 2fa2      	MOV  R26,R18
0002d9 50a1      	SUBI R26,LOW(1)
0002da e0e0      	LDI  R30,LOW(0)
0002db 17ea      	CP   R30,R26
0002dc f570      	BRSH _0x2F
         ;     315                                 {
         ;     316                                         i--;
0002dd 5021      	SUBI R18,1
         ;     317                                         i--;
0002de 5021      	SUBI R18,1
         ;     318                                         lcd_gotoxy(1,2);
0002df e0e1      	LDI  R30,LOW(1)
0002e0 93ea      	ST   -Y,R30
0002e1 e0e2      	LDI  R30,LOW(2)
0002e2 93ea      	ST   -Y,R30
0002e3 d99c      	RCALL _lcd_gotoxy
         ;     319                                         lcd_putsf( menuline[i]);
0002e4 e1aa      	LDI  R26,LOW(_menuline*2)
0002e5 e0b0      	LDI  R27,HIGH(_menuline*2)
0002e6 2fe2      	MOV  R30,R18
0002e7 e0f0      	LDI  R31,0
0002e8 93bf      	PUSH R27
0002e9 93af      	PUSH R26
0002ea e1a4      	LDI  R26,LOW(20)
0002eb e0b0      	LDI  R27,HIGH(20)
0002ec dbf2      	RCALL __MULW12U
0002ed 91af      	POP  R26
0002ee 91bf      	POP  R27
0002ef 0fea      	ADD  R30,R26
0002f0 1ffb      	ADC  R31,R27
0002f1 93fa      	ST   -Y,R31
0002f2 93ea      	ST   -Y,R30
0002f3 d9e1      	RCALL _lcd_putsf
         ;     320                                         i++;
0002f4 5f2f      	SUBI R18,-1
         ;     321                                         lcd_gotoxy(1,3);
0002f5 e0e1      	LDI  R30,LOW(1)
0002f6 93ea      	ST   -Y,R30
0002f7 e0e3      	LDI  R30,LOW(3)
0002f8 93ea      	ST   -Y,R30
0002f9 d986      	RCALL _lcd_gotoxy
         ;     322                                         lcd_putsf( menuline[i]);
0002fa e1aa      	LDI  R26,LOW(_menuline*2)
0002fb e0b0      	LDI  R27,HIGH(_menuline*2)
0002fc 2fe2      	MOV  R30,R18
0002fd e0f0      	LDI  R31,0
0002fe 93bf      	PUSH R27
0002ff 93af      	PUSH R26
000300 e1a4      	LDI  R26,LOW(20)
000301 e0b0      	LDI  R27,HIGH(20)
000302 dbdc      	RCALL __MULW12U
000303 91af      	POP  R26
000304 91bf      	POP  R27
000305 0fea      	ADD  R30,R26
000306 1ffb      	ADC  R31,R27
000307 93fa      	ST   -Y,R31
000308 93ea      	ST   -Y,R30
000309 d9cb      	RCALL _lcd_putsf
         ;     323                                         break;
00030a c04b      	RJMP _0x26
         ;     324                                 }
         ;     325                                 else
          _0x2F:
         ;     326                                  break;
00030b c04a      	RJMP _0x26
         ;     327                         
         ;     328                                 
         ;     329                 
         ;     330                 
         ;     331                 
         ;     332                         case 0xfe:
00030c c002      	RJMP _0x31
          _0x2E:
00030d 3fee      	CPI  R30,LOW(0xFE)
00030e f589      	BRNE _0x32
          _0x31:
         ;     333                         key1=0;
00030f e000      	LDI  R16,LOW(0)
         ;     334                                 if (i<7)
000310 3027      	CPI  R18,7
000311 f560      	BRSH _0x33
         ;     335                                 {
         ;     336                                         
         ;     337                                         
         ;     338                                         lcd_gotoxy(1,2);
000312 e0e1      	LDI  R30,LOW(1)
000313 93ea      	ST   -Y,R30
000314 e0e2      	LDI  R30,LOW(2)
000315 93ea      	ST   -Y,R30
000316 d969      	RCALL _lcd_gotoxy
         ;     339                                         lcd_putsf( menuline[i]);
000317 e1aa      	LDI  R26,LOW(_menuline*2)
000318 e0b0      	LDI  R27,HIGH(_menuline*2)
000319 2fe2      	MOV  R30,R18
00031a e0f0      	LDI  R31,0
00031b 93bf      	PUSH R27
00031c 93af      	PUSH R26
00031d e1a4      	LDI  R26,LOW(20)
00031e e0b0      	LDI  R27,HIGH(20)
00031f dbbf      	RCALL __MULW12U
000320 91af      	POP  R26
000321 91bf      	POP  R27
000322 0fea      	ADD  R30,R26
000323 1ffb      	ADC  R31,R27
000324 93fa      	ST   -Y,R31
000325 93ea      	ST   -Y,R30
000326 d9ae      	RCALL _lcd_putsf
         ;     340                                         i++;
000327 5f2f      	SUBI R18,-1
         ;     341                                         lcd_gotoxy(1,3);
000328 e0e1      	LDI  R30,LOW(1)
000329 93ea      	ST   -Y,R30
00032a e0e3      	LDI  R30,LOW(3)
00032b 93ea      	ST   -Y,R30
00032c d953      	RCALL _lcd_gotoxy
         ;     342                                         lcd_putsf( menuline[i]);
00032d e1aa      	LDI  R26,LOW(_menuline*2)
00032e e0b0      	LDI  R27,HIGH(_menuline*2)
00032f 2fe2      	MOV  R30,R18
000330 e0f0      	LDI  R31,0
000331 93bf      	PUSH R27
000332 93af      	PUSH R26
000333 e1a4      	LDI  R26,LOW(20)
000334 e0b0      	LDI  R27,HIGH(20)
000335 dba9      	RCALL __MULW12U
000336 91af      	POP  R26
000337 91bf      	POP  R27
000338 0fea      	ADD  R30,R26
000339 1ffb      	ADC  R31,R27
00033a 93fa      	ST   -Y,R31
00033b 93ea      	ST   -Y,R30
00033c d998      	RCALL _lcd_putsf
         ;     343                                         break;
00033d c018      	RJMP _0x26
         ;     344                                 }
         ;     345                                 else
          _0x33:
         ;     346                                  break;
00033e c017      	RJMP _0x26
         ;     347                         
         ;     348                 
         ;     349                         break;
00033f c016      	RJMP _0x26
         ;     350                 
         ;     351                         case 0:
          _0x32:
000340 30e0      	CPI  R30,0
000341 f411      	BRNE _0x35
         ;     352                         out=1;
000342 e011      	LDI  R17,LOW(1)
         ;     353                         break;
000343 c012      	RJMP _0x26
         ;     354                         
         ;     355                         case 'm':
          _0x35:
000344 36ed      	CPI  R30,LOW(0x6D)
000345 f431      	BRNE _0x36
         ;     356                         out=2;
000346 e012      	LDI  R17,LOW(2)
         ;     357                         loop=0;
000347 e0e0      	LDI  R30,LOW(0)
000348 83ee      	STD  Y+6,R30
         ;     358                         UBRR=0x17;
000349 e1e7      	LDI  R30,LOW(23)
00034a b9e9      	OUT  0x9,R30
         ;     359                         break;
00034b c00a      	RJMP _0x26
         ;     360                                  
         ;     361                         case 'z':
          _0x36:
00034c 37ea      	CPI  R30,LOW(0x7A)
00034d f439      	BRNE _0x38
         ;     362                        backlight=!backlight;
00034e 94e8      	CLT
00034f 9b95      	SBIS 0x12,5
000350 9468      	SET
000351 b3a2      	IN   R26,0x12
000352 f9a5      	BLD  R26,5
000353 bba2      	OUT  0x12,R26
         ;     363                         break;
000354 c001      	RJMP _0x26
         ;     364                 
         ;     365                         default:
          _0x38:
         ;     366                         out=1;
000355 e011      	LDI  R17,LOW(1)
         ;     367                         break;
         ;     368                 }
          _0x26:
         ;     369         }       
000356 cf49      	RJMP _0x1E
          _0x20:
         ;     370         lcd_clear();
000357 d93a      	RCALL _lcd_clear
         ;     371         if(out==0)
000358 3010      	CPI  R17,0
000359 f409      	BRNE _0x39
         ;     372         return;
00035a c0a2      	RJMP _0x159
         ;     373         else
          _0x39:
         ;     374         { 
         ;     375                 if(out==2)
00035b 3012      	CPI  R17,2
00035c f009      	BREQ PC+2
00035d c09f      	RJMP _0x3B
         ;     376                 
         ;     377                 {
         ;     378                 while(loop!=1)
          _0x3C:
00035e 81ae      	LDD  R26,Y+6
00035f 30a1      	CPI  R26,LOW(0x1)
000360 f409      	BRNE PC+2
000361 c09b      	RJMP _0x3E
         ;     379                 {
         ;     380                         lcd_clear();
000362 d92f      	RCALL _lcd_clear
         ;     381                         lcd_putchar(0);
000363 e0e0      	LDI  R30,LOW(0)
000364 93ea      	ST   -Y,R30
000365 d93e      	RCALL _lcd_putchar
         ;     382                         lcd_putsf(" PlEASE ENTER THE");
000366   +  	__POINTW1FN _0,34
000368 93fa      	ST   -Y,R31
000369 93ea      	ST   -Y,R30
00036a d96a      	RCALL _lcd_putsf
         ;     383                         lcd_gotoxy(0,1);
00036b e0e0      	LDI  R30,LOW(0)
00036c 93ea      	ST   -Y,R30
00036d e0e1      	LDI  R30,LOW(1)
00036e 93ea      	ST   -Y,R30
00036f d910      	RCALL _lcd_gotoxy
         ;     384                         lcd_putchar(1);
000370 e0e1      	LDI  R30,LOW(1)
000371 93ea      	ST   -Y,R30
000372 d931      	RCALL _lcd_putchar
         ;     385                         lcd_putsf("  HEX UBRR U WANT");
000373   +  	__POINTW1FN _0,52
000375 93fa      	ST   -Y,R31
000376 93ea      	ST   -Y,R30
000377 d95d      	RCALL _lcd_putsf
         ;     386                         lcd_gotoxy(0,2);
000378 e0e0      	LDI  R30,LOW(0)
000379 93ea      	ST   -Y,R30
00037a e0e2      	LDI  R30,LOW(2)
00037b 93ea      	ST   -Y,R30
00037c d903      	RCALL _lcd_gotoxy
         ;     387                         lcd_putchar(2);      
00037d e0e2      	LDI  R30,LOW(2)
00037e 93ea      	ST   -Y,R30
00037f d924      	RCALL _lcd_putchar
         ;     388                         lcd_gotoxy(0,3);
000380 e0e0      	LDI  R30,LOW(0)
000381 93ea      	ST   -Y,R30
000382 e0e3      	LDI  R30,LOW(3)
000383 93ea      	ST   -Y,R30
000384 d8fb      	RCALL _lcd_gotoxy
         ;     389                         lcd_putchar(3);
000385 e0e3      	LDI  R30,LOW(3)
000386 93ea      	ST   -Y,R30
000387 d91c      	RCALL _lcd_putchar
         ;     390                         lcd_putsf("  UBRR=0x" );
000388   +  	__POINTW1FN _0,70
00038a 93fa      	ST   -Y,R31
00038b 93ea      	ST   -Y,R30
00038c d948      	RCALL _lcd_putsf
         ;     391                         _lcd_ready();
00038d d8b1      	RCALL __lcd_ready
         ;     392                         _lcd_write_data(0xf);
00038e e0ef      	LDI  R30,LOW(15)
00038f 93ea      	ST   -Y,R30
000390 d8c7      	RCALL __lcd_write_data
         ;     393                         key1=getchar_kb();
000391 d1f8      	RCALL _getchar_kb
000392 2f0e      	MOV  R16,R30
         ;     394                         while (key1==0)
          _0x3F:
000393 3000      	CPI  R16,0
000394 f419      	BRNE _0x41
         ;     395                         {         
         ;     396                         key1=getchar_kb();
000395 d1f4      	RCALL _getchar_kb
000396 2f0e      	MOV  R16,R30
         ;     397                         }
000397 cffb      	RJMP _0x3F
          _0x41:
         ;     398                         lcd_putchar(key1);
000398 930a      	ST   -Y,R16
000399 d90a      	RCALL _lcd_putchar
         ;     399                         i1=key1;
00039a 2f30      	MOV  R19,R16
         ;     400                         key1=0;
00039b e000      	LDI  R16,LOW(0)
         ;     401                         while (key1==0)
          _0x42:
00039c 3000      	CPI  R16,0
00039d f419      	BRNE _0x44
         ;     402                         {         
         ;     403                         key1=getchar_kb();
00039e d1eb      	RCALL _getchar_kb
00039f 2f0e      	MOV  R16,R30
         ;     404                         }
0003a0 cffb      	RJMP _0x42
          _0x44:
         ;     405                         lcd_putchar(key1);
0003a1 930a      	ST   -Y,R16
0003a2 d901      	RCALL _lcd_putchar
         ;     406                         i2=key1;
0003a3 2f40      	MOV  R20,R16
         ;     407                         lcd_clear();
0003a4 d8ed      	RCALL _lcd_clear
         ;     408                         lcd_putchar(0);
0003a5 e0e0      	LDI  R30,LOW(0)
0003a6 93ea      	ST   -Y,R30
0003a7 d8fc      	RCALL _lcd_putchar
         ;     409                         lcd_putsf(" YOU HAVE ENTERED");
0003a8   +  	__POINTW1FN _0,80
0003aa 93fa      	ST   -Y,R31
0003ab 93ea      	ST   -Y,R30
0003ac d928      	RCALL _lcd_putsf
         ;     410                         lcd_gotoxy(0,1);
0003ad e0e0      	LDI  R30,LOW(0)
0003ae 93ea      	ST   -Y,R30
0003af e0e1      	LDI  R30,LOW(1)
0003b0 93ea      	ST   -Y,R30
0003b1 d8ce      	RCALL _lcd_gotoxy
         ;     411                         lcd_putchar(1);
0003b2 e0e1      	LDI  R30,LOW(1)
0003b3 93ea      	ST   -Y,R30
0003b4 d8ef      	RCALL _lcd_putchar
         ;     412                         lcd_putsf(" '0x");
0003b5   +  	__POINTW1FN _0,98
0003b7 93fa      	ST   -Y,R31
0003b8 93ea      	ST   -Y,R30
0003b9 d91b      	RCALL _lcd_putsf
         ;     413                         lcd_putchar(i1);
0003ba 933a      	ST   -Y,R19
0003bb d8e8      	RCALL _lcd_putchar
         ;     414                         lcd_putchar(i2);
0003bc 934a      	ST   -Y,R20
0003bd d8e6      	RCALL _lcd_putchar
         ;     415                         lcd_putsf("' PRESS ENTER");
0003be   +  	__POINTW1FN _0,103
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 d912      	RCALL _lcd_putsf
         ;     416                         lcd_gotoxy(0,2);
0003c3 e0e0      	LDI  R30,LOW(0)
0003c4 93ea      	ST   -Y,R30
0003c5 e0e2      	LDI  R30,LOW(2)
0003c6 93ea      	ST   -Y,R30
0003c7 d8b8      	RCALL _lcd_gotoxy
         ;     417                         lcd_putchar(2);
0003c8 e0e2      	LDI  R30,LOW(2)
0003c9 93ea      	ST   -Y,R30
0003ca d8d9      	RCALL _lcd_putchar
         ;     418                         lcd_putsf(" TO USE THIS UBRR");      
0003cb   +  	__POINTW1FN _0,117
0003cd 93fa      	ST   -Y,R31
0003ce 93ea      	ST   -Y,R30
0003cf d905      	RCALL _lcd_putsf
         ;     419                         lcd_gotoxy(0,3);
0003d0 e0e0      	LDI  R30,LOW(0)
0003d1 93ea      	ST   -Y,R30
0003d2 e0e3      	LDI  R30,LOW(3)
0003d3 93ea      	ST   -Y,R30
0003d4 d8ab      	RCALL _lcd_gotoxy
         ;     420                         lcd_putchar(3);
0003d5 e0e3      	LDI  R30,LOW(3)
0003d6 93ea      	ST   -Y,R30
0003d7 d8cc      	RCALL _lcd_putchar
         ;     421                         lcd_putsf(" OR F5 TO RE-ENTER");
0003d8   +  	__POINTW1FN _0,135
0003da 93fa      	ST   -Y,R31
0003db 93ea      	ST   -Y,R30
0003dc d8f8      	RCALL _lcd_putsf
         ;     422                         _lcd_ready();
0003dd d861      	RCALL __lcd_ready
         ;     423                         _lcd_write_data(0xc);
0003de e0ec      	LDI  R30,LOW(12)
0003df 93ea      	ST   -Y,R30
0003e0 d877      	RCALL __lcd_write_data
         ;     424                         while (key1!=0xfd)
          _0x45:
0003e1 3f0d      	CPI  R16,253
0003e2 f0c9      	BREQ _0x47
         ;     425                         {
         ;     426                         if(key1==0x0d)
0003e3 300d      	CPI  R16,13
0003e4 f4a1      	BRNE _0x48
         ;     427                         {       
         ;     428                                 h1=i1-0x30;
0003e5 2fe3      	MOV  R30,R19
0003e6 53e0      	SUBI R30,LOW(48)
0003e7 2f5e      	MOV  R21,R30
         ;     429                                 h2=i2-0x30;
0003e8 2fe4      	MOV  R30,R20
0003e9 53e0      	SUBI R30,LOW(48)
0003ea 83ef      	STD  Y+7,R30
         ;     430                                 i1=h1*16;
0003eb 2fe5      	MOV  R30,R21
0003ec 95e2      	SWAP R30
0003ed 7fe0      	ANDI R30,0xF0
0003ee 2f3e      	MOV  R19,R30
         ;     431                                 h1=i1+h2; 
0003ef 81ef      	LDD  R30,Y+7
0003f0 0fe3      	ADD  R30,R19
0003f1 2f5e      	MOV  R21,R30
         ;     432                                 UBRR=0x17;
0003f2 e1e7      	LDI  R30,LOW(23)
0003f3 b9e9      	OUT  0x9,R30
         ;     433                                 loop=1;
0003f4 e0e1      	LDI  R30,LOW(1)
0003f5 83ee      	STD  Y+6,R30
         ;     434                                 lcd_clear();
0003f6 d89b      	RCALL _lcd_clear
         ;     435                                 i=0;
0003f7 e020      	LDI  R18,LOW(0)
         ;     436                                 return;
0003f8 c004      	RJMP _0x159
         ;     437                         }         
         ;     438                         key1=getchar_kb();
          _0x48:
0003f9 d190      	RCALL _getchar_kb
0003fa 2f0e      	MOV  R16,R30
         ;     439                         }
0003fb cfe5      	RJMP _0x45
          _0x47:
         ;     440                         
         ;     441                         }
0003fc cf61      	RJMP _0x3C
          _0x3E:
         ;     442                         
         ;     443                         
         ;     444                 }
         ;     445                     
         ;     446         }
          _0x3B:
         ;     447         
         ;     448         
         ;     449         
         ;     450         
         ;     451         
         ;     452 } 
          _0x159:
0003fd db10      	RCALL __LOADLOCR6
0003fe 9628      	ADIW R28,8
0003ff 9508      	RET
         ;     453 
         ;     454 #include "gpr.h"
         ;     455 
         ;     456 void print_hexbyte(unsigned char i)
         ;     457 {
          _print_hexbyte:
         ;     458     unsigned char h, l;
         ;     459     
         ;     460     h = i & 0xF0;               // High nibble
000400 db0a      	RCALL __SAVELOCR2
         ;	i -> Y+2
         ;	h -> R16
         ;	l -> R17
000401 81ea      	LDD  R30,Y+2
000402 7fe0      	ANDI R30,LOW(0xF0)
000403 2f0e      	MOV  R16,R30
         ;     461     h = h>>4;
000404 9502      	SWAP R16
000405 700f      	ANDI R16,0xF
         ;     462     h = h + '0';
000406 5d00      	SUBI R16,-LOW(48)
         ;     463     
         ;     464     if (h > '9')
000407 e3e9      	LDI  R30,LOW(57)
000408 17e0      	CP   R30,R16
000409 f408      	BRSH _0x49
         ;     465         h = h + 7;
00040a 5f09      	SUBI R16,-LOW(7)
         ;     466 
         ;     467     l = (i & 0x0F)+'0';         // Low nibble
          _0x49:
00040b 81ea      	LDD  R30,Y+2
00040c 70ef      	ANDI R30,LOW(0xF)
00040d 5de0      	SUBI R30,-LOW(48)
00040e 2f1e      	MOV  R17,R30
         ;     468     if (l > '9')
00040f e3e9      	LDI  R30,LOW(57)
000410 17e1      	CP   R30,R17
000411 f408      	BRSH _0x4A
         ;     469         l = l + 7;
000412 5f19      	SUBI R17,-LOW(7)
         ;     470 
         ;     471 
         ;     472     putchar(h);
          _0x4A:
000413 930a      	ST   -Y,R16
000414 ddc2      	RCALL _putchar
         ;     473     putchar(l);
000415 931a      	ST   -Y,R17
000416 ddc0      	RCALL _putchar
         ;     474 }
000417 dafa      	RCALL __LOADLOCR2
000418 9623      	ADIW R28,3
000419 9508      	RET
         ;     475 
         ;     476 
         ;     477 //void delay(char d)
         ;     478 //{
         ;     479 //    char i,j,k;
         ;     480 //    for(i=0; i<d; i++)
         ;     481 //        for(j=0; j<40; j++)
         ;     482 //            for(k=0; k<176; k++);
         ;     483 //}
         ;     484 
         ;     485 //#include <pgmspace.h>
         ;     486 #include "kb.h"
         ;     487 //#include "serial.h"
         ;     488 #include "gpr.h"
         ;     489 
         ;     490 #include "scancodes.h"
         ;     491 
         ;     492 #define BUFF_SIZE 64
         ;     493 
         ;     494 unsigned char edge, bitcount;                // 0 = neg.  1 = pos.
         ;     495 
         ;     496 unsigned char kb_buffer[BUFF_SIZE];
         
          	.DSEG
          _kb_buffer:
000148      	.BYTE 0x40
         ;     497 unsigned char *inpt, *outpt;
          _outpt:
000188      	.BYTE 0x2
         ;     498 unsigned char buffcnt;
         ;     499 
         ;     500 
         ;     501 void init_kb(void)
         ;     502 {
         
          	.CSEG
          _init_kb:
         ;     503     inpt =  kb_buffer;                        // Initialize buffer
00041a e4e8      	LDI  R30,LOW(_kb_buffer)
00041b e0f1      	LDI  R31,HIGH(_kb_buffer)
00041c   +  	__PUTW1R 12,13
         ;     504     outpt = kb_buffer;
00041e e4e8      	LDI  R30,LOW(_kb_buffer)
00041f e0f1      	LDI  R31,HIGH(_kb_buffer)
000420 93e0 0188 	STS  _outpt,R30
000422 93f0 0189 	STS  _outpt+1,R31
         ;     505     buffcnt = 0;
000424 24ee      	CLR  R14
         ;     506 
         ;     507     MCUCR = 2;                                // INT0 interrupt on falling edge
000425 e0e2      	LDI  R30,LOW(2)
000426 bfe5      	OUT  0x35,R30
         ;     508     edge = 0;                                // 0 = falling edge  1 = rising edge
000427 24aa      	CLR  R10
         ;     509     bitcount = 11;
000428 e0eb      	LDI  R30,LOW(11)
000429 2ebe      	MOV  R11,R30
         ;     510 }
00042a 9508      	RET
         ;     511 
         ;     512 interrupt [EXT_INT0] void ext_int0_isr(void)
         ;     513 {
          _ext_int0_isr:
00042b 920a      	ST   -Y,R0
00042c 921a      	ST   -Y,R1
00042d 92fa      	ST   -Y,R15
00042e 936a      	ST   -Y,R22
00042f 937a      	ST   -Y,R23
000430 938a      	ST   -Y,R24
000431 939a      	ST   -Y,R25
000432 93aa      	ST   -Y,R26
000433 93ba      	ST   -Y,R27
000434 93ea      	ST   -Y,R30
000435 93fa      	ST   -Y,R31
000436 b7ef      	IN   R30,SREG
000437 93ea      	ST   -Y,R30
         ;     514     static unsigned char data;                // Holds the received scan code
         
          	.DSEG
          _data_S9:
00018a      	.BYTE 0x1
         
          	.CSEG
         ;     515 
         ;     516     if (!edge)                                // Routine entered at falling edge
000438 20aa      	TST  R10
000439 f4c1      	BRNE _0x4B
         ;     517     {
         ;     518         if(bitcount < 11 && bitcount > 2)    // Bit 3 to 10 is data. Parity bit,
00043a e0eb      	LDI  R30,LOW(11)
00043b 16be      	CP   R11,R30
00043c f418      	BRSH _0x4D
00043d e0e2      	LDI  R30,LOW(2)
00043e 15eb      	CP   R30,R11
00043f f008      	BRLO _0x4E
          _0x4D:
000440 c00c      	RJMP _0x4C
          _0x4E:
         ;     519         {                                    // start and stop bits are ignored.
         ;     520             data = (data >> 1);
000441 91e0 018a 	LDS  R30,_data_S9
000443 95e6      	LSR  R30
000444 93e0 018a 	STS  _data_S9,R30
         ;     521             if(PIND & 8)
000446 9b83      	SBIS 0x10,3
000447 c005      	RJMP _0x4F
         ;     522                 data = data | 0x80;            // Store a '1'
000448 91e0 018a 	LDS  R30,_data_S9
00044a 68e0      	ORI  R30,0x80
00044b 93e0 018a 	STS  _data_S9,R30
         ;     523         }
          _0x4F:
         ;     524 
         ;     525         MCUCR = 3;                            // Set interrupt on rising edge
          _0x4C:
00044d e0e3      	LDI  R30,LOW(3)
00044e bfe5      	OUT  0x35,R30
         ;     526         edge = 1;
00044f e0e1      	LDI  R30,LOW(1)
000450 2eae      	MOV  R10,R30
         ;     527         
         ;     528     } else {                                // Routine entered at rising edge
000451 c00b      	RJMP _0x50
          _0x4B:
         ;     529 
         ;     530         MCUCR = 2;                            // Set interrupt on falling edge
000452 e0e2      	LDI  R30,LOW(2)
000453 bfe5      	OUT  0x35,R30
         ;     531         edge = 0;
000454 24aa      	CLR  R10
         ;     532 
         ;     533         if(--bitcount == 0)                    // All bits received
000455 94ba      	DEC  R11
000456 f431      	BRNE _0x51
         ;     534         {
         ;     535             decode(data);
000457 91e0 018a 	LDS  R30,_data_S9
000459 93ea      	ST   -Y,R30
00045a d010      	RCALL _decode
         ;     536             bitcount = 11;
00045b e0eb      	LDI  R30,LOW(11)
00045c 2ebe      	MOV  R11,R30
         ;     537         }
         ;     538     }
          _0x51:
          _0x50:
         ;     539 }
00045d 91e9      	LD   R30,Y+
00045e bfef      	OUT  SREG,R30
00045f 91f9      	LD   R31,Y+
000460 91e9      	LD   R30,Y+
000461 91b9      	LD   R27,Y+
000462 91a9      	LD   R26,Y+
000463 9199      	LD   R25,Y+
000464 9189      	LD   R24,Y+
000465 9179      	LD   R23,Y+
000466 9169      	LD   R22,Y+
000467 90f9      	LD   R15,Y+
000468 9019      	LD   R1,Y+
000469 9009      	LD   R0,Y+
00046a 9518      	RETI
         ;     540 
         ;     541 
         ;     542 void decode(unsigned char sc)
         ;     543 {
          _decode:
         ;     544     static unsigned char is_up=0, shift = 0, mode = 0, scrollup = 0,ctrl =0;
         
          	.DSEG
          _is_up_SA:
00018b      	.BYTE 0x1
          _shift_SA:
00018c      	.BYTE 0x1
          _mode_SA:
00018d      	.BYTE 0x1
          _scrollup_SA:
00018e      	.BYTE 0x1
          _ctrl_SA:
00018f      	.BYTE 0x1
         
          	.CSEG
         ;     545     unsigned char i;
         ;     546 
         ;     547     if (!is_up)                // Last data received was the up-key identifier
00046b 930a      	ST   -Y,R16
         ;	sc -> Y+1
         ;	i -> R16
00046c 91e0 018b 	LDS  R30,_is_up_SA
00046e 30e0      	CPI  R30,0
00046f f009      	BREQ PC+2
000470 c0be      	RJMP _0x52
         ;     548     {
         ;     549         switch (sc)
000471 81e9      	LDD  R30,Y+1
         ;     550         {
         ;     551               
         ;     552                 
         ;     553           case 0xF0 :        // The up-key identifier
000472 3fe0      	CPI  R30,LOW(0xF0)
000473 f421      	BRNE _0x56
         ;     554             is_up = 1;
000474 e0e1      	LDI  R30,LOW(1)
000475 93e0 018b 	STS  _is_up_SA,R30
         ;     555             break;
000477 c0b6      	RJMP _0x55
         ;     556                    
         ;     557           case 0x14 :       //ctrl
          _0x56:
000478 31e4      	CPI  R30,LOW(0x14)
000479 f421      	BRNE _0x57
         ;     558             ctrl = 1;
00047a e0e1      	LDI  R30,LOW(1)
00047b 93e0 018f 	STS  _ctrl_SA,R30
         ;     559             break;
00047d c0b0      	RJMP _0x55
         ;     560             
         ;     561           case 0x12 :        // Left SHIFT
          _0x57:
00047e 31e2      	CPI  R30,LOW(0x12)
00047f f421      	BRNE _0x58
         ;     562             shift = 1;
000480 e0e1      	LDI  R30,LOW(1)
000481 93e0 018c 	STS  _shift_SA,R30
         ;     563             break;
000483 c0aa      	RJMP _0x55
         ;     564 
         ;     565           case 0x59 :        // Right SHIFT
          _0x58:
000484 35e9      	CPI  R30,LOW(0x59)
000485 f421      	BRNE _0x59
         ;     566             shift = 1;
000486 e0e1      	LDI  R30,LOW(1)
000487 93e0 018c 	STS  _shift_SA,R30
         ;     567             break;
000489 c0a4      	RJMP _0x55
         ;     568 
         ;     569           case 0x05 :        // F1
          _0x59:
00048a 30e5      	CPI  R30,LOW(0x5)
00048b f479      	BRNE _0x5D
         ;     570             if(mode == 0)
00048c 91e0 018d 	LDS  R30,_mode_SA
00048e 30e0      	CPI  R30,0
00048f f419      	BRNE _0x5B
         ;     571                 mode = 1;    // Enter scan code mode
000490 e0e1      	LDI  R30,LOW(1)
000491 93e0 018d 	STS  _mode_SA,R30
         ;     572             if(mode == 2)
          _0x5B:
000493 91a0 018d 	LDS  R26,_mode_SA
000495 30a2      	CPI  R26,LOW(0x2)
000496 f419      	BRNE _0x5C
         ;     573                 mode = 3;    // Leave scan code mode
000497 e0e3      	LDI  R30,LOW(3)
000498 93e0 018d 	STS  _mode_SA,R30
         ;     574             break;
          _0x5C:
00049a c093      	RJMP _0x55
         ;     575 
         ;     576           default:
          _0x5D:
         ;     577             if(mode == 0 || mode == 3)        // If ASCII mode
00049b 91a0 018d 	LDS  R26,_mode_SA
00049d 30a0      	CPI  R26,LOW(0x0)
00049e f019      	BREQ _0x5F
00049f 30a3      	CPI  R26,LOW(0x3)
0004a0 f009      	BREQ _0x5F
0004a1 c083      	RJMP _0x5E
          _0x5F:
         ;     578             {  
         ;     579                 if(ctrl == 1)
0004a2 91a0 018f 	LDS  R26,_ctrl_SA
0004a4 30a1      	CPI  R26,LOW(0x1)
0004a5 f431      	BRNE _0x61
         ;     580                 {   
         ;     581                     if(sc == 0x21)
0004a6 81a9      	LDD  R26,Y+1
0004a7 32a1      	CPI  R26,LOW(0x21)
0004a8 f419      	BRNE _0x62
         ;     582                     putchar(0x03);
0004a9 e0e3      	LDI  R30,LOW(3)
0004aa 93ea      	ST   -Y,R30
0004ab dd2b      	RCALL _putchar
         ;     583                 }
          _0x62:
         ;     584                 if(!shift )                    // If shift not pressed,
          _0x61:
0004ac 91e0 018c 	LDS  R30,_shift_SA
0004ae 30e0      	CPI  R30,0
0004af f009      	BREQ PC+2
0004b0 c03a      	RJMP _0x63
         ;     585                 {                            // do a table look-up
         ;     586                     for(i = 0; unshifted[i][0]!=sc && unshifted[i][0]; i++);
0004b1 e000      	LDI  R16,LOW(0)
          _0x65:
0004b2 eba4      	LDI  R26,LOW(_unshifted*2)
0004b3 e0b0      	LDI  R27,HIGH(_unshifted*2)
0004b4 2fe0      	MOV  R30,R16
0004b5 e0f0      	LDI  R31,0
0004b6 0fee      	LSL  R30
0004b7 1fff      	ROL  R31
0004b8 0fea      	ADD  R30,R26
0004b9 1ffb      	ADC  R31,R27
0004ba 95c8      	LPM
0004bb 2de0      	MOV  R30,R0
0004bc 2fae      	MOV  R26,R30
0004bd 81e9      	LDD  R30,Y+1
0004be 17ea      	CP   R30,R26
0004bf f061      	BREQ _0x67
0004c0 eba4      	LDI  R26,LOW(_unshifted*2)
0004c1 e0b0      	LDI  R27,HIGH(_unshifted*2)
0004c2 2fe0      	MOV  R30,R16
0004c3 e0f0      	LDI  R31,0
0004c4 0fee      	LSL  R30
0004c5 1fff      	ROL  R31
0004c6 0fea      	ADD  R30,R26
0004c7 1ffb      	ADC  R31,R27
0004c8 95c8      	LPM
0004c9 2de0      	MOV  R30,R0
0004ca 30e0      	CPI  R30,0
0004cb f409      	BRNE _0x68
          _0x67:
0004cc c002      	RJMP _0x66
          _0x68:
0004cd 5f0f      	SUBI R16,-1
0004ce cfe3      	RJMP _0x65
          _0x66:
         ;     587                     if (unshifted[i][0] == sc) 
0004cf eba4      	LDI  R26,LOW(_unshifted*2)
0004d0 e0b0      	LDI  R27,HIGH(_unshifted*2)
0004d1 2fe0      	MOV  R30,R16
0004d2 e0f0      	LDI  R31,0
0004d3 0fee      	LSL  R30
0004d4 1fff      	ROL  R31
0004d5 0fea      	ADD  R30,R26
0004d6 1ffb      	ADC  R31,R27
0004d7 95c8      	LPM
0004d8 2de0      	MOV  R30,R0
0004d9 2fae      	MOV  R26,R30
0004da 81e9      	LDD  R30,Y+1
0004db 17ea      	CP   R30,R26
0004dc f469      	BRNE _0x69
         ;     588                     {
         ;     589                         put_kbbuff(unshifted[i][1]);
0004dd eba4      	LDI  R26,LOW(_unshifted*2)
0004de e0b0      	LDI  R27,HIGH(_unshifted*2)
0004df 2fe0      	MOV  R30,R16
0004e0 e0f0      	LDI  R31,0
0004e1 0fee      	LSL  R30
0004e2 1fff      	ROL  R31
0004e3 0fea      	ADD  R30,R26
0004e4 1ffb      	ADC  R31,R27
0004e5 9631      	ADIW R30,1
0004e6 95c8      	LPM
0004e7 2de0      	MOV  R30,R0
0004e8 93ea      	ST   -Y,R30
0004e9 d089      	RCALL _put_kbbuff
         ;     590                     }
         ;     591                 } 
          _0x69:
         ;     592                 else 
0004ea c039      	RJMP _0x6A
          _0x63:
         ;     593                 {   
         ;     594                     
         ;     595                                     // If shift pressed
         ;     596                         for(i = 0; shifted[i][0]!=sc && shifted[i][0]; i++);
0004eb e000      	LDI  R16,LOW(0)
          _0x6C:
0004ec e3aa      	LDI  R26,LOW(_shifted*2)
0004ed e0b1      	LDI  R27,HIGH(_shifted*2)
0004ee 2fe0      	MOV  R30,R16
0004ef e0f0      	LDI  R31,0
0004f0 0fee      	LSL  R30
0004f1 1fff      	ROL  R31
0004f2 0fea      	ADD  R30,R26
0004f3 1ffb      	ADC  R31,R27
0004f4 95c8      	LPM
0004f5 2de0      	MOV  R30,R0
0004f6 2fae      	MOV  R26,R30
0004f7 81e9      	LDD  R30,Y+1
0004f8 17ea      	CP   R30,R26
0004f9 f061      	BREQ _0x6E
0004fa e3aa      	LDI  R26,LOW(_shifted*2)
0004fb e0b1      	LDI  R27,HIGH(_shifted*2)
0004fc 2fe0      	MOV  R30,R16
0004fd e0f0      	LDI  R31,0
0004fe 0fee      	LSL  R30
0004ff 1fff      	ROL  R31
000500 0fea      	ADD  R30,R26
000501 1ffb      	ADC  R31,R27
000502 95c8      	LPM
000503 2de0      	MOV  R30,R0
000504 30e0      	CPI  R30,0
000505 f409      	BRNE _0x6F
          _0x6E:
000506 c002      	RJMP _0x6D
          _0x6F:
000507 5f0f      	SUBI R16,-1
000508 cfe3      	RJMP _0x6C
          _0x6D:
         ;     597                         if (shifted[i][0] == sc) 
000509 e3aa      	LDI  R26,LOW(_shifted*2)
00050a e0b1      	LDI  R27,HIGH(_shifted*2)
00050b 2fe0      	MOV  R30,R16
00050c e0f0      	LDI  R31,0
00050d 0fee      	LSL  R30
00050e 1fff      	ROL  R31
00050f 0fea      	ADD  R30,R26
000510 1ffb      	ADC  R31,R27
000511 95c8      	LPM
000512 2de0      	MOV  R30,R0
000513 2fae      	MOV  R26,R30
000514 81e9      	LDD  R30,Y+1
000515 17ea      	CP   R30,R26
000516 f469      	BRNE _0x70
         ;     598                             {
         ;     599                                 put_kbbuff(shifted[i][1]);
000517 e3aa      	LDI  R26,LOW(_shifted*2)
000518 e0b1      	LDI  R27,HIGH(_shifted*2)
000519 2fe0      	MOV  R30,R16
00051a e0f0      	LDI  R31,0
00051b 0fee      	LSL  R30
00051c 1fff      	ROL  R31
00051d 0fea      	ADD  R30,R26
00051e 1ffb      	ADC  R31,R27
00051f 9631      	ADIW R30,1
000520 95c8      	LPM
000521 2de0      	MOV  R30,R0
000522 93ea      	ST   -Y,R30
000523 d04f      	RCALL _put_kbbuff
         ;     600                             }
         ;     601 
         ;     602                     
         ;     603                     
         ;     604                 }
          _0x70:
          _0x6A:
         ;     605             } else{                            // Scan code mode
000524 c009      	RJMP _0x71
          _0x5E:
         ;     606                 print_hexbyte(sc);            // Print scan code
000525 81e9      	LDD  R30,Y+1
000526 93ea      	ST   -Y,R30
000527 ded8      	RCALL _print_hexbyte
         ;     607                 put_kbbuff(' ');
000528 e2e0      	LDI  R30,LOW(32)
000529 93ea      	ST   -Y,R30
00052a d048      	RCALL _put_kbbuff
         ;     608                 put_kbbuff(' ');
00052b e2e0      	LDI  R30,LOW(32)
00052c 93ea      	ST   -Y,R30
00052d d045      	RCALL _put_kbbuff
         ;     609             }
          _0x71:
         ;     610             break;
         ;     611         }
          _0x55:
         ;     612     } else {
00052e c041      	RJMP _0x72
          _0x52:
         ;     613         is_up = 0;
00052f e0e0      	LDI  R30,LOW(0)
000530 93e0 018b 	STS  _is_up_SA,R30
         ;     614                                     // Two 0xF0 in a row not allowed
         ;     615         switch (sc)
000532 81e9      	LDD  R30,Y+1
         ;     616         {
         ;     617         case 0x14:              //left  ctrl
000533 31e4      	CPI  R30,LOW(0x14)
000534 f421      	BRNE _0x76
         ;     618         ctrl = 0;
000535 e0e0      	LDI  R30,LOW(0)
000536 93e0 018f 	STS  _ctrl_SA,R30
         ;     619         break;
000538 c037      	RJMP _0x75
         ;     620         
         ;     621           case 0x12 :                        // Left SHIFT
          _0x76:
000539 31e2      	CPI  R30,LOW(0x12)
00053a f421      	BRNE _0x77
         ;     622             shift = 0;
00053b e0e0      	LDI  R30,LOW(0)
00053c 93e0 018c 	STS  _shift_SA,R30
         ;     623             break;
00053e c031      	RJMP _0x75
         ;     624             
         ;     625           case 0x59 :                        // Right SHIFT
          _0x77:
00053f 35e9      	CPI  R30,LOW(0x59)
000540 f421      	BRNE _0x78
         ;     626             shift = 0;
000541 e0e0      	LDI  R30,LOW(0)
000542 93e0 018c 	STS  _shift_SA,R30
         ;     627             break;
000544 c02b      	RJMP _0x75
         ;     628           case 0x77:
          _0x78:
000545 37e7      	CPI  R30,LOW(0x77)
000546 f439      	BRNE _0x79
         ;     629           back=!back;
000547 94e8      	CLT
000548 9b95      	SBIS 0x12,5
000549 9468      	SET
00054a b3a2      	IN   R26,0x12
00054b f9a5      	BLD  R26,5
00054c bba2      	OUT  0x12,R26
         ;     630           break;
00054d c022      	RJMP _0x75
         ;     631           
         ;     632           case 0x05 :                        // F1
          _0x79:
00054e 30e5      	CPI  R30,LOW(0x5)
00054f f479      	BRNE _0x7A
         ;     633             if(mode == 1)
000550 91a0 018d 	LDS  R26,_mode_SA
000552 30a1      	CPI  R26,LOW(0x1)
000553 f419      	BRNE _0x7B
         ;     634                 mode = 2;
000554 e0e2      	LDI  R30,LOW(2)
000555 93e0 018d 	STS  _mode_SA,R30
         ;     635             if(mode == 3)
          _0x7B:
000557 91a0 018d 	LDS  R26,_mode_SA
000559 30a3      	CPI  R26,LOW(0x3)
00055a f419      	BRNE _0x7C
         ;     636                 mode = 0;
00055b e0e0      	LDI  R30,LOW(0)
00055c 93e0 018d 	STS  _mode_SA,R30
         ;     637             break;
          _0x7C:
00055e c011      	RJMP _0x75
         ;     638           case 0x06 :                        // F2
          _0x7A:
00055f 30e6      	CPI  R30,LOW(0x6)
000560 f421      	BRNE _0x7D
         ;     639             put_kbbuff(0xff);
000561 efef      	LDI  R30,LOW(255)
000562 93ea      	ST   -Y,R30
000563 d00f      	RCALL _put_kbbuff
         ;     640            // printf("scroll up");
         ;     641            break;
000564 c00b      	RJMP _0x75
         ;     642            case 0x04:
          _0x7D:
000565 30e4      	CPI  R30,LOW(0x4)
000566 f421      	BRNE _0x7E
         ;     643             put_kbbuff(0xfe);
000567 efee      	LDI  R30,LOW(254)
000568 93ea      	ST   -Y,R30
000569 d009      	RCALL _put_kbbuff
         ;     644             break;
00056a c005      	RJMP _0x75
         ;     645             case 0x03:
          _0x7E:
00056b 30e3      	CPI  R30,LOW(0x3)
00056c f419      	BRNE _0x75
         ;     646             put_kbbuff(0xfd);
00056d efed      	LDI  R30,LOW(253)
00056e 93ea      	ST   -Y,R30
00056f d003      	RCALL _put_kbbuff
         ;     647             break;      
         ;     648         } 
          _0x75:
         ;     649     }    
          _0x72:
         ;     650 } 
000570 8108      	LDD  R16,Y+0
000571 9622      	ADIW R28,2
000572 9508      	RET
         ;     651 
         ;     652 void put_kbbuff(unsigned char c)
         ;     653 {
          _put_kbbuff:
         ;     654     if (buffcnt<BUFF_SIZE)                        // If buffer not full
000573 e4e0      	LDI  R30,LOW(64)
000574 16ee      	CP   R14,R30
000575 f490      	BRSH _0x80
         ;     655     {
         ;     656         *inpt = c;                                // Put character into buffer
000576 81e8      	LD   R30,Y
000577   +  	__GETW2R 12,13
000579 93ec      	ST   X,R30
         ;     657         inpt++;                                    // Increment pointer
00057a e0e1      	LDI  R30,LOW(1)
00057b e0f0      	LDI  R31,HIGH(1)
00057c   +  	__ADDWRR 12,13,30,31
         ;     658 
         ;     659         buffcnt++;
00057e 94e3      	INC  R14
         ;     660 
         ;     661         if (inpt >= kb_buffer + BUFF_SIZE)        // Pointer wrapping
00057f   +  	__POINTW1MN _kb_buffer,64
000581 16ce      	CP   R12,R30
000582 06df      	CPC  R13,R31
000583 f020      	BRLO _0x81
         ;     662             inpt = kb_buffer;
000584 e4e8      	LDI  R30,LOW(_kb_buffer)
000585 e0f1      	LDI  R31,HIGH(_kb_buffer)
000586   +  	__PUTW1R 12,13
         ;     663     }
          _0x81:
         ;     664 }
          _0x80:
          _0x158:
000588 9621      	ADIW R28,1
000589 9508      	RET
         ;     665 
         ;     666 int getchar_kb(void)
         ;     667 {
          _getchar_kb:
         ;     668     int byte;  
         ;     669    
         ;     670     //while(buffcnt == 0);                        // Wait for data
         ;     671     if(buffcnt == 0)
00058a d980      	RCALL __SAVELOCR2
         ;	byte -> R16,R17
00058b 20ee      	TST  R14
00058c f429      	BRNE _0x82
         ;     672     {         
         ;     673     byte=0;
00058d   +  	__GETWRN 16,17,0
         ;     674     return byte;
00058f   +  	__GETW1R 16,17
000591 c023      	RJMP _0x157
         ;     675     }
         ;     676     else
          _0x82:
         ;     677     { 
         ;     678     byte = *outpt;                                // Get byte
000592 91a0 0188 	LDS  R26,_outpt
000594 91b0 0189 	LDS  R27,_outpt+1
000596 91ec      	LD   R30,X
000597 e0f0      	LDI  R31,0
000598   +  	__PUTW1R 16,17
         ;     679     outpt++;                                    // Increment pointer
00059a 91e0 0188 	LDS  R30,_outpt
00059c 91f0 0189 	LDS  R31,_outpt+1
00059e 9631      	ADIW R30,1
00059f 93e0 0188 	STS  _outpt,R30
0005a1 93f0 0189 	STS  _outpt+1,R31
         ;     680 
         ;     681     if (outpt >= kb_buffer + BUFF_SIZE)            // Pointer wrapping
0005a3   +  	__POINTW1MN _kb_buffer,64
0005a5 91a0 0188 	LDS  R26,_outpt
0005a7 91b0 0189 	LDS  R27,_outpt+1
0005a9 17ae      	CP   R26,R30
0005aa 07bf      	CPC  R27,R31
0005ab f030      	BRLO _0x84
         ;     682         outpt = kb_buffer;
0005ac e4e8      	LDI  R30,LOW(_kb_buffer)
0005ad e0f1      	LDI  R31,HIGH(_kb_buffer)
0005ae 93e0 0188 	STS  _outpt,R30
0005b0 93f0 0189 	STS  _outpt+1,R31
         ;     683     
         ;     684     buffcnt--;                                    // Decrement buffer count
          _0x84:
0005b2 94ea      	DEC  R14
         ;     685 
         ;     686     return byte;
0005b3   +  	__GETW1R 16,17
         ;     687     }
         ;     688 }
          _0x157:
0005b5 d95f      	RCALL __LOADLOCR2P
0005b6 9508      	RET
         ;     689 
         ;     690 
         ;     691 //#include <ina90.h>
         ;     692 #include <90s8515.h>
         ;     693 
         ;     694 void low_level_init(void)
         ;     695 {
          _low_level_init:
         ;     696         
         ;     697         UBRR=0x2f;          // 19200bps @ 4 MHz
0005b7 e2ef      	LDI  R30,LOW(47)
0005b8 b9e9      	OUT  0x9,R30
         ;     698     //UCR  = 0x08;        // RX enable, TX enable
         ;     699     GIMSK= 0x40;        // Enable INT0 interrupt
0005b9 e4e0      	LDI  R30,LOW(64)
0005ba bfeb      	OUT  0x3B,R30
         ;     700     //UCR=0x58; 
         ;     701     UCR=0xD8; 
0005bb ede8      	LDI  R30,LOW(216)
0005bc b9ea      	OUT  0xA,R30
         ;     702 
         ;     703 #asm("sei")
0005bd 9478      	sei
         ;     704     //return 1;
         ;     705 }
0005be 9508      	RET
         ;     706 
         ;     707 #include "capture.h"
         
          	.DSEG
          _s:
000190      	.BYTE 0x1
          _istore:
000191      	.BYTE 0x2
          _j:
000193      	.BYTE 0x2
          _b:
000195      	.BYTE 0x2
          _i:
000197      	.BYTE 0x2
          _x:
000199      	.BYTE 0x2
          _state:
00019b      	.BYTE 0x2
          _jstore:
00019d      	.BYTE 0x2
          _line:
00019f      	.BYTE 0x93
          _lineflag:
000232      	.BYTE 0x2
         ;     708 void cap_init (void)
         ;     709 {
         
          	.CSEG
          _cap_init:
         ;     710 j=0;
0005bf e0e0      	LDI  R30,0
0005c0 93e0 0193 	STS  _j,R30
0005c2 93e0 0194 	STS  _j+1,R30
         ;     711 i=0;
0005c4 e0e0      	LDI  R30,0
0005c5 93e0 0197 	STS  _i,R30
0005c7 93e0 0198 	STS  _i+1,R30
         ;     712 }
0005c9 9508      	RET
         ;     713 void do_states (char s)
         ;     714 {
          _do_states:
         ;     715 
         ;     716            
         ;     717                 //if(up_BN==0)
         ;     718                 //////printf("it worked");            
         ;     719               
         ;     720                   
         ;     721                 state=bla;
0005ca e0e2      	LDI  R30,LOW(2)
0005cb e0f0      	LDI  R31,HIGH(2)
0005cc 93e0 019b 	STS  _state,R30
0005ce 93f0 019c 	STS  _state+1,R31
         ;     722                 if(s==0x0a )
0005d0 81a8      	LD   R26,Y
0005d1 30aa      	CPI  R26,LOW(0xA)
0005d2 f431      	BRNE _0x85
         ;     723                 state=crlf;
0005d3 e0e1      	LDI  R30,LOW(1)
0005d4 e0f0      	LDI  R31,HIGH(1)
0005d5 93e0 019b 	STS  _state,R30
0005d7 93f0 019c 	STS  _state+1,R31
         ;     724                 if(s==0x08)
          _0x85:
0005d9 81a8      	LD   R26,Y
0005da 30a8      	CPI  R26,LOW(0x8)
0005db f431      	BRNE _0x86
         ;     725                 state=bkspce;
0005dc e0e3      	LDI  R30,LOW(3)
0005dd e0f0      	LDI  R31,HIGH(3)
0005de 93e0 019b 	STS  _state,R30
0005e0 93f0 019c 	STS  _state+1,R31
         ;     726                 if(s==0x0d || s==0)
          _0x86:
0005e2 81a8      	LD   R26,Y
0005e3 30ad      	CPI  R26,LOW(0xD)
0005e4 f011      	BREQ _0x88
0005e5 30a0      	CPI  R26,LOW(0x0)
0005e6 f431      	BRNE _0x87
          _0x88:
         ;     727                 state=ignor;
0005e7 e0e5      	LDI  R30,LOW(5)
0005e8 e0f0      	LDI  R31,HIGH(5)
0005e9 93e0 019b 	STS  _state,R30
0005eb 93f0 019c 	STS  _state+1,R31
         ;     728                 if(s==0xff)
          _0x87:
0005ed 81a8      	LD   R26,Y
0005ee 3faf      	CPI  R26,LOW(0xFF)
0005ef f431      	BRNE _0x8A
         ;     729                 state=scrollup;
0005f0 e0e6      	LDI  R30,LOW(6)
0005f1 e0f0      	LDI  R31,HIGH(6)
0005f2 93e0 019b 	STS  _state,R30
0005f4 93f0 019c 	STS  _state+1,R31
         ;     730                 if(s==0xfe)
          _0x8A:
0005f6 81a8      	LD   R26,Y
0005f7 3fae      	CPI  R26,LOW(0xFE)
0005f8 f431      	BRNE _0x8B
         ;     731                 state=scrolldown;
0005f9 e0e7      	LDI  R30,LOW(7)
0005fa e0f0      	LDI  R31,HIGH(7)
0005fb 93e0 019b 	STS  _state,R30
0005fd 93f0 019c 	STS  _state+1,R31
         ;     732                 if(s==0x7e)
          _0x8B:
0005ff 81a8      	LD   R26,Y
000600 37ae      	CPI  R26,LOW(0x7E)
000601 f429      	BRNE _0x8C
         ;     733                 state=backlighttoggle;
000602 e0e0      	LDI  R30,0
000603 93e0 019b 	STS  _state,R30
000605 93e0 019c 	STS  _state+1,R30
         ;     734                 switch(state)
          _0x8C:
000607 91e0 019b 	LDS  R30,_state
000609 91f0 019c 	LDS  R31,_state+1
         ;     735                 { 
         ;     736                         case backlighttoggle:
00060b 9730      	SBIW R30,0
00060c f439      	BRNE _0x90
         ;     737                         backlight=!backlight;
00060d 94e8      	CLT
00060e 9b95      	SBIS 0x12,5
00060f 9468      	SET
000610 b3a2      	IN   R26,0x12
000611 f9a5      	BLD  R26,5
000612 bba2      	OUT  0x12,R26
         ;     738                         break;
000613 c5ed      	RJMP _0x8F
         ;     739                         
         ;     740                         case crlf:
          _0x90:
000614 30e1      	CPI  R30,LOW(0x1)
000615 e0a0      	LDI  R26,HIGH(0x1)
000616 07fa      	CPC  R31,R26
000617 f009      	BREQ PC+2
000618 c168      	RJMP _0x91
         ;     741                         if(wasscroll==1)
000619 fe21      	SBRS R2,1
00061a c085      	RJMP _0x92
         ;     742                         {
         ;     743                                 //printf("wasscroll just got cleared by crlf");
         ;     744                                 j=jstore;
00061b 91e0 019d 	LDS  R30,_jstore
00061d 91f0 019e 	LDS  R31,_jstore+1
00061f 93e0 0193 	STS  _j,R30
000621 93f0 0194 	STS  _j+1,R31
         ;     745                                 i=istore;
000623 91e0 0191 	LDS  R30,_istore
000625 91f0 0192 	LDS  R31,_istore+1
000627 93e0 0197 	STS  _i,R30
000629 93f0 0198 	STS  _i+1,R31
         ;     746                                 lcd_clear();
00062b d666      	RCALL _lcd_clear
         ;     747                                         
         ;     748                                         if((j-3)>-1)
00062c 91a0 0193 	LDS  R26,_j
00062e 91b0 0194 	LDS  R27,_j+1
000630 9713      	SBIW R26,3
000631 efef      	LDI  R30,LOW(65535)
000632 efff      	LDI  R31,HIGH(65535)
000633 17ea      	CP   R30,R26
000634 07fb      	CPC  R31,R27
000635 f42c      	BRGE _0x93
         ;     749                                         {
         ;     750                                                  lcd_puts(line[j-3]);      
000636 91e0 0193 	LDS  R30,_j
000638 91f0 0194 	LDS  R31,_j+1
00063a c005      	RJMP _0x15B
         ;     751                                         }
         ;     752                                         else
          _0x93:
         ;     753                                         {
         ;     754                                                  lcd_puts(line[buffersize+j-3]);                                               
00063b 91e0 0193 	LDS  R30,_j
00063d 91f0 0194 	LDS  R31,_j+1
00063f 9637      	ADIW R30,7
          _0x15B:
000640 9733      	SBIW R30,3
000641 e1a5      	LDI  R26,LOW(21)
000642 e0b0      	LDI  R27,HIGH(21)
000643 d89b      	RCALL __MULW12U
000644 56e1      	SUBI R30,LOW(-_line)
000645 4ffe      	SBCI R31,HIGH(-_line)
000646 93fa      	ST   -Y,R31
000647 93ea      	ST   -Y,R30
000648 d682      	RCALL _lcd_puts
         ;     755                                         }
         ;     756                                         lcd_gotoxy(0,1);               
000649 e0e0      	LDI  R30,LOW(0)
00064a 93ea      	ST   -Y,R30
00064b e0e1      	LDI  R30,LOW(1)
00064c 93ea      	ST   -Y,R30
00064d d632      	RCALL _lcd_gotoxy
         ;     757                                         if((j-2)>-1)
00064e 91a0 0193 	LDS  R26,_j
000650 91b0 0194 	LDS  R27,_j+1
000652 9712      	SBIW R26,2
000653 efef      	LDI  R30,LOW(65535)
000654 efff      	LDI  R31,HIGH(65535)
000655 17ea      	CP   R30,R26
000656 07fb      	CPC  R31,R27
000657 f42c      	BRGE _0x95
         ;     758                                         {
         ;     759                                                  lcd_puts(line[j-2]);
000658 91e0 0193 	LDS  R30,_j
00065a 91f0 0194 	LDS  R31,_j+1
00065c c005      	RJMP _0x15C
         ;     760                                         }
         ;     761                                         else
          _0x95:
         ;     762                                         {
         ;     763                                                  lcd_puts(line[buffersize+j-2]);                               
00065d 91e0 0193 	LDS  R30,_j
00065f 91f0 0194 	LDS  R31,_j+1
000661 9637      	ADIW R30,7
          _0x15C:
000662 9732      	SBIW R30,2
000663 e1a5      	LDI  R26,LOW(21)
000664 e0b0      	LDI  R27,HIGH(21)
000665 d879      	RCALL __MULW12U
000666 56e1      	SUBI R30,LOW(-_line)
000667 4ffe      	SBCI R31,HIGH(-_line)
000668 93fa      	ST   -Y,R31
000669 93ea      	ST   -Y,R30
00066a d660      	RCALL _lcd_puts
         ;     764                                         }
         ;     765                                         lcd_gotoxy(0,2);
00066b e0e0      	LDI  R30,LOW(0)
00066c 93ea      	ST   -Y,R30
00066d e0e2      	LDI  R30,LOW(2)
00066e 93ea      	ST   -Y,R30
00066f d610      	RCALL _lcd_gotoxy
         ;     766                                         if((j-1)>-1)
000670 91a0 0193 	LDS  R26,_j
000672 91b0 0194 	LDS  R27,_j+1
000674 9711      	SBIW R26,1
000675 efef      	LDI  R30,LOW(65535)
000676 efff      	LDI  R31,HIGH(65535)
000677 17ea      	CP   R30,R26
000678 07fb      	CPC  R31,R27
000679 f42c      	BRGE _0x97
         ;     767                                         {
         ;     768                                                  lcd_puts(line[j-1]);
00067a 91e0 0193 	LDS  R30,_j
00067c 91f0 0194 	LDS  R31,_j+1
00067e c005      	RJMP _0x15D
         ;     769                                         }
         ;     770                                         else
          _0x97:
         ;     771                                         {
         ;     772                                                  lcd_puts(line[buffersize+j-1]);                               
00067f 91e0 0193 	LDS  R30,_j
000681 91f0 0194 	LDS  R31,_j+1
000683 9637      	ADIW R30,7
          _0x15D:
000684 9731      	SBIW R30,1
000685 e1a5      	LDI  R26,LOW(21)
000686 e0b0      	LDI  R27,HIGH(21)
000687 d857      	RCALL __MULW12U
000688 56e1      	SUBI R30,LOW(-_line)
000689 4ffe      	SBCI R31,HIGH(-_line)
00068a 93fa      	ST   -Y,R31
00068b 93ea      	ST   -Y,R30
00068c d63e      	RCALL _lcd_puts
         ;     773                                         }
         ;     774                                                                  
         ;     775                                         lcd_gotoxy(0,3);
00068d e0e0      	LDI  R30,LOW(0)
00068e 93ea      	ST   -Y,R30
00068f e0e3      	LDI  R30,LOW(3)
000690 93ea      	ST   -Y,R30
000691 d5ee      	RCALL _lcd_gotoxy
         ;     776                                         lcd_puts(line[j]);
000692 91e0 0193 	LDS  R30,_j
000694 91f0 0194 	LDS  R31,_j+1
000696 e1a5      	LDI  R26,LOW(21)
000697 e0b0      	LDI  R27,HIGH(21)
000698 d846      	RCALL __MULW12U
000699 56e1      	SUBI R30,LOW(-_line)
00069a 4ffe      	SBCI R31,HIGH(-_line)
00069b 93fa      	ST   -Y,R31
00069c 93ea      	ST   -Y,R30
00069d d62d      	RCALL _lcd_puts
         ;     777                                         wasscroll=0;
00069e 94e8      	CLT
00069f f821      	BLD  R2,1
         ;     778                         }
         ;     779                         
         ;     780                         ////printf("CRLF\n\r");
         ;     781                         for(x=20-i;x!=0;x--)                 //this just fills the remainng of line with spaces
          _0x92:
0006a0 91a0 0197 	LDS  R26,_i
0006a2 91b0 0198 	LDS  R27,_i+1
0006a4 e1e4      	LDI  R30,LOW(20)
0006a5 e0f0      	LDI  R31,HIGH(20)
0006a6 1bea      	SUB  R30,R26
0006a7 0bfb      	SBC  R31,R27
0006a8 93e0 0199 	STS  _x,R30
0006aa 93f0 019a 	STS  _x+1,R31
          _0x9A:
0006ac 91e0 0199 	LDS  R30,_x
0006ae 91f0 019a 	LDS  R31,_x+1
0006b0 9730      	SBIW R30,0
0006b1 f121      	BREQ _0x9B
         ;     782                         {                                                                                                                                                                                                                                                                                                
         ;     783                                 line[j][i]=0x20;
0006b2 91e0 0193 	LDS  R30,_j
0006b4 91f0 0194 	LDS  R31,_j+1
0006b6 e1a5      	LDI  R26,LOW(21)
0006b7 e0b0      	LDI  R27,HIGH(21)
0006b8 d826      	RCALL __MULW12U
0006b9 56e1      	SUBI R30,LOW(-_line)
0006ba 4ffe      	SBCI R31,HIGH(-_line)
0006bb 91a0 0197 	LDS  R26,_i
0006bd 91b0 0198 	LDS  R27,_i+1
0006bf 0fae      	ADD  R26,R30
0006c0 1fbf      	ADC  R27,R31
0006c1 e2e0      	LDI  R30,LOW(32)
0006c2 93ec      	ST   X,R30
         ;     784                                 i++;
0006c3 91e0 0197 	LDS  R30,_i
0006c5 91f0 0198 	LDS  R31,_i+1
0006c7 9631      	ADIW R30,1
0006c8 93e0 0197 	STS  _i,R30
0006ca 93f0 0198 	STS  _i+1,R31
         ;     785                                 ////printf("%i",i);   
         ;     786                         }
0006cc 91e0 0199 	LDS  R30,_x
0006ce 91f0 019a 	LDS  R31,_x+1
0006d0 9731      	SBIW R30,1
0006d1 93e0 0199 	STS  _x,R30
0006d3 93f0 019a 	STS  _x+1,R31
0006d5 cfd6      	RJMP _0x9A
          _0x9B:
         ;     787                         i=0;
0006d6 e0e0      	LDI  R30,0
0006d7 93e0 0197 	STS  _i,R30
0006d9 93e0 0198 	STS  _i+1,R30
         ;     788                         if (lineflag==3)
0006db 91a0 0232 	LDS  R26,_lineflag
0006dd 91b0 0233 	LDS  R27,_lineflag+1
0006df 30a3      	CPI  R26,LOW(0x3)
0006e0 e0e0      	LDI  R30,HIGH(0x3)
0006e1 07be      	CPC  R27,R30
0006e2 f009      	BREQ PC+2
0006e3 c074      	RJMP _0x9C
         ;     789                         {
         ;     790                                 
         ;     791                                 
         ;     792                                         lcd_clear();
0006e4 d5ad      	RCALL _lcd_clear
         ;     793                                         
         ;     794                                         if((j-2)>-1)
0006e5 91a0 0193 	LDS  R26,_j
0006e7 91b0 0194 	LDS  R27,_j+1
0006e9 9712      	SBIW R26,2
0006ea efef      	LDI  R30,LOW(65535)
0006eb efff      	LDI  R31,HIGH(65535)
0006ec 17ea      	CP   R30,R26
0006ed 07fb      	CPC  R31,R27
0006ee f42c      	BRGE _0x9D
         ;     795                                         {
         ;     796                                                  lcd_puts(line[j-2]);      
0006ef 91e0 0193 	LDS  R30,_j
0006f1 91f0 0194 	LDS  R31,_j+1
0006f3 c005      	RJMP _0x15E
         ;     797                                         }
         ;     798                                         else
          _0x9D:
         ;     799                                         {
         ;     800                                                  lcd_puts(line[buffersize+j-2]);                                               
0006f4 91e0 0193 	LDS  R30,_j
0006f6 91f0 0194 	LDS  R31,_j+1
0006f8 9637      	ADIW R30,7
          _0x15E:
0006f9 9732      	SBIW R30,2
0006fa e1a5      	LDI  R26,LOW(21)
0006fb e0b0      	LDI  R27,HIGH(21)
0006fc d7e2      	RCALL __MULW12U
0006fd 56e1      	SUBI R30,LOW(-_line)
0006fe 4ffe      	SBCI R31,HIGH(-_line)
0006ff 93fa      	ST   -Y,R31
000700 93ea      	ST   -Y,R30
000701 d5c9      	RCALL _lcd_puts
         ;     801                                         }
         ;     802                                         lcd_gotoxy(0,1);               
000702 e0e0      	LDI  R30,LOW(0)
000703 93ea      	ST   -Y,R30
000704 e0e1      	LDI  R30,LOW(1)
000705 93ea      	ST   -Y,R30
000706 d579      	RCALL _lcd_gotoxy
         ;     803                                         if((j-1)>-1)
000707 91a0 0193 	LDS  R26,_j
000709 91b0 0194 	LDS  R27,_j+1
00070b 9711      	SBIW R26,1
00070c efef      	LDI  R30,LOW(65535)
00070d efff      	LDI  R31,HIGH(65535)
00070e 17ea      	CP   R30,R26
00070f 07fb      	CPC  R31,R27
000710 f42c      	BRGE _0x9F
         ;     804                                         {
         ;     805                                                  lcd_puts(line[j-1]);
000711 91e0 0193 	LDS  R30,_j
000713 91f0 0194 	LDS  R31,_j+1
000715 c005      	RJMP _0x15F
         ;     806                                         }
         ;     807                                         else
          _0x9F:
         ;     808                                         {
         ;     809                                                  lcd_puts(line[buffersize+j-1]);                               
000716 91e0 0193 	LDS  R30,_j
000718 91f0 0194 	LDS  R31,_j+1
00071a 9637      	ADIW R30,7
          _0x15F:
00071b 9731      	SBIW R30,1
00071c e1a5      	LDI  R26,LOW(21)
00071d e0b0      	LDI  R27,HIGH(21)
00071e d7c0      	RCALL __MULW12U
00071f 56e1      	SUBI R30,LOW(-_line)
000720 4ffe      	SBCI R31,HIGH(-_line)
000721 93fa      	ST   -Y,R31
000722 93ea      	ST   -Y,R30
000723 d5a7      	RCALL _lcd_puts
         ;     810                                         }
         ;     811                                         lcd_gotoxy(0,2);
000724 e0e0      	LDI  R30,LOW(0)
000725 93ea      	ST   -Y,R30
000726 e0e2      	LDI  R30,LOW(2)
000727 93ea      	ST   -Y,R30
000728 d557      	RCALL _lcd_gotoxy
         ;     812                                         lcd_puts(line[j]);                         
000729 91e0 0193 	LDS  R30,_j
00072b 91f0 0194 	LDS  R31,_j+1
00072d e1a5      	LDI  R26,LOW(21)
00072e e0b0      	LDI  R27,HIGH(21)
00072f d7af      	RCALL __MULW12U
000730 56e1      	SUBI R30,LOW(-_line)
000731 4ffe      	SBCI R31,HIGH(-_line)
000732 93fa      	ST   -Y,R31
000733 93ea      	ST   -Y,R30
000734 d596      	RCALL _lcd_puts
         ;     813                                         lcd_gotoxy(0,3);
000735 e0e0      	LDI  R30,LOW(0)
000736 93ea      	ST   -Y,R30
000737 e0e3      	LDI  R30,LOW(3)
000738 93ea      	ST   -Y,R30
000739 d546      	RCALL _lcd_gotoxy
         ;     814                                 ////printf("crlf line 1\n\r'%s'\n\r'                '\n\r",line[j]);
         ;     815                                 ////printf("line number is %i\ni is %i\n\r",j,i);
         ;     816                                 if((j+1)<buffersize)
00073a 91a0 0193 	LDS  R26,_j
00073c 91b0 0194 	LDS  R27,_j+1
00073e 9611      	ADIW R26,1
00073f 30a7      	CPI  R26,LOW(0x7)
000740 e0e0      	LDI  R30,HIGH(0x7)
000741 07be      	CPC  R27,R30
000742 f454      	BRGE _0xA1
         ;     817                                 j++;
000743 91e0 0193 	LDS  R30,_j
000745 91f0 0194 	LDS  R31,_j+1
000747 9631      	ADIW R30,1
000748 93e0 0193 	STS  _j,R30
00074a 93f0 0194 	STS  _j+1,R31
         ;     818                                 else
00074c c005      	RJMP _0xA2
          _0xA1:
         ;     819                                 j=0;
00074d e0e0      	LDI  R30,0
00074e 93e0 0193 	STS  _j,R30
000750 93e0 0194 	STS  _j+1,R30
         ;     820                                 lcd_gotoxy(0,3);
          _0xA2:
000752 e0e0      	LDI  R30,LOW(0)
000753 93ea      	ST   -Y,R30
000754 e0e3      	LDI  R30,LOW(3)
000755 93ea      	ST   -Y,R30
000756 d529      	RCALL _lcd_gotoxy
         ;     821                                 break;
000757 c4a9      	RJMP _0x8F
         ;     822                                 
         ;     823                         }
         ;     824                         else 
          _0x9C:
         ;     825                         
         ;     826                         {
         ;     827                                 //lcd_clear();
         ;     828                                 ////printf("crlf line 0\n\r'%s'\n\r'                '\n\r",line[j]);
         ;     829                                 ////printf("line number is %i\ni is %i\n\r",j,i);
         ;     830                                 if((j+1)<buffersize)
000758 91a0 0193 	LDS  R26,_j
00075a 91b0 0194 	LDS  R27,_j+1
00075c 9611      	ADIW R26,1
00075d 30a7      	CPI  R26,LOW(0x7)
00075e e0e0      	LDI  R30,HIGH(0x7)
00075f 07be      	CPC  R27,R30
000760 f454      	BRGE _0xA4
         ;     831                                 j++;
000761 91e0 0193 	LDS  R30,_j
000763 91f0 0194 	LDS  R31,_j+1
000765 9631      	ADIW R30,1
000766 93e0 0193 	STS  _j,R30
000768 93f0 0194 	STS  _j+1,R31
         ;     832                                 else
00076a c005      	RJMP _0xA5
          _0xA4:
         ;     833                                 j=0;
00076b e0e0      	LDI  R30,0
00076c 93e0 0193 	STS  _j,R30
00076e 93e0 0194 	STS  _j+1,R30
         ;     834                                 lineflag++;
          _0xA5:
000770 91e0 0232 	LDS  R30,_lineflag
000772 91f0 0233 	LDS  R31,_lineflag+1
000774 9631      	ADIW R30,1
000775 93e0 0232 	STS  _lineflag,R30
000777 93f0 0233 	STS  _lineflag+1,R31
         ;     835                                 lcd_gotoxy(i,lineflag);
000779 91e0 0197 	LDS  R30,_i
00077b 93ea      	ST   -Y,R30
00077c 91e0 0232 	LDS  R30,_lineflag
00077e 93ea      	ST   -Y,R30
00077f d500      	RCALL _lcd_gotoxy
         ;     836                         } 
         ;     837                               
         ;     838                         break; 
000780 c480      	RJMP _0x8F
         ;     839                         
         ;     840                         case bla:
          _0x91:
000781 30e2      	CPI  R30,LOW(0x2)
000782 e0a0      	LDI  R26,HIGH(0x2)
000783 07fa      	CPC  R31,R26
000784 f009      	BREQ PC+2
000785 c19e      	RJMP _0xA6
         ;     841                         if(wasscroll==1)
000786 fe21      	SBRS R2,1
000787 c085      	RJMP _0xA7
         ;     842                         {
         ;     843                                 //printf("wasscroll just got cleared by crlf");
         ;     844                                 j=jstore;
000788 91e0 019d 	LDS  R30,_jstore
00078a 91f0 019e 	LDS  R31,_jstore+1
00078c 93e0 0193 	STS  _j,R30
00078e 93f0 0194 	STS  _j+1,R31
         ;     845                                 i=istore;
000790 91e0 0191 	LDS  R30,_istore
000792 91f0 0192 	LDS  R31,_istore+1
000794 93e0 0197 	STS  _i,R30
000796 93f0 0198 	STS  _i+1,R31
         ;     846                                 lcd_clear();
000798 d4f9      	RCALL _lcd_clear
         ;     847                                         
         ;     848                                         if((j-3)>-1)
000799 91a0 0193 	LDS  R26,_j
00079b 91b0 0194 	LDS  R27,_j+1
00079d 9713      	SBIW R26,3
00079e efef      	LDI  R30,LOW(65535)
00079f efff      	LDI  R31,HIGH(65535)
0007a0 17ea      	CP   R30,R26
0007a1 07fb      	CPC  R31,R27
0007a2 f42c      	BRGE _0xA8
         ;     849                                         {
         ;     850                                                  lcd_puts(line[j-3]);      
0007a3 91e0 0193 	LDS  R30,_j
0007a5 91f0 0194 	LDS  R31,_j+1
0007a7 c005      	RJMP _0x160
         ;     851                                         }
         ;     852                                         else
          _0xA8:
         ;     853                                         {
         ;     854                                                  lcd_puts(line[buffersize+j-3]);                                               
0007a8 91e0 0193 	LDS  R30,_j
0007aa 91f0 0194 	LDS  R31,_j+1
0007ac 9637      	ADIW R30,7
          _0x160:
0007ad 9733      	SBIW R30,3
0007ae e1a5      	LDI  R26,LOW(21)
0007af e0b0      	LDI  R27,HIGH(21)
0007b0 d72e      	RCALL __MULW12U
0007b1 56e1      	SUBI R30,LOW(-_line)
0007b2 4ffe      	SBCI R31,HIGH(-_line)
0007b3 93fa      	ST   -Y,R31
0007b4 93ea      	ST   -Y,R30
0007b5 d515      	RCALL _lcd_puts
         ;     855                                         }
         ;     856                                         lcd_gotoxy(0,1);               
0007b6 e0e0      	LDI  R30,LOW(0)
0007b7 93ea      	ST   -Y,R30
0007b8 e0e1      	LDI  R30,LOW(1)
0007b9 93ea      	ST   -Y,R30
0007ba d4c5      	RCALL _lcd_gotoxy
         ;     857                                         if((j-2)>-1)
0007bb 91a0 0193 	LDS  R26,_j
0007bd 91b0 0194 	LDS  R27,_j+1
0007bf 9712      	SBIW R26,2
0007c0 efef      	LDI  R30,LOW(65535)
0007c1 efff      	LDI  R31,HIGH(65535)
0007c2 17ea      	CP   R30,R26
0007c3 07fb      	CPC  R31,R27
0007c4 f42c      	BRGE _0xAA
         ;     858                                         {
         ;     859                                                  lcd_puts(line[j-2]);
0007c5 91e0 0193 	LDS  R30,_j
0007c7 91f0 0194 	LDS  R31,_j+1
0007c9 c005      	RJMP _0x161
         ;     860                                         }
         ;     861                                         else
          _0xAA:
         ;     862                                         {
         ;     863                                                  lcd_puts(line[buffersize+j-2]);                               
0007ca 91e0 0193 	LDS  R30,_j
0007cc 91f0 0194 	LDS  R31,_j+1
0007ce 9637      	ADIW R30,7
          _0x161:
0007cf 9732      	SBIW R30,2
0007d0 e1a5      	LDI  R26,LOW(21)
0007d1 e0b0      	LDI  R27,HIGH(21)
0007d2 d70c      	RCALL __MULW12U
0007d3 56e1      	SUBI R30,LOW(-_line)
0007d4 4ffe      	SBCI R31,HIGH(-_line)
0007d5 93fa      	ST   -Y,R31
0007d6 93ea      	ST   -Y,R30
0007d7 d4f3      	RCALL _lcd_puts
         ;     864                                         }
         ;     865                                         lcd_gotoxy(0,2);
0007d8 e0e0      	LDI  R30,LOW(0)
0007d9 93ea      	ST   -Y,R30
0007da e0e2      	LDI  R30,LOW(2)
0007db 93ea      	ST   -Y,R30
0007dc d4a3      	RCALL _lcd_gotoxy
         ;     866                                         if((j-1)>-1)
0007dd 91a0 0193 	LDS  R26,_j
0007df 91b0 0194 	LDS  R27,_j+1
0007e1 9711      	SBIW R26,1
0007e2 efef      	LDI  R30,LOW(65535)
0007e3 efff      	LDI  R31,HIGH(65535)
0007e4 17ea      	CP   R30,R26
0007e5 07fb      	CPC  R31,R27
0007e6 f42c      	BRGE _0xAC
         ;     867                                         {
         ;     868                                                  lcd_puts(line[j-1]);
0007e7 91e0 0193 	LDS  R30,_j
0007e9 91f0 0194 	LDS  R31,_j+1
0007eb c005      	RJMP _0x162
         ;     869                                         }
         ;     870                                         else
          _0xAC:
         ;     871                                         {
         ;     872                                                  lcd_puts(line[buffersize+j-1]);                               
0007ec 91e0 0193 	LDS  R30,_j
0007ee 91f0 0194 	LDS  R31,_j+1
0007f0 9637      	ADIW R30,7
          _0x162:
0007f1 9731      	SBIW R30,1
0007f2 e1a5      	LDI  R26,LOW(21)
0007f3 e0b0      	LDI  R27,HIGH(21)
0007f4 d6ea      	RCALL __MULW12U
0007f5 56e1      	SUBI R30,LOW(-_line)
0007f6 4ffe      	SBCI R31,HIGH(-_line)
0007f7 93fa      	ST   -Y,R31
0007f8 93ea      	ST   -Y,R30
0007f9 d4d1      	RCALL _lcd_puts
         ;     873                                         }
         ;     874                                                                  
         ;     875                                         lcd_gotoxy(0,3);
0007fa e0e0      	LDI  R30,LOW(0)
0007fb 93ea      	ST   -Y,R30
0007fc e0e3      	LDI  R30,LOW(3)
0007fd 93ea      	ST   -Y,R30
0007fe d481      	RCALL _lcd_gotoxy
         ;     876                                         lcd_puts(line[j]);
0007ff 91e0 0193 	LDS  R30,_j
000801 91f0 0194 	LDS  R31,_j+1
000803 e1a5      	LDI  R26,LOW(21)
000804 e0b0      	LDI  R27,HIGH(21)
000805 d6d9      	RCALL __MULW12U
000806 56e1      	SUBI R30,LOW(-_line)
000807 4ffe      	SBCI R31,HIGH(-_line)
000808 93fa      	ST   -Y,R31
000809 93ea      	ST   -Y,R30
00080a d4c0      	RCALL _lcd_puts
         ;     877                                         wasscroll=0;
00080b 94e8      	CLT
00080c f821      	BLD  R2,1
         ;     878                         }
         ;     879                         
         ;     880                         if(s<0x20)
          _0xA7:
00080d 81a8      	LD   R26,Y
00080e 32a0      	CPI  R26,LOW(0x20)
00080f f408      	BRSH _0xAE
         ;     881                         break;
000810 c3f0      	RJMP _0x8F
         ;     882                         if(i<20)
          _0xAE:
000811 91a0 0197 	LDS  R26,_i
000813 91b0 0198 	LDS  R27,_i+1
000815 31a4      	CPI  R26,LOW(0x14)
000816 e0e0      	LDI  R30,HIGH(0x14)
000817 07be      	CPC  R27,R30
000818 f00c      	BRLT PC+2
000819 c043      	RJMP _0xAF
         ;     883                         {       
         ;     884                                 line[j][i]=s;
00081a 91e0 0193 	LDS  R30,_j
00081c 91f0 0194 	LDS  R31,_j+1
00081e e1a5      	LDI  R26,LOW(21)
00081f e0b0      	LDI  R27,HIGH(21)
000820 d6be      	RCALL __MULW12U
000821 56e1      	SUBI R30,LOW(-_line)
000822 4ffe      	SBCI R31,HIGH(-_line)
000823 91a0 0197 	LDS  R26,_i
000825 91b0 0198 	LDS  R27,_i+1
000827 0fea      	ADD  R30,R26
000828 1ffb      	ADC  R31,R27
000829 81a8      	LD   R26,Y
00082a 83a0      	STD  Z+0,R26
         ;     885                                 ////printf("buffer was updated j=%i i=%i s=%c\n\r",j,i,s); 
         ;     886                                 lcd_gotoxy(i,lineflag);
00082b 91e0 0197 	LDS  R30,_i
00082d 93ea      	ST   -Y,R30
00082e 91e0 0232 	LDS  R30,_lineflag
000830 93ea      	ST   -Y,R30
000831 d44e      	RCALL _lcd_gotoxy
         ;     887                                 lcd_putchar(s);
000832 81e8      	LD   R30,Y
000833 93ea      	ST   -Y,R30
000834 d46f      	RCALL _lcd_putchar
         ;     888                                 if(i==19)
000835 91a0 0197 	LDS  R26,_i
000837 91b0 0198 	LDS  R27,_i+1
000839 31a3      	CPI  R26,LOW(0x13)
00083a e0e0      	LDI  R30,HIGH(0x13)
00083b 07be      	CPC  R27,R30
00083c f4b1      	BRNE _0xB0
         ;     889                                 {
         ;     890                                 if(lineflag!=3)
00083d 91a0 0232 	LDS  R26,_lineflag
00083f 91b0 0233 	LDS  R27,_lineflag+1
000841 30a3      	CPI  R26,LOW(0x3)
000842 e0e0      	LDI  R30,HIGH(0x3)
000843 07be      	CPC  R27,R30
000844 f051      	BREQ _0xB1
         ;     891                                 lcd_gotoxy(0,lineflag+1);
000845 e0e0      	LDI  R30,LOW(0)
000846 93ea      	ST   -Y,R30
000847 91e0 0232 	LDS  R30,_lineflag
000849 91f0 0233 	LDS  R31,_lineflag+1
00084b 9631      	ADIW R30,1
00084c 93ea      	ST   -Y,R30
00084d d432      	RCALL _lcd_gotoxy
         ;     892                                 else
00084e c004      	RJMP _0xB2
          _0xB1:
         ;     893                                 {
         ;     894                                 _lcd_ready();
00084f d3ef      	RCALL __lcd_ready
         ;     895                                 _lcd_write_data(0x0c);
000850 e0ec      	LDI  R30,LOW(12)
000851 93ea      	ST   -Y,R30
000852 d405      	RCALL __lcd_write_data
         ;     896                                 }
          _0xB2:
         ;     897                                 }
         ;     898                         
         ;     899                                 
         ;     900                                 ////printf("buffer contains \n\r'%s'\n\r",line[j]);
         ;     901                                 i++;  
          _0xB0:
000853 91e0 0197 	LDS  R30,_i
000855 91f0 0198 	LDS  R31,_i+1
000857 9631      	ADIW R30,1
000858 93e0 0197 	STS  _i,R30
00085a 93f0 0198 	STS  _i+1,R31
         ;     902                                 ////printf("%i",i);
         ;     903                         }  
         ;     904                         else
00085c c0c6      	RJMP _0xB3
          _0xAF:
         ;     905                         {       
         ;     906                                 if(lineflag!=3)
00085d 91a0 0232 	LDS  R26,_lineflag
00085f 91b0 0233 	LDS  R27,_lineflag+1
000861 30a3      	CPI  R26,LOW(0x3)
000862 e0e0      	LDI  R30,HIGH(0x3)
000863 07be      	CPC  R27,R30
000864 f1e1      	BREQ _0xB4
         ;     907                                 {
         ;     908                                         if((j+1)<buffersize)
000865 91a0 0193 	LDS  R26,_j
000867 91b0 0194 	LDS  R27,_j+1
000869 9611      	ADIW R26,1
00086a 30a7      	CPI  R26,LOW(0x7)
00086b e0e0      	LDI  R30,HIGH(0x7)
00086c 07be      	CPC  R27,R30
00086d f454      	BRGE _0xB5
         ;     909                                             j++;
00086e 91e0 0193 	LDS  R30,_j
000870 91f0 0194 	LDS  R31,_j+1
000872 9631      	ADIW R30,1
000873 93e0 0193 	STS  _j,R30
000875 93f0 0194 	STS  _j+1,R31
         ;     910                                         else
000877 c005      	RJMP _0xB6
          _0xB5:
         ;     911                                             j=0;
000878 e0e0      	LDI  R30,0
000879 93e0 0193 	STS  _j,R30
00087b 93e0 0194 	STS  _j+1,R30
         ;     912                                         ////printf("line down j is %i\n\r",j);
         ;     913                                         
         ;     914                                         lineflag++;
          _0xB6:
00087d 91e0 0232 	LDS  R30,_lineflag
00087f 91f0 0233 	LDS  R31,_lineflag+1
000881 9631      	ADIW R30,1
000882 93e0 0232 	STS  _lineflag,R30
000884 93f0 0233 	STS  _lineflag+1,R31
         ;     915                                         //printf("%i",lineflag);
         ;     916                                         lcd_gotoxy(0,lineflag);
000886 e0e0      	LDI  R30,LOW(0)
000887 93ea      	ST   -Y,R30
000888 91e0 0232 	LDS  R30,_lineflag
00088a 93ea      	ST   -Y,R30
00088b d3f4      	RCALL _lcd_gotoxy
         ;     917                                         lcd_putchar(s);
00088c 81e8      	LD   R30,Y
00088d 93ea      	ST   -Y,R30
00088e d415      	RCALL _lcd_putchar
         ;     918                                         i=1; 
00088f e0e1      	LDI  R30,LOW(1)
000890 e0f0      	LDI  R31,HIGH(1)
000891 93e0 0197 	STS  _i,R30
000893 93f0 0198 	STS  _i+1,R31
         ;     919                                         line[j][0]=s;                                        
000895 91e0 0193 	LDS  R30,_j
000897 91f0 0194 	LDS  R31,_j+1
000899 e1a5      	LDI  R26,LOW(21)
00089a e0b0      	LDI  R27,HIGH(21)
00089b d643      	RCALL __MULW12U
00089c 56e1      	SUBI R30,LOW(-_line)
00089d 4ffe      	SBCI R31,HIGH(-_line)
00089e 81a8      	LD   R26,Y
00089f 83a0      	STD  Z+0,R26
         ;     920                                         break;
0008a0 c360      	RJMP _0x8F
         ;     921                                 }
         ;     922                                 else
          _0xB4:
         ;     923                                 {      
         ;     924 
         ;     925 
         ;     926                                 
         ;     927                                         lcd_clear();
0008a1 d3f0      	RCALL _lcd_clear
         ;     928                                         
         ;     929                                         if((j-2)>-1)
0008a2 91a0 0193 	LDS  R26,_j
0008a4 91b0 0194 	LDS  R27,_j+1
0008a6 9712      	SBIW R26,2
0008a7 efef      	LDI  R30,LOW(65535)
0008a8 efff      	LDI  R31,HIGH(65535)
0008a9 17ea      	CP   R30,R26
0008aa 07fb      	CPC  R31,R27
0008ab f42c      	BRGE _0xB8
         ;     930                                         {
         ;     931                                                  lcd_puts(line[j-2]);      
0008ac 91e0 0193 	LDS  R30,_j
0008ae 91f0 0194 	LDS  R31,_j+1
0008b0 c005      	RJMP _0x163
         ;     932                                         }
         ;     933                                         else
          _0xB8:
         ;     934                                         {
         ;     935                                                  lcd_puts(line[buffersize+j-2]);                                               
0008b1 91e0 0193 	LDS  R30,_j
0008b3 91f0 0194 	LDS  R31,_j+1
0008b5 9637      	ADIW R30,7
          _0x163:
0008b6 9732      	SBIW R30,2
0008b7 e1a5      	LDI  R26,LOW(21)
0008b8 e0b0      	LDI  R27,HIGH(21)
0008b9 d625      	RCALL __MULW12U
0008ba 56e1      	SUBI R30,LOW(-_line)
0008bb 4ffe      	SBCI R31,HIGH(-_line)
0008bc 93fa      	ST   -Y,R31
0008bd 93ea      	ST   -Y,R30
0008be d40c      	RCALL _lcd_puts
         ;     936                                         }
         ;     937                                         lcd_gotoxy(0,1);               
0008bf e0e0      	LDI  R30,LOW(0)
0008c0 93ea      	ST   -Y,R30
0008c1 e0e1      	LDI  R30,LOW(1)
0008c2 93ea      	ST   -Y,R30
0008c3 d3bc      	RCALL _lcd_gotoxy
         ;     938                                         if((j-1)>-1)
0008c4 91a0 0193 	LDS  R26,_j
0008c6 91b0 0194 	LDS  R27,_j+1
0008c8 9711      	SBIW R26,1
0008c9 efef      	LDI  R30,LOW(65535)
0008ca efff      	LDI  R31,HIGH(65535)
0008cb 17ea      	CP   R30,R26
0008cc 07fb      	CPC  R31,R27
0008cd f42c      	BRGE _0xBA
         ;     939                                         {
         ;     940                                                  lcd_puts(line[j-1]);
0008ce 91e0 0193 	LDS  R30,_j
0008d0 91f0 0194 	LDS  R31,_j+1
0008d2 c005      	RJMP _0x164
         ;     941                                         }
         ;     942                                         else
          _0xBA:
         ;     943                                         {
         ;     944                                                  lcd_puts(line[buffersize+j-1]);                               
0008d3 91e0 0193 	LDS  R30,_j
0008d5 91f0 0194 	LDS  R31,_j+1
0008d7 9637      	ADIW R30,7
          _0x164:
0008d8 9731      	SBIW R30,1
0008d9 e1a5      	LDI  R26,LOW(21)
0008da e0b0      	LDI  R27,HIGH(21)
0008db d603      	RCALL __MULW12U
0008dc 56e1      	SUBI R30,LOW(-_line)
0008dd 4ffe      	SBCI R31,HIGH(-_line)
0008de 93fa      	ST   -Y,R31
0008df 93ea      	ST   -Y,R30
0008e0 d3ea      	RCALL _lcd_puts
         ;     945                                         }
         ;     946                                         lcd_gotoxy(0,2);
0008e1 e0e0      	LDI  R30,LOW(0)
0008e2 93ea      	ST   -Y,R30
0008e3 e0e2      	LDI  R30,LOW(2)
0008e4 93ea      	ST   -Y,R30
0008e5 d39a      	RCALL _lcd_gotoxy
         ;     947                                         lcd_puts(line[j]);                         
0008e6 91e0 0193 	LDS  R30,_j
0008e8 91f0 0194 	LDS  R31,_j+1
0008ea e1a5      	LDI  R26,LOW(21)
0008eb e0b0      	LDI  R27,HIGH(21)
0008ec d5f2      	RCALL __MULW12U
0008ed 56e1      	SUBI R30,LOW(-_line)
0008ee 4ffe      	SBCI R31,HIGH(-_line)
0008ef 93fa      	ST   -Y,R31
0008f0 93ea      	ST   -Y,R30
0008f1 d3d9      	RCALL _lcd_puts
         ;     948                                         lcd_gotoxy(0,3);
0008f2 e0e0      	LDI  R30,LOW(0)
0008f3 93ea      	ST   -Y,R30
0008f4 e0e3      	LDI  R30,LOW(3)
0008f5 93ea      	ST   -Y,R30
0008f6 d389      	RCALL _lcd_gotoxy
         ;     949                                         
         ;     950                                         
         ;     951                                         ////printf("j is currently %i\n\r",j);
         ;     952                                         ////printf("buffern contains \n\r%s\n\r",line[j]);
         ;     953                                         
         ;     954                                         if((j+1)<buffersize)
0008f7 91a0 0193 	LDS  R26,_j
0008f9 91b0 0194 	LDS  R27,_j+1
0008fb 9611      	ADIW R26,1
0008fc 30a7      	CPI  R26,LOW(0x7)
0008fd e0e0      	LDI  R30,HIGH(0x7)
0008fe 07be      	CPC  R27,R30
0008ff f454      	BRGE _0xBC
         ;     955                                         j++;
000900 91e0 0193 	LDS  R30,_j
000902 91f0 0194 	LDS  R31,_j+1
000904 9631      	ADIW R30,1
000905 93e0 0193 	STS  _j,R30
000907 93f0 0194 	STS  _j+1,R31
         ;     956                                         else
000909 c005      	RJMP _0xBD
          _0xBC:
         ;     957                                         j=0;
00090a e0e0      	LDI  R30,0
00090b 93e0 0193 	STS  _j,R30
00090d 93e0 0194 	STS  _j+1,R30
         ;     958                                         lcd_putchar(s);
          _0xBD:
00090f 81e8      	LD   R30,Y
000910 93ea      	ST   -Y,R30
000911 d392      	RCALL _lcd_putchar
         ;     959                                         line[j][0]=s;
000912 91e0 0193 	LDS  R30,_j
000914 91f0 0194 	LDS  R31,_j+1
000916 e1a5      	LDI  R26,LOW(21)
000917 e0b0      	LDI  R27,HIGH(21)
000918 d5c6      	RCALL __MULW12U
000919 56e1      	SUBI R30,LOW(-_line)
00091a 4ffe      	SBCI R31,HIGH(-_line)
00091b 81a8      	LD   R26,Y
00091c 83a0      	STD  Z+0,R26
         ;     960                                         i=1;
00091d e0e1      	LDI  R30,LOW(1)
00091e e0f0      	LDI  R31,HIGH(1)
00091f 93e0 0197 	STS  _i,R30
000921 93f0 0198 	STS  _i+1,R31
         ;     961                                         
         ;     962                                         ////printf("line over flow \n%s\n\r",line[j]);
         ;     963                                         ////printf("line number is %i\ni is %i\n\r",j,i);       
         ;     964                                 }
         ;     965                         }
          _0xB3:
         ;     966                         
         ;     967                         break;
000923 c2dd      	RJMP _0x8F
         ;     968                         case bkspce:
          _0xA6:
000924 30e3      	CPI  R30,LOW(0x3)
000925 e0a0      	LDI  R26,HIGH(0x3)
000926 07fa      	CPC  R31,R26
000927 f009      	BREQ PC+2
000928 c123      	RJMP _0xBE
         ;     969                         if(wasscroll==1)
000929 fe21      	SBRS R2,1
00092a c085      	RJMP _0xBF
         ;     970                         {
         ;     971                                 //printf("wasscroll just got cleared by crlf");
         ;     972                                 j=jstore;
00092b 91e0 019d 	LDS  R30,_jstore
00092d 91f0 019e 	LDS  R31,_jstore+1
00092f 93e0 0193 	STS  _j,R30
000931 93f0 0194 	STS  _j+1,R31
         ;     973                                 i=istore;
000933 91e0 0191 	LDS  R30,_istore
000935 91f0 0192 	LDS  R31,_istore+1
000937 93e0 0197 	STS  _i,R30
000939 93f0 0198 	STS  _i+1,R31
         ;     974                                 lcd_clear();
00093b d356      	RCALL _lcd_clear
         ;     975                                         
         ;     976                                         if((j-3)>-1)
00093c 91a0 0193 	LDS  R26,_j
00093e 91b0 0194 	LDS  R27,_j+1
000940 9713      	SBIW R26,3
000941 efef      	LDI  R30,LOW(65535)
000942 efff      	LDI  R31,HIGH(65535)
000943 17ea      	CP   R30,R26
000944 07fb      	CPC  R31,R27
000945 f42c      	BRGE _0xC0
         ;     977                                         {
         ;     978                                                  lcd_puts(line[j-3]);      
000946 91e0 0193 	LDS  R30,_j
000948 91f0 0194 	LDS  R31,_j+1
00094a c005      	RJMP _0x165
         ;     979                                         }
         ;     980                                         else
          _0xC0:
         ;     981                                         {
         ;     982                                                  lcd_puts(line[buffersize+j-3]);                                               
00094b 91e0 0193 	LDS  R30,_j
00094d 91f0 0194 	LDS  R31,_j+1
00094f 9637      	ADIW R30,7
          _0x165:
000950 9733      	SBIW R30,3
000951 e1a5      	LDI  R26,LOW(21)
000952 e0b0      	LDI  R27,HIGH(21)
000953 d58b      	RCALL __MULW12U
000954 56e1      	SUBI R30,LOW(-_line)
000955 4ffe      	SBCI R31,HIGH(-_line)
000956 93fa      	ST   -Y,R31
000957 93ea      	ST   -Y,R30
000958 d372      	RCALL _lcd_puts
         ;     983                                         }
         ;     984                                         lcd_gotoxy(0,1);               
000959 e0e0      	LDI  R30,LOW(0)
00095a 93ea      	ST   -Y,R30
00095b e0e1      	LDI  R30,LOW(1)
00095c 93ea      	ST   -Y,R30
00095d d322      	RCALL _lcd_gotoxy
         ;     985                                         if((j-2)>-1)
00095e 91a0 0193 	LDS  R26,_j
000960 91b0 0194 	LDS  R27,_j+1
000962 9712      	SBIW R26,2
000963 efef      	LDI  R30,LOW(65535)
000964 efff      	LDI  R31,HIGH(65535)
000965 17ea      	CP   R30,R26
000966 07fb      	CPC  R31,R27
000967 f42c      	BRGE _0xC2
         ;     986                                         {
         ;     987                                                  lcd_puts(line[j-2]);
000968 91e0 0193 	LDS  R30,_j
00096a 91f0 0194 	LDS  R31,_j+1
00096c c005      	RJMP _0x166
         ;     988                                         }
         ;     989                                         else
          _0xC2:
         ;     990                                         {
         ;     991                                                  lcd_puts(line[buffersize+j-2]);                               
00096d 91e0 0193 	LDS  R30,_j
00096f 91f0 0194 	LDS  R31,_j+1
000971 9637      	ADIW R30,7
          _0x166:
000972 9732      	SBIW R30,2
000973 e1a5      	LDI  R26,LOW(21)
000974 e0b0      	LDI  R27,HIGH(21)
000975 d569      	RCALL __MULW12U
000976 56e1      	SUBI R30,LOW(-_line)
000977 4ffe      	SBCI R31,HIGH(-_line)
000978 93fa      	ST   -Y,R31
000979 93ea      	ST   -Y,R30
00097a d350      	RCALL _lcd_puts
         ;     992                                         }
         ;     993                                         lcd_gotoxy(0,2);
00097b e0e0      	LDI  R30,LOW(0)
00097c 93ea      	ST   -Y,R30
00097d e0e2      	LDI  R30,LOW(2)
00097e 93ea      	ST   -Y,R30
00097f d300      	RCALL _lcd_gotoxy
         ;     994                                         if((j-1)>-1)
000980 91a0 0193 	LDS  R26,_j
000982 91b0 0194 	LDS  R27,_j+1
000984 9711      	SBIW R26,1
000985 efef      	LDI  R30,LOW(65535)
000986 efff      	LDI  R31,HIGH(65535)
000987 17ea      	CP   R30,R26
000988 07fb      	CPC  R31,R27
000989 f42c      	BRGE _0xC4
         ;     995                                         {
         ;     996                                                  lcd_puts(line[j-1]);
00098a 91e0 0193 	LDS  R30,_j
00098c 91f0 0194 	LDS  R31,_j+1
00098e c005      	RJMP _0x167
         ;     997                                         }
         ;     998                                         else
          _0xC4:
         ;     999                                         {
         ;    1000                                                  lcd_puts(line[buffersize+j-1]);                               
00098f 91e0 0193 	LDS  R30,_j
000991 91f0 0194 	LDS  R31,_j+1
000993 9637      	ADIW R30,7
          _0x167:
000994 9731      	SBIW R30,1
000995 e1a5      	LDI  R26,LOW(21)
000996 e0b0      	LDI  R27,HIGH(21)
000997 d547      	RCALL __MULW12U
000998 56e1      	SUBI R30,LOW(-_line)
000999 4ffe      	SBCI R31,HIGH(-_line)
00099a 93fa      	ST   -Y,R31
00099b 93ea      	ST   -Y,R30
00099c d32e      	RCALL _lcd_puts
         ;    1001                                         }
         ;    1002                                                                  
         ;    1003                                         lcd_gotoxy(0,3);
00099d e0e0      	LDI  R30,LOW(0)
00099e 93ea      	ST   -Y,R30
00099f e0e3      	LDI  R30,LOW(3)
0009a0 93ea      	ST   -Y,R30
0009a1 d2de      	RCALL _lcd_gotoxy
         ;    1004                                         lcd_puts(line[j]);
0009a2 91e0 0193 	LDS  R30,_j
0009a4 91f0 0194 	LDS  R31,_j+1
0009a6 e1a5      	LDI  R26,LOW(21)
0009a7 e0b0      	LDI  R27,HIGH(21)
0009a8 d536      	RCALL __MULW12U
0009a9 56e1      	SUBI R30,LOW(-_line)
0009aa 4ffe      	SBCI R31,HIGH(-_line)
0009ab 93fa      	ST   -Y,R31
0009ac 93ea      	ST   -Y,R30
0009ad d31d      	RCALL _lcd_puts
         ;    1005                                         wasscroll=0;
0009ae 94e8      	CLT
0009af f821      	BLD  R2,1
         ;    1006                         }
         ;    1007                         if(i!=0) //if you are not at the start of a line
          _0xBF:
0009b0 91e0 0197 	LDS  R30,_i
0009b2 91f0 0198 	LDS  R31,_i+1
0009b4 9730      	SBIW R30,0
0009b5 f141      	BREQ _0xC6
         ;    1008                         {      
         ;    1009                                 
         ;    1010                                 i--;
0009b6 9731      	SBIW R30,1
0009b7 93e0 0197 	STS  _i,R30
0009b9 93f0 0198 	STS  _i+1,R31
         ;    1011                                 
         ;    1012                                 lcd_gotoxy(i,lineflag);
0009bb 91e0 0197 	LDS  R30,_i
0009bd 93ea      	ST   -Y,R30
0009be 91e0 0232 	LDS  R30,_lineflag
0009c0 93ea      	ST   -Y,R30
0009c1 d2be      	RCALL _lcd_gotoxy
         ;    1013                                 lcd_putchar(0x20);
0009c2 e2e0      	LDI  R30,LOW(32)
0009c3 93ea      	ST   -Y,R30
0009c4 d2df      	RCALL _lcd_putchar
         ;    1014                                 lcd_gotoxy(i,lineflag);
0009c5 91e0 0197 	LDS  R30,_i
0009c7 93ea      	ST   -Y,R30
0009c8 91e0 0232 	LDS  R30,_lineflag
0009ca 93ea      	ST   -Y,R30
0009cb d2b4      	RCALL _lcd_gotoxy
         ;    1015                                 line[j][i]=(0x20);
0009cc 91e0 0193 	LDS  R30,_j
0009ce 91f0 0194 	LDS  R31,_j+1
0009d0 e1a5      	LDI  R26,LOW(21)
0009d1 e0b0      	LDI  R27,HIGH(21)
0009d2 d50c      	RCALL __MULW12U
0009d3 56e1      	SUBI R30,LOW(-_line)
0009d4 4ffe      	SBCI R31,HIGH(-_line)
0009d5 91a0 0197 	LDS  R26,_i
0009d7 91b0 0198 	LDS  R27,_i+1
0009d9 0fae      	ADD  R26,R30
0009da 1fbf      	ADC  R27,R31
0009db e2e0      	LDI  R30,LOW(32)
0009dc 93ec      	ST   X,R30
         ;    1016                         }
         ;    1017                         else
0009dd c06d      	RJMP _0xC7
          _0xC6:
         ;    1018                         {     printf("%i",lineflag);          
0009de   +  	__POINTW1FN _0,154
0009e0 93fa      	ST   -Y,R31
0009e1 93ea      	ST   -Y,R30
0009e2 91e0 0232 	LDS  R30,_lineflag
0009e4 91f0 0233 	LDS  R31,_lineflag+1
0009e6 d4f3      	RCALL __CWD1
0009e7 d512      	RCALL __PUTPARD1
0009e8 e084      	LDI  R24,4
0009e9 d4b2      	RCALL _printf
0009ea 9626      	ADIW R28,6
         ;    1019                                         if(lineflag!=0)
0009eb 91e0 0232 	LDS  R30,_lineflag
0009ed 91f0 0233 	LDS  R31,_lineflag+1
0009ef 9730      	SBIW R30,0
0009f0 f031      	BREQ _0xC8
         ;    1020                                         lineflag--;
0009f1 9731      	SBIW R30,1
0009f2 93e0 0232 	STS  _lineflag,R30
0009f4 93f0 0233 	STS  _lineflag+1,R31
         ;    1021                                         else
0009f6 c01a      	RJMP _0xC9
          _0xC8:
         ;    1022                                         {
         ;    1023                                                 if(j>0)
0009f7 91a0 0193 	LDS  R26,_j
0009f9 91b0 0194 	LDS  R27,_j+1
0009fb d503      	RCALL __CPW02
0009fc f434      	BRGE _0xCA
         ;    1024                                                 j--;
0009fd 91e0 0193 	LDS  R30,_j
0009ff 91f0 0194 	LDS  R31,_j+1
000a01 9731      	SBIW R30,1
000a02 c002      	RJMP _0x168
         ;    1025                                                 else
          _0xCA:
         ;    1026                                                 j=buffersize-1;
000a03 e0e6      	LDI  R30,LOW(6)
000a04 e0f0      	LDI  R31,HIGH(6)
          _0x168:
000a05 93e0 0193 	STS  _j,R30
000a07 93f0 0194 	STS  _j+1,R31
         ;    1027                                                 lcd_puts(line[j]);
000a09 e1a5      	LDI  R26,LOW(21)
000a0a e0b0      	LDI  R27,HIGH(21)
000a0b d4d3      	RCALL __MULW12U
000a0c 56e1      	SUBI R30,LOW(-_line)
000a0d 4ffe      	SBCI R31,HIGH(-_line)
000a0e 93fa      	ST   -Y,R31
000a0f 93ea      	ST   -Y,R30
000a10 d2ba      	RCALL _lcd_puts
         ;    1028                                         }
          _0xC9:
         ;    1029                                         i=19;
000a11 e1e3      	LDI  R30,LOW(19)
000a12 e0f0      	LDI  R31,HIGH(19)
000a13 93e0 0197 	STS  _i,R30
000a15 93f0 0198 	STS  _i+1,R31
         ;    1030                                         lcd_gotoxy(i,lineflag);
000a17 91e0 0197 	LDS  R30,_i
000a19 93ea      	ST   -Y,R30
000a1a 91e0 0232 	LDS  R30,_lineflag
000a1c 93ea      	ST   -Y,R30
000a1d d262      	RCALL _lcd_gotoxy
         ;    1031                                         lcd_putchar(0x20);
000a1e e2e0      	LDI  R30,LOW(32)
000a1f 93ea      	ST   -Y,R30
000a20 d283      	RCALL _lcd_putchar
         ;    1032                                         line[j][i]=0x20;
000a21 91e0 0193 	LDS  R30,_j
000a23 91f0 0194 	LDS  R31,_j+1
000a25 e1a5      	LDI  R26,LOW(21)
000a26 e0b0      	LDI  R27,HIGH(21)
000a27 d4b7      	RCALL __MULW12U
000a28 56e1      	SUBI R30,LOW(-_line)
000a29 4ffe      	SBCI R31,HIGH(-_line)
000a2a 91a0 0197 	LDS  R26,_i
000a2c 91b0 0198 	LDS  R27,_i+1
000a2e 0fae      	ADD  R26,R30
000a2f 1fbf      	ADC  R27,R31
000a30 e2e0      	LDI  R30,LOW(32)
000a31 93ec      	ST   X,R30
         ;    1033                                         lcd_gotoxy(i,lineflag);      
000a32 91e0 0197 	LDS  R30,_i
000a34 93ea      	ST   -Y,R30
000a35 91e0 0232 	LDS  R30,_lineflag
000a37 93ea      	ST   -Y,R30
000a38 d247      	RCALL _lcd_gotoxy
         ;    1034                                         if(j>0)
000a39 91a0 0193 	LDS  R26,_j
000a3b 91b0 0194 	LDS  R27,_j+1
000a3d d4c1      	RCALL __CPW02
000a3e f434      	BRGE _0xCC
         ;    1035                                         j--;
000a3f 91e0 0193 	LDS  R30,_j
000a41 91f0 0194 	LDS  R31,_j+1
000a43 9731      	SBIW R30,1
000a44 c002      	RJMP _0x169
         ;    1036                                         else
          _0xCC:
         ;    1037                                         j=buffersize-1;
000a45 e0e6      	LDI  R30,LOW(6)
000a46 e0f0      	LDI  R31,HIGH(6)
          _0x169:
000a47 93e0 0193 	STS  _j,R30
000a49 93f0 0194 	STS  _j+1,R31
         ;    1038                                         
         ;    1039                                         
         ;    1040                                         
         ;    1041                                 
         ;    1042                                 
         ;    1043                         }
          _0xC7:
         ;    1044                         
         ;    1045                                 break;
000a4b c1b5      	RJMP _0x8F
         ;    1046 
         ;    1047                         
         ;    1048                         case ignor:
          _0xBE:
000a4c 30e5      	CPI  R30,LOW(0x5)
000a4d e0a0      	LDI  R26,HIGH(0x5)
000a4e 07fa      	CPC  R31,R26
000a4f f409      	BRNE _0xCE
         ;    1049                         break;
000a50 c1b0      	RJMP _0x8F
         ;    1050  
         ;    1051                         case scrolldown :
          _0xCE:
000a51 30e7      	CPI  R30,LOW(0x7)
000a52 e0a0      	LDI  R26,HIGH(0x7)
000a53 07fa      	CPC  R31,R26
000a54 f009      	BREQ PC+2
000a55 c0d7      	RJMP _0xCF
         ;    1052                         
         ;    1053                         
         ;    1054                                 if (wasscroll==0)
000a56 fc21      	SBRC R2,1
000a57 c048      	RJMP _0xD0
         ;    1055                                 { 
         ;    1056                                 //printf("wasscroll just got set");
         ;    1057                                       wasscroll=1;      
000a58 9468      	SET
000a59 f821      	BLD  R2,1
         ;    1058                                 
         ;    1059                                         istore=i;
000a5a 91e0 0197 	LDS  R30,_i
000a5c 91f0 0198 	LDS  R31,_i+1
000a5e 93e0 0191 	STS  _istore,R30
000a60 93f0 0192 	STS  _istore+1,R31
         ;    1060                                         jstore=j; 
000a62 91e0 0193 	LDS  R30,_j
000a64 91f0 0194 	LDS  R31,_j+1
000a66 93e0 019d 	STS  _jstore,R30
000a68 93f0 019e 	STS  _jstore+1,R31
         ;    1061                                         for(x=20-i;x!=0;x--)                 //this just fills the remainng of line with spaces
000a6a 91a0 0197 	LDS  R26,_i
000a6c 91b0 0198 	LDS  R27,_i+1
000a6e e1e4      	LDI  R30,LOW(20)
000a6f e0f0      	LDI  R31,HIGH(20)
000a70 1bea      	SUB  R30,R26
000a71 0bfb      	SBC  R31,R27
000a72 93e0 0199 	STS  _x,R30
000a74 93f0 019a 	STS  _x+1,R31
          _0xD2:
000a76 91e0 0199 	LDS  R30,_x
000a78 91f0 019a 	LDS  R31,_x+1
000a7a 9730      	SBIW R30,0
000a7b f121      	BREQ _0xD3
         ;    1062                         {                                                                                                                                                                                                                                                                                                
         ;    1063                                 line[j][i]=0x20;
000a7c 91e0 0193 	LDS  R30,_j
000a7e 91f0 0194 	LDS  R31,_j+1
000a80 e1a5      	LDI  R26,LOW(21)
000a81 e0b0      	LDI  R27,HIGH(21)
000a82 d45c      	RCALL __MULW12U
000a83 56e1      	SUBI R30,LOW(-_line)
000a84 4ffe      	SBCI R31,HIGH(-_line)
000a85 91a0 0197 	LDS  R26,_i
000a87 91b0 0198 	LDS  R27,_i+1
000a89 0fae      	ADD  R26,R30
000a8a 1fbf      	ADC  R27,R31
000a8b e2e0      	LDI  R30,LOW(32)
000a8c 93ec      	ST   X,R30
         ;    1064                                 i++;
000a8d 91e0 0197 	LDS  R30,_i
000a8f 91f0 0198 	LDS  R31,_i+1
000a91 9631      	ADIW R30,1
000a92 93e0 0197 	STS  _i,R30
000a94 93f0 0198 	STS  _i+1,R31
         ;    1065                                 ////printf("%i",i);   
         ;    1066                         }
000a96 91e0 0199 	LDS  R30,_x
000a98 91f0 019a 	LDS  R31,_x+1
000a9a 9731      	SBIW R30,1
000a9b 93e0 0199 	STS  _x,R30
000a9d 93f0 019a 	STS  _x+1,R31
000a9f cfd6      	RJMP _0xD2
          _0xD3:
         ;    1067 
         ;    1068                                 }
         ;    1069                                         
         ;    1070                                 
         ;    1071                             if((j+1)<buffersize)
          _0xD0:
000aa0 91a0 0193 	LDS  R26,_j
000aa2 91b0 0194 	LDS  R27,_j+1
000aa4 9611      	ADIW R26,1
000aa5 30a7      	CPI  R26,LOW(0x7)
000aa6 e0e0      	LDI  R30,HIGH(0x7)
000aa7 07be      	CPC  R27,R30
000aa8 f454      	BRGE _0xD4
         ;    1072                                         j++;
000aa9 91e0 0193 	LDS  R30,_j
000aab 91f0 0194 	LDS  R31,_j+1
000aad 9631      	ADIW R30,1
000aae 93e0 0193 	STS  _j,R30
000ab0 93f0 0194 	STS  _j+1,R31
         ;    1073                             else
000ab2 c005      	RJMP _0xD5
          _0xD4:
         ;    1074                                         j=0;
000ab3 e0e0      	LDI  R30,0
000ab4 93e0 0193 	STS  _j,R30
000ab6 93e0 0194 	STS  _j+1,R30
         ;    1075                              lcd_clear();
          _0xD5:
000ab8 d1d9      	RCALL _lcd_clear
         ;    1076                              
         ;    1077                                 //printf("\n\r%s \n\r",line[j-1]);
         ;    1078                                        lcd_clear();
000ab9 d1d8      	RCALL _lcd_clear
         ;    1079                                         
         ;    1080                                         if((j-3)>-1)
000aba 91a0 0193 	LDS  R26,_j
000abc 91b0 0194 	LDS  R27,_j+1
000abe 9713      	SBIW R26,3
000abf efef      	LDI  R30,LOW(65535)
000ac0 efff      	LDI  R31,HIGH(65535)
000ac1 17ea      	CP   R30,R26
000ac2 07fb      	CPC  R31,R27
000ac3 f42c      	BRGE _0xD6
         ;    1081                                         {
         ;    1082                                                  lcd_puts(line[j-3]);      
000ac4 91e0 0193 	LDS  R30,_j
000ac6 91f0 0194 	LDS  R31,_j+1
000ac8 c005      	RJMP _0x16A
         ;    1083                                         }
         ;    1084                                         else
          _0xD6:
         ;    1085                                         {
         ;    1086                                                  lcd_puts(line[buffersize+j-3]);                                               
000ac9 91e0 0193 	LDS  R30,_j
000acb 91f0 0194 	LDS  R31,_j+1
000acd 9637      	ADIW R30,7
          _0x16A:
000ace 9733      	SBIW R30,3
000acf e1a5      	LDI  R26,LOW(21)
000ad0 e0b0      	LDI  R27,HIGH(21)
000ad1 d40d      	RCALL __MULW12U
000ad2 56e1      	SUBI R30,LOW(-_line)
000ad3 4ffe      	SBCI R31,HIGH(-_line)
000ad4 93fa      	ST   -Y,R31
000ad5 93ea      	ST   -Y,R30
000ad6 d1f4      	RCALL _lcd_puts
         ;    1087                                         }
         ;    1088                                         lcd_gotoxy(0,1);               
000ad7 e0e0      	LDI  R30,LOW(0)
000ad8 93ea      	ST   -Y,R30
000ad9 e0e1      	LDI  R30,LOW(1)
000ada 93ea      	ST   -Y,R30
000adb d1a4      	RCALL _lcd_gotoxy
         ;    1089                                         if((j-2)>-1)
000adc 91a0 0193 	LDS  R26,_j
000ade 91b0 0194 	LDS  R27,_j+1
000ae0 9712      	SBIW R26,2
000ae1 efef      	LDI  R30,LOW(65535)
000ae2 efff      	LDI  R31,HIGH(65535)
000ae3 17ea      	CP   R30,R26
000ae4 07fb      	CPC  R31,R27
000ae5 f42c      	BRGE _0xD8
         ;    1090                                         {
         ;    1091                                                  lcd_puts(line[j-2]);
000ae6 91e0 0193 	LDS  R30,_j
000ae8 91f0 0194 	LDS  R31,_j+1
000aea c005      	RJMP _0x16B
         ;    1092                                         }
         ;    1093                                         else
          _0xD8:
         ;    1094                                         {
         ;    1095                                                  lcd_puts(line[buffersize+j-2]);                               
000aeb 91e0 0193 	LDS  R30,_j
000aed 91f0 0194 	LDS  R31,_j+1
000aef 9637      	ADIW R30,7
          _0x16B:
000af0 9732      	SBIW R30,2
000af1 e1a5      	LDI  R26,LOW(21)
000af2 e0b0      	LDI  R27,HIGH(21)
000af3 d3eb      	RCALL __MULW12U
000af4 56e1      	SUBI R30,LOW(-_line)
000af5 4ffe      	SBCI R31,HIGH(-_line)
000af6 93fa      	ST   -Y,R31
000af7 93ea      	ST   -Y,R30
000af8 d1d2      	RCALL _lcd_puts
         ;    1096                                         }
         ;    1097                                         lcd_gotoxy(0,2);
000af9 e0e0      	LDI  R30,LOW(0)
000afa 93ea      	ST   -Y,R30
000afb e0e2      	LDI  R30,LOW(2)
000afc 93ea      	ST   -Y,R30
000afd d182      	RCALL _lcd_gotoxy
         ;    1098                                         if((j-1)>-1)
000afe 91a0 0193 	LDS  R26,_j
000b00 91b0 0194 	LDS  R27,_j+1
000b02 9711      	SBIW R26,1
000b03 efef      	LDI  R30,LOW(65535)
000b04 efff      	LDI  R31,HIGH(65535)
000b05 17ea      	CP   R30,R26
000b06 07fb      	CPC  R31,R27
000b07 f42c      	BRGE _0xDA
         ;    1099                                         {
         ;    1100                                                  lcd_puts(line[j-1]);
000b08 91e0 0193 	LDS  R30,_j
000b0a 91f0 0194 	LDS  R31,_j+1
000b0c c005      	RJMP _0x16C
         ;    1101                                         }
         ;    1102                                         else
          _0xDA:
         ;    1103                                         {
         ;    1104                                                  lcd_puts(line[buffersize+j-1]);                               
000b0d 91e0 0193 	LDS  R30,_j
000b0f 91f0 0194 	LDS  R31,_j+1
000b11 9637      	ADIW R30,7
          _0x16C:
000b12 9731      	SBIW R30,1
000b13 e1a5      	LDI  R26,LOW(21)
000b14 e0b0      	LDI  R27,HIGH(21)
000b15 d3c9      	RCALL __MULW12U
000b16 56e1      	SUBI R30,LOW(-_line)
000b17 4ffe      	SBCI R31,HIGH(-_line)
000b18 93fa      	ST   -Y,R31
000b19 93ea      	ST   -Y,R30
000b1a d1b0      	RCALL _lcd_puts
         ;    1105                                         }
         ;    1106                                                                  
         ;    1107                                         lcd_gotoxy(0,3);
000b1b e0e0      	LDI  R30,LOW(0)
000b1c 93ea      	ST   -Y,R30
000b1d e0e3      	LDI  R30,LOW(3)
000b1e 93ea      	ST   -Y,R30
000b1f d160      	RCALL _lcd_gotoxy
         ;    1108                                         lcd_puts(line[j]);
000b20 91e0 0193 	LDS  R30,_j
000b22 91f0 0194 	LDS  R31,_j+1
000b24 e1a5      	LDI  R26,LOW(21)
000b25 e0b0      	LDI  R27,HIGH(21)
000b26 d3b8      	RCALL __MULW12U
000b27 56e1      	SUBI R30,LOW(-_line)
000b28 4ffe      	SBCI R31,HIGH(-_line)
000b29 93fa      	ST   -Y,R31
000b2a 93ea      	ST   -Y,R30
000b2b d19f      	RCALL _lcd_puts
         ;    1109                              //printf("%s \n\r",line[j]);
         ;    1110                              //printf("j is %i\n\r",j);
         ;    1111                              break;
000b2c c0d4      	RJMP _0x8F
         ;    1112                              
         ;    1113                              
         ;    1114                              case scrollup:
          _0xCF:
000b2d 30e6      	CPI  R30,LOW(0x6)
000b2e e0a0      	LDI  R26,HIGH(0x6)
000b2f 07fa      	CPC  R31,R26
000b30 f009      	BREQ PC+2
000b31 c0cf      	RJMP _0xE9
         ;    1115                         
         ;    1116                         
         ;    1117                         
         ;    1118                                 if (wasscroll==0)
000b32 fc21      	SBRC R2,1
000b33 c048      	RJMP _0xDD
         ;    1119                                 { 
         ;    1120                                 //printf("wasscroll just got set");
         ;    1121                                       wasscroll=1;      
000b34 9468      	SET
000b35 f821      	BLD  R2,1
         ;    1122                                 
         ;    1123                                         istore=i;
000b36 91e0 0197 	LDS  R30,_i
000b38 91f0 0198 	LDS  R31,_i+1
000b3a 93e0 0191 	STS  _istore,R30
000b3c 93f0 0192 	STS  _istore+1,R31
         ;    1124                                         jstore=j;
000b3e 91e0 0193 	LDS  R30,_j
000b40 91f0 0194 	LDS  R31,_j+1
000b42 93e0 019d 	STS  _jstore,R30
000b44 93f0 019e 	STS  _jstore+1,R31
         ;    1125                                         for(x=20-i;x!=0;x--)                 //this just fills the remainng of line with spaces
000b46 91a0 0197 	LDS  R26,_i
000b48 91b0 0198 	LDS  R27,_i+1
000b4a e1e4      	LDI  R30,LOW(20)
000b4b e0f0      	LDI  R31,HIGH(20)
000b4c 1bea      	SUB  R30,R26
000b4d 0bfb      	SBC  R31,R27
000b4e 93e0 0199 	STS  _x,R30
000b50 93f0 019a 	STS  _x+1,R31
          _0xDF:
000b52 91e0 0199 	LDS  R30,_x
000b54 91f0 019a 	LDS  R31,_x+1
000b56 9730      	SBIW R30,0
000b57 f121      	BREQ _0xE0
         ;    1126                         {                                                                                                                                                                                                                                                                                                
         ;    1127                                 line[j][i]=0x20;
000b58 91e0 0193 	LDS  R30,_j
000b5a 91f0 0194 	LDS  R31,_j+1
000b5c e1a5      	LDI  R26,LOW(21)
000b5d e0b0      	LDI  R27,HIGH(21)
000b5e d380      	RCALL __MULW12U
000b5f 56e1      	SUBI R30,LOW(-_line)
000b60 4ffe      	SBCI R31,HIGH(-_line)
000b61 91a0 0197 	LDS  R26,_i
000b63 91b0 0198 	LDS  R27,_i+1
000b65 0fae      	ADD  R26,R30
000b66 1fbf      	ADC  R27,R31
000b67 e2e0      	LDI  R30,LOW(32)
000b68 93ec      	ST   X,R30
         ;    1128                                 i++;
000b69 91e0 0197 	LDS  R30,_i
000b6b 91f0 0198 	LDS  R31,_i+1
000b6d 9631      	ADIW R30,1
000b6e 93e0 0197 	STS  _i,R30
000b70 93f0 0198 	STS  _i+1,R31
         ;    1129                                 ////printf("%i",i);   
         ;    1130                         }
000b72 91e0 0199 	LDS  R30,_x
000b74 91f0 019a 	LDS  R31,_x+1
000b76 9731      	SBIW R30,1
000b77 93e0 0199 	STS  _x,R30
000b79 93f0 019a 	STS  _x+1,R31
000b7b cfd6      	RJMP _0xDF
          _0xE0:
         ;    1131                                 }
         ;    1132                                         
         ;    1133                                 
         ;    1134                              if(j>0)   
          _0xDD:
000b7c 91a0 0193 	LDS  R26,_j
000b7e 91b0 0194 	LDS  R27,_j+1
000b80 d37e      	RCALL __CPW02
000b81 f434      	BRGE _0xE1
         ;    1135                                     j--;
000b82 91e0 0193 	LDS  R30,_j
000b84 91f0 0194 	LDS  R31,_j+1
000b86 9731      	SBIW R30,1
000b87 c002      	RJMP _0x16D
         ;    1136                              else
          _0xE1:
         ;    1137                                    j=buffersize-1;
000b88 e0e6      	LDI  R30,LOW(6)
000b89 e0f0      	LDI  R31,HIGH(6)
          _0x16D:
000b8a 93e0 0193 	STS  _j,R30
000b8c 93f0 0194 	STS  _j+1,R31
         ;    1138                                     
         ;    1139                              lcd_clear();
000b8e d103      	RCALL _lcd_clear
         ;    1140                                         
         ;    1141                                         if((j-3)>-1)
000b8f 91a0 0193 	LDS  R26,_j
000b91 91b0 0194 	LDS  R27,_j+1
000b93 9713      	SBIW R26,3
000b94 efef      	LDI  R30,LOW(65535)
000b95 efff      	LDI  R31,HIGH(65535)
000b96 17ea      	CP   R30,R26
000b97 07fb      	CPC  R31,R27
000b98 f42c      	BRGE _0xE3
         ;    1142                                         {
         ;    1143                                                  lcd_puts(line[j-3]);      
000b99 91e0 0193 	LDS  R30,_j
000b9b 91f0 0194 	LDS  R31,_j+1
000b9d c005      	RJMP _0x16E
         ;    1144                                         }
         ;    1145                                         else
          _0xE3:
         ;    1146                                         {
         ;    1147                                                  lcd_puts(line[buffersize+j-3]);                                               
000b9e 91e0 0193 	LDS  R30,_j
000ba0 91f0 0194 	LDS  R31,_j+1
000ba2 9637      	ADIW R30,7
          _0x16E:
000ba3 9733      	SBIW R30,3
000ba4 e1a5      	LDI  R26,LOW(21)
000ba5 e0b0      	LDI  R27,HIGH(21)
000ba6 d338      	RCALL __MULW12U
000ba7 56e1      	SUBI R30,LOW(-_line)
000ba8 4ffe      	SBCI R31,HIGH(-_line)
000ba9 93fa      	ST   -Y,R31
000baa 93ea      	ST   -Y,R30
000bab d11f      	RCALL _lcd_puts
         ;    1148                                         }
         ;    1149                                         lcd_gotoxy(0,1);               
000bac e0e0      	LDI  R30,LOW(0)
000bad 93ea      	ST   -Y,R30
000bae e0e1      	LDI  R30,LOW(1)
000baf 93ea      	ST   -Y,R30
000bb0 d0cf      	RCALL _lcd_gotoxy
         ;    1150                                         if((j-2)>-1)
000bb1 91a0 0193 	LDS  R26,_j
000bb3 91b0 0194 	LDS  R27,_j+1
000bb5 9712      	SBIW R26,2
000bb6 efef      	LDI  R30,LOW(65535)
000bb7 efff      	LDI  R31,HIGH(65535)
000bb8 17ea      	CP   R30,R26
000bb9 07fb      	CPC  R31,R27
000bba f42c      	BRGE _0xE5
         ;    1151                                         {
         ;    1152                                                  lcd_puts(line[j-2]);
000bbb 91e0 0193 	LDS  R30,_j
000bbd 91f0 0194 	LDS  R31,_j+1
000bbf c005      	RJMP _0x16F
         ;    1153                                         }
         ;    1154                                         else
          _0xE5:
         ;    1155                                         {
         ;    1156                                                  lcd_puts(line[buffersize+j-2]);                               
000bc0 91e0 0193 	LDS  R30,_j
000bc2 91f0 0194 	LDS  R31,_j+1
000bc4 9637      	ADIW R30,7
          _0x16F:
000bc5 9732      	SBIW R30,2
000bc6 e1a5      	LDI  R26,LOW(21)
000bc7 e0b0      	LDI  R27,HIGH(21)
000bc8 d316      	RCALL __MULW12U
000bc9 56e1      	SUBI R30,LOW(-_line)
000bca 4ffe      	SBCI R31,HIGH(-_line)
000bcb 93fa      	ST   -Y,R31
000bcc 93ea      	ST   -Y,R30
000bcd d0fd      	RCALL _lcd_puts
         ;    1157                                         }
         ;    1158                                         lcd_gotoxy(0,2);
000bce e0e0      	LDI  R30,LOW(0)
000bcf 93ea      	ST   -Y,R30
000bd0 e0e2      	LDI  R30,LOW(2)
000bd1 93ea      	ST   -Y,R30
000bd2 d0ad      	RCALL _lcd_gotoxy
         ;    1159                                         if((j-1)>-1)
000bd3 91a0 0193 	LDS  R26,_j
000bd5 91b0 0194 	LDS  R27,_j+1
000bd7 9711      	SBIW R26,1
000bd8 efef      	LDI  R30,LOW(65535)
000bd9 efff      	LDI  R31,HIGH(65535)
000bda 17ea      	CP   R30,R26
000bdb 07fb      	CPC  R31,R27
000bdc f42c      	BRGE _0xE7
         ;    1160                                         {
         ;    1161                                                  lcd_puts(line[j-1]);
000bdd 91e0 0193 	LDS  R30,_j
000bdf 91f0 0194 	LDS  R31,_j+1
000be1 c005      	RJMP _0x170
         ;    1162                                         }
         ;    1163                                         else
          _0xE7:
         ;    1164                                         {
         ;    1165                                                  lcd_puts(line[buffersize+j-1]);                               
000be2 91e0 0193 	LDS  R30,_j
000be4 91f0 0194 	LDS  R31,_j+1
000be6 9637      	ADIW R30,7
          _0x170:
000be7 9731      	SBIW R30,1
000be8 e1a5      	LDI  R26,LOW(21)
000be9 e0b0      	LDI  R27,HIGH(21)
000bea d2f4      	RCALL __MULW12U
000beb 56e1      	SUBI R30,LOW(-_line)
000bec 4ffe      	SBCI R31,HIGH(-_line)
000bed 93fa      	ST   -Y,R31
000bee 93ea      	ST   -Y,R30
000bef d0db      	RCALL _lcd_puts
         ;    1166                                         }
         ;    1167                                                                  
         ;    1168                                         lcd_gotoxy(0,3);
000bf0 e0e0      	LDI  R30,LOW(0)
000bf1 93ea      	ST   -Y,R30
000bf2 e0e3      	LDI  R30,LOW(3)
000bf3 93ea      	ST   -Y,R30
000bf4 d08b      	RCALL _lcd_gotoxy
         ;    1169                                         lcd_puts(line[j]);
000bf5 91e0 0193 	LDS  R30,_j
000bf7 91f0 0194 	LDS  R31,_j+1
000bf9 e1a5      	LDI  R26,LOW(21)
000bfa e0b0      	LDI  R27,HIGH(21)
000bfb d2e3      	RCALL __MULW12U
000bfc 56e1      	SUBI R30,LOW(-_line)
000bfd 4ffe      	SBCI R31,HIGH(-_line)
000bfe 93fa      	ST   -Y,R31
000bff 93ea      	ST   -Y,R30
000c00 d0ca      	RCALL _lcd_puts
         ;    1170                              //printf("%s \n\r",line[j]);
         ;    1171                              //printf("j is %i\n\r",j);
         ;    1172                              break;        
         ;    1173                         default:
          _0xE9:
         ;    1174                         break;
         ;    1175                 }
          _0x8F:
         ;    1176                         
         ;    1177              
         ;    1178       
         ;    1179       
         ;    1180 
         ;    1181       
         ;    1182 }
000c01 9621      	ADIW R28,1
000c02 9508      	RET
         ;    1183  unsigned char key;
         
          	.DSEG
          _key:
000234      	.BYTE 0x1
         ;    1184 int comunicate (void)
         ;    1185 
         ;    1186 {
         
          	.CSEG
          _comunicate:
         ;    1187        key=getchar_kb();
000c03 d986      	RCALL _getchar_kb
000c04 93e0 0234 	STS  _key,R30
         ;    1188        if(key==0xfd)
000c06 91a0 0234 	LDS  R26,_key
000c08 3fad      	CPI  R26,LOW(0xFD)
000c09 f419      	BRNE _0xEA
         ;    1189        return 0;
000c0a e0e0      	LDI  R30,LOW(0)
000c0b e0f0      	LDI  R31,HIGH(0)
000c0c 9508      	RET
         ;    1190        else
          _0xEA:
         ;    1191        
         ;    1192        if(key==0xff || key == 0xfe)
000c0d 91a0 0234 	LDS  R26,_key
000c0f 3faf      	CPI  R26,LOW(0xFF)
000c10 f011      	BREQ _0xED
000c11 3fae      	CPI  R26,LOW(0xFE)
000c12 f429      	BRNE _0xEC
          _0xED:
         ;    1193         do_states(key);
000c13 91e0 0234 	LDS  R30,_key
000c15 93ea      	ST   -Y,R30
000c16 d9b3      	RCALL _do_states
         ;    1194        else
000c17 c00e      	RJMP _0xEF
          _0xEC:
         ;    1195        {
         ;    1196        if(key!=0 )
000c18 91e0 0234 	LDS  R30,_key
000c1a 30e0      	CPI  R30,0
000c1b f051      	BREQ _0xF0
         ;    1197        {
         ;    1198         //putchar(key);
         ;    1199         //key=getchar();
         ;    1200         if(key==13)
000c1c 91a0 0234 	LDS  R26,_key
000c1e 30ad      	CPI  R26,LOW(0xD)
000c1f f411      	BRNE _0xF1
         ;    1201         {
         ;    1202                 //putchar(13);
         ;    1203                 putchar(10);
000c20 e0ea      	LDI  R30,LOW(10)
000c21 c002      	RJMP _0x171
         ;    1204         }
         ;    1205         else 
          _0xF1:
         ;    1206         
         ;    1207         putchar(key);       
000c22 91e0 0234 	LDS  R30,_key
          _0x171:
000c24 93ea      	ST   -Y,R30
000c25 d5b1      	RCALL _putchar
         ;    1208         //do_states(key);
         ;    1209        }
         ;    1210        } 
          _0xF0:
          _0xEF:
         ;    1211        //key=getchar();
         ;    1212        //if(key!=1)
         ;    1213        //{
         ;    1214        
         ;    1215        key=getchar();
000c26 d584      	RCALL _getchar
000c27 93e0 0234 	STS  _key,R30
         ;    1216        if(key==0x1b)
000c29 91a0 0234 	LDS  R26,_key
000c2b 31ab      	CPI  R26,LOW(0x1B)
000c2c f059      	BREQ _0xF4
         ;    1217               {        
         ;    1218                 //while (key!=0x6d)
         ;    1219                 //{
         ;    1220                   //      key=getchar();
         ;    1221                 //}
         ;    1222        }
         ;    1223        else
         ;    1224        {
         ;    1225                if(key!=0 && key!=0xff && key!=0x0fe)
000c2d 30a0      	CPI  R26,LOW(0x0)
000c2e f021      	BREQ _0xF6
000c2f 3faf      	CPI  R26,LOW(0xFF)
000c30 f011      	BREQ _0xF6
000c31 3fae      	CPI  R26,LOW(0xFE)
000c32 f409      	BRNE _0xF7
          _0xF6:
000c33 c004      	RJMP _0xF5
          _0xF7:
         ;    1226                //printf("%c",key);
         ;    1227                {
         ;    1228                do_states(key);
000c34 91e0 0234 	LDS  R30,_key
000c36 93ea      	ST   -Y,R30
000c37 d992      	RCALL _do_states
         ;    1229                }
         ;    1230        }  
          _0xF5:
          _0xF4:
         ;    1231        
         ;    1232        return 1;
000c38 e0e1      	LDI  R30,LOW(1)
000c39 e0f0      	LDI  R31,HIGH(1)
000c3a 9508      	RET
         ;    1233     }
         
              .equ __lcd_direction=__lcd_port-1
              .equ __lcd_pin=__lcd_port-2
              .equ __lcd_rs=0
              .equ __lcd_rd=1
              .equ __lcd_enable=2
              .equ __lcd_busy_flag=7
         
          	.DSEG
          __base_y_G7:
000235      	.BYTE 0x4
          __lcd_x:
000239      	.BYTE 0x1
          __lcd_y:
00023a      	.BYTE 0x1
          __lcd_maxx:
00023b      	.BYTE 0x1
         
          	.CSEG
          __lcd_delay_G7:
000c3b e0ff          ldi   r31,15
          __lcd_delay0:
000c3c 95fa          dec   r31
000c3d f7f1          brne  __lcd_delay0
000c3e 9508      	RET
          __lcd_ready:
000c3f b3a7          in    r26,__lcd_direction
000c40 70af          andi  r26,0xf                 ;set as input
000c41 bba7          out   __lcd_direction,r26
000c42 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000c43 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
          __lcd_busy:
000c44 dff6      	RCALL __lcd_delay_G7
000c45 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c46 dff4      	RCALL __lcd_delay_G7
000c47 b3a6          in    r26,__lcd_pin
000c48 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c49 dff1      	RCALL __lcd_delay_G7
000c4a 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c4b dfef      	RCALL __lcd_delay_G7
000c4c 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c4d fda7          sbrc  r26,__lcd_busy_flag
000c4e cff5          rjmp  __lcd_busy
000c4f 9508      	RET
          __lcd_write_nibble_G7:
000c50 7fa0          andi  r26,0xf0
000c51 2bab          or    r26,r27
000c52 bba8          out   __lcd_port,r26          ;write
000c53 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c54 dfe6      	RCALL __lcd_delay_G7
000c55 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c56 dfe4      	RCALL __lcd_delay_G7
000c57 9508      	RET
          __lcd_write_data:
000c58 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000c59 b3a7          in    r26,__lcd_direction
000c5a 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output    
000c5b bba7          out   __lcd_direction,r26
000c5c b3b8          in    r27,__lcd_port
000c5d 70bf          andi  r27,0xf
000c5e 81a8          ld    r26,y
000c5f dff0      	RCALL __lcd_write_nibble_G7
000c60 81a8          ld    r26,y
000c61 95a2          swap  r26
000c62 dfed      	RCALL __lcd_write_nibble_G7
000c63 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000c64 9621      	ADIW R28,1
000c65 9508      	RET
          _lcd_write_byte:
000c66 dfd8      	RCALL __lcd_ready
000c67 81e9      	LDD  R30,Y+1
000c68 93ea      	ST   -Y,R30
000c69 dfee      	RCALL __lcd_write_data
000c6a dfd4      	RCALL __lcd_ready
000c6b 9ac0          sbi   __lcd_port,__lcd_rs     ;RS=1
000c6c 81e8      	LD   R30,Y
000c6d 93ea      	ST   -Y,R30
000c6e dfe9      	RCALL __lcd_write_data
000c6f 9622      	ADIW R28,2
000c70 9508      	RET
          __lcd_read_nibble_G7:
000c71 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c72 dfc8      	RCALL __lcd_delay_G7
000c73 b3e6          in    r30,__lcd_pin           ;read
000c74 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c75 dfc5      	RCALL __lcd_delay_G7
000c76 7fe0          andi  r30,0xf0
000c77 9508      	RET
          _lcd_read_byte0_G7:
000c78 dfc2      	RCALL __lcd_delay_G7
000c79 dff7      	RCALL __lcd_read_nibble_G7
000c7a 2fae          mov   r26,r30
000c7b dff5      	RCALL __lcd_read_nibble_G7
000c7c 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000c7d 95e2          swap  r30
000c7e 2bea          or    r30,r26
000c7f 9508      	RET
          _lcd_gotoxy:
000c80 dfbe      	RCALL __lcd_ready
000c81 81e8      	LD   R30,Y
000c82 e0f0      	LDI  R31,0
000c83 5ceb      	SUBI R30,LOW(-__base_y_G7)
000c84 4ffd      	SBCI R31,HIGH(-__base_y_G7)
000c85 81e0      	LD   R30,Z
000c86 81a9      	LDD  R26,Y+1
000c87 0fea      	ADD  R30,R26
000c88 93ea      	ST   -Y,R30
000c89 dfce      	RCALL __lcd_write_data
000c8a 81e9      	LDD  R30,Y+1
000c8b 93e0 0239 	STS  __lcd_x,R30
000c8d 81e8      	LD   R30,Y
000c8e 93e0 023a 	STS  __lcd_y,R30
000c90 9622      	ADIW R28,2
000c91 9508      	RET
          _lcd_clear:
000c92 dfac      	RCALL __lcd_ready
000c93 e0e2      	LDI  R30,LOW(2)
000c94 93ea      	ST   -Y,R30
000c95 dfc2      	RCALL __lcd_write_data
000c96 dfa8      	RCALL __lcd_ready
000c97 e0ef      	LDI  R30,LOW(15)
000c98 93ea      	ST   -Y,R30
000c99 dfbe      	RCALL __lcd_write_data
000c9a dfa4      	RCALL __lcd_ready
000c9b e0e1      	LDI  R30,LOW(1)
000c9c 93ea      	ST   -Y,R30
000c9d dfba      	RCALL __lcd_write_data
000c9e e0e0      	LDI  R30,LOW(0)
000c9f 93e0 023a 	STS  __lcd_y,R30
000ca1 93e0 0239 	STS  __lcd_x,R30
000ca3 9508      	RET
          _lcd_putchar:
000ca4 93ef          push r30
000ca5 93ff          push r31
000ca6 81a8          ld   r26,y
000ca7 9468          set
000ca8 30aa          cpi  r26,10
000ca9 f061          breq __lcd_putchar1
000caa 94e8          clt
000cab 91e0 0239 	LDS  R30,__lcd_x
000cad 5fef      	SUBI R30,-LOW(1)
000cae 93e0 0239 	STS  __lcd_x,R30
000cb0 91e0 023b 	LDS  R30,__lcd_maxx
000cb2 91a0 0239 	LDS  R26,__lcd_x
000cb4 17ea      	CP   R30,R26
000cb5 f460      	BRSH _0xF9
          	__lcd_putchar1:
000cb6 91e0 023a 	LDS  R30,__lcd_y
000cb8 5fef      	SUBI R30,-LOW(1)
000cb9 93e0 023a 	STS  __lcd_y,R30
000cbb e0e0      	LDI  R30,LOW(0)
000cbc 93ea      	ST   -Y,R30
000cbd 91e0 023a 	LDS  R30,__lcd_y
000cbf 93ea      	ST   -Y,R30
000cc0 dfbf      	RCALL _lcd_gotoxy
000cc1 f02e      	brts __lcd_putchar0
          _0xF9:
000cc2 df7c          rcall __lcd_ready
000cc3 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000cc4 81a8          ld   r26,y
000cc5 93aa          st   -y,r26
000cc6 df91          rcall __lcd_write_data
          __lcd_putchar0:
000cc7 91ff          pop  r31
000cc8 91ef          pop  r30
000cc9 9621      	ADIW R28,1
000cca 9508      	RET
          _lcd_puts:
000ccb 81f9          ldd  r31,y+1
000ccc 81e8          ld   r30,y
          __lcd_puts0:
000ccd 91a1          ld   r26,z+
000cce 23aa          tst  r26
000ccf f019          breq __lcd_puts1
000cd0 93aa          st   -y,r26    
000cd1 dfd2          rcall _lcd_putchar
000cd2 cffa          rjmp __lcd_puts0
          __lcd_puts1:
000cd3 9622      	ADIW R28,2
000cd4 9508      	RET
          _lcd_putsf:
000cd5 81e8          ld   r30,y
000cd6 81f9          ldd  r31,y+1
          __lcd_putsf0:
000cd7 95c8      	lpm
000cd8 2000          tst  r0
000cd9 f021          breq __lcd_putsf1
000cda 9631          adiw r30,1
000cdb 920a          st   -y,r0
000cdc dfc7          rcall _lcd_putchar
000cdd cff9          rjmp __lcd_putsf0
          __lcd_putsf1:
000cde 9622      	ADIW R28,2
000cdf 9508      	RET
          __long_delay_G7:
000ce0 27aa          clr   r26
000ce1 27bb          clr   r27
          __long_delay0:
000ce2 9711          sbiw  r26,1         ;2 cycles
000ce3 f7f1          brne  __long_delay0 ;2 cycles
000ce4 9508      	RET
          __lcd_init_write_G7:
000ce5 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000ce6 b3a7          in    r26,__lcd_direction
000ce7 6fa7          ori   r26,0xf7                ;set as output
000ce8 bba7          out   __lcd_direction,r26
000ce9 b3b8          in    r27,__lcd_port
000cea 70bf          andi  r27,0xf
000ceb 81a8          ld    r26,y
000cec df63      	RCALL __lcd_write_nibble_G7
000ced 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000cee 9621      	ADIW R28,1
000cef 9508      	RET
          _lcd_init:
000cf0 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cf1 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000cf2 81e8      	LD   R30,Y
000cf3 93e0 023b 	STS  __lcd_maxx,R30
000cf5 58e0      	SUBI R30,-LOW(128)
000cf6   +  	__PUTB1MN __base_y_G7,2
000cf8 81e8      	LD   R30,Y
000cf9 54e0      	SUBI R30,-LOW(192)
000cfa   +  	__PUTB1MN __base_y_G7,3
000cfc dfe3      	RCALL __long_delay_G7
000cfd e3e0      	LDI  R30,LOW(48)
000cfe 93ea      	ST   -Y,R30
000cff dfe5      	RCALL __lcd_init_write_G7
000d00 dfdf      	RCALL __long_delay_G7
000d01 e3e0      	LDI  R30,LOW(48)
000d02 93ea      	ST   -Y,R30
000d03 dfe1      	RCALL __lcd_init_write_G7
000d04 dfdb      	RCALL __long_delay_G7
000d05 e3e0      	LDI  R30,LOW(48)
000d06 93ea      	ST   -Y,R30
000d07 dfdd      	RCALL __lcd_init_write_G7
000d08 dfd7      	RCALL __long_delay_G7
000d09 e2e0      	LDI  R30,LOW(32)
000d0a 93ea      	ST   -Y,R30
000d0b dfd9      	RCALL __lcd_init_write_G7
000d0c dfd3      	RCALL __long_delay_G7
000d0d e2e8      	LDI  R30,LOW(40)
000d0e 93ea      	ST   -Y,R30
000d0f df48      	RCALL __lcd_write_data
000d10 dfcf      	RCALL __long_delay_G7
000d11 e0e4      	LDI  R30,LOW(4)
000d12 93ea      	ST   -Y,R30
000d13 df44      	RCALL __lcd_write_data
000d14 dfcb      	RCALL __long_delay_G7
000d15 e8e5      	LDI  R30,LOW(133)
000d16 93ea      	ST   -Y,R30
000d17 df40      	RCALL __lcd_write_data
000d18 dfc7      	RCALL __long_delay_G7
000d19 b3a7          in    r26,__lcd_direction
000d1a 70af          andi  r26,0xf                 ;set as input
000d1b bba7          out   __lcd_direction,r26
000d1c 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000d1d df5a      	RCALL _lcd_read_byte0_G7
000d1e 30e5      	CPI  R30,LOW(0x5)
000d1f f011      	BREQ _0xFA
000d20 e0e0      	LDI  R30,LOW(0)
000d21 c006      	RJMP _0x156
          _0xFA:
000d22 df1c      	RCALL __lcd_ready
000d23 e0e6      	LDI  R30,LOW(6)
000d24 93ea      	ST   -Y,R30
000d25 df32      	RCALL __lcd_write_data
000d26 df6b      	RCALL _lcd_clear
000d27 e0e1      	LDI  R30,LOW(1)
          _0x156:
000d28 9621      	ADIW R28,1
000d29 9508      	RET
          __put_G8:
          	put:
000d2a 81a8      	LD   R26,Y
000d2b 81b9      	LDD  R27,Y+1
000d2c d1c2      	RCALL __GETW1P
000d2d 9730      	SBIW R30,0
000d2e f041      	BREQ _0xFB
000d2f d1bf      	RCALL __GETW1P
000d30 9631      	ADIW R30,1
000d31 93ed      	ST   X+,R30
000d32 93fc      	ST   X,R31
000d33 9731      	SBIW R30,1
000d34 81aa      	LDD  R26,Y+2
000d35 83a0      	STD  Z+0,R26
000d36 c003      	RJMP _0xFC
          _0xFB:
000d37 81ea      	LDD  R30,Y+2
000d38 93ea      	ST   -Y,R30
000d39 d49d      	RCALL _putchar
          _0xFC:
000d3a 9623      	ADIW R28,3
000d3b 9508      	RET
          __print_G8:
000d3c 9726      	SBIW R28,6
000d3d d1c9      	RCALL __SAVELOCR6
000d3e e000      	LDI  R16,0
          _0xFD:
000d3f 89e8      	LDD  R30,Y+16
000d40 89f9      	LDD  R31,Y+16+1
000d41 9631      	ADIW R30,1
000d42 8be8      	STD  Y+16,R30
000d43 8bf9      	STD  Y+16+1,R31
000d44 9731      	SBIW R30,1
000d45 95c8      	LPM
000d46 2de0      	MOV  R30,R0
000d47 2f3e      	MOV  R19,R30
000d48 30e0      	CPI  R30,0
000d49 f409      	BRNE PC+2
000d4a c14e      	RJMP _0xFF
000d4b 2fe0      	MOV  R30,R16
000d4c 30e0      	CPI  R30,0
000d4d f459      	BRNE _0x103
000d4e 3235      	CPI  R19,37
000d4f f411      	BRNE _0x104
000d50 e001      	LDI  R16,LOW(1)
000d51 c006      	RJMP _0x105
          _0x104:
000d52 933a      	ST   -Y,R19
000d53 85ed      	LDD  R30,Y+13
000d54 85fe      	LDD  R31,Y+13+1
000d55 93fa      	ST   -Y,R31
000d56 93ea      	ST   -Y,R30
000d57 dfd2      	RCALL __put_G8
          _0x105:
000d58 c13f      	RJMP _0x102
          _0x103:
000d59 30e1      	CPI  R30,LOW(0x1)
000d5a f4d1      	BRNE _0x106
000d5b 3235      	CPI  R19,37
000d5c f441      	BRNE _0x107
000d5d 933a      	ST   -Y,R19
000d5e 85ed      	LDD  R30,Y+13
000d5f 85fe      	LDD  R31,Y+13+1
000d60 93fa      	ST   -Y,R31
000d61 93ea      	ST   -Y,R30
000d62 dfc7      	RCALL __put_G8
000d63 e000      	LDI  R16,LOW(0)
000d64 c133      	RJMP _0x102
          _0x107:
000d65 e002      	LDI  R16,LOW(2)
000d66 e050      	LDI  R21,LOW(0)
000d67 e010      	LDI  R17,LOW(0)
000d68 323d      	CPI  R19,45
000d69 f411      	BRNE _0x108
000d6a e011      	LDI  R17,LOW(1)
000d6b c12c      	RJMP _0x102
          _0x108:
000d6c 323b      	CPI  R19,43
000d6d f411      	BRNE _0x109
000d6e e25b      	LDI  R21,LOW(43)
000d6f c128      	RJMP _0x102
          _0x109:
000d70 3230      	CPI  R19,32
000d71 f411      	BRNE _0x10A
000d72 e250      	LDI  R21,LOW(32)
000d73 c124      	RJMP _0x102
          _0x10A:
000d74 c002      	RJMP _0x10B
          _0x106:
000d75 30e2      	CPI  R30,LOW(0x2)
000d76 f439      	BRNE _0x10C
          _0x10B:
000d77 e040      	LDI  R20,LOW(0)
000d78 e003      	LDI  R16,LOW(3)
000d79 3330      	CPI  R19,48
000d7a f411      	BRNE _0x10D
000d7b 6810      	ORI  R17,LOW(128)
000d7c c11b      	RJMP _0x102
          _0x10D:
000d7d c003      	RJMP _0x10E
          _0x10C:
000d7e 30e3      	CPI  R30,LOW(0x3)
000d7f f009      	BREQ PC+2
000d80 c117      	RJMP _0x102
          _0x10E:
000d81 3330      	CPI  R19,48
000d82 f010      	BRLO _0x111
000d83 333a      	CPI  R19,58
000d84 f008      	BRLO _0x112
          _0x111:
000d85 c009      	RJMP _0x110
          _0x112:
000d86 2f24      	MOV  R18,R20
000d87 0f44      	LSL  R20
000d88 0f44      	LSL  R20
000d89 0f42      	ADD  R20,R18
000d8a 0f44      	LSL  R20
000d8b 2fe3      	MOV  R30,R19
000d8c 53e0      	SUBI R30,LOW(48)
000d8d 0f4e      	ADD  R20,R30
000d8e c109      	RJMP _0x102
          _0x110:
000d8f 2fe3      	MOV  R30,R19
000d90 36e3      	CPI  R30,LOW(0x63)
000d91 f471      	BRNE _0x116
000d92 85ae      	LDD  R26,Y+14
000d93 85bf      	LDD  R27,Y+14+1
000d94 9714      	SBIW R26,4
000d95 87ae      	STD  Y+14,R26
000d96 87bf      	STD  Y+14+1,R27
000d97 9614      	ADIW R26,4
000d98 91ec      	LD   R30,X
000d99 93ea      	ST   -Y,R30
000d9a 85ed      	LDD  R30,Y+13
000d9b 85fe      	LDD  R31,Y+13+1
000d9c 93fa      	ST   -Y,R31
000d9d 93ea      	ST   -Y,R30
000d9e df8b      	RCALL __put_G8
000d9f c0f7      	RJMP _0x117
          _0x116:
000da0 37e3      	CPI  R30,LOW(0x73)
000da1 f471      	BRNE _0x119
000da2 85ae      	LDD  R26,Y+14
000da3 85bf      	LDD  R27,Y+14+1
000da4 9714      	SBIW R26,4
000da5 87ae      	STD  Y+14,R26
000da6 87bf      	STD  Y+14+1,R27
000da7 9614      	ADIW R26,4
000da8 d146      	RCALL __GETW1P
000da9 83ee      	STD  Y+6,R30
000daa 83ff      	STD  Y+6+1,R31
000dab 93fa      	ST   -Y,R31
000dac 93ea      	ST   -Y,R30
000dad d10d      	RCALL _strlen
000dae 2f0e      	MOV  R16,R30
000daf c010      	RJMP _0x11A
          _0x119:
000db0 37e0      	CPI  R30,LOW(0x70)
000db1 f491      	BRNE _0x11C
000db2 85ae      	LDD  R26,Y+14
000db3 85bf      	LDD  R27,Y+14+1
000db4 9714      	SBIW R26,4
000db5 87ae      	STD  Y+14,R26
000db6 87bf      	STD  Y+14+1,R27
000db7 9614      	ADIW R26,4
000db8 d136      	RCALL __GETW1P
000db9 83ee      	STD  Y+6,R30
000dba 83ff      	STD  Y+6+1,R31
000dbb 93fa      	ST   -Y,R31
000dbc 93ea      	ST   -Y,R30
000dbd d107      	RCALL _strlenf
000dbe 2f0e      	MOV  R16,R30
000dbf 6018      	ORI  R17,LOW(8)
          _0x11A:
000dc0 6012      	ORI  R17,LOW(2)
000dc1 771f      	ANDI R17,LOW(127)
000dc2 e020      	LDI  R18,LOW(0)
000dc3 c03c      	RJMP _0x11D
          _0x11C:
000dc4 36e4      	CPI  R30,LOW(0x64)
000dc5 f011      	BREQ _0x120
000dc6 36e9      	CPI  R30,LOW(0x69)
000dc7 f411      	BRNE _0x121
          _0x120:
000dc8 6014      	ORI  R17,LOW(4)
000dc9 c002      	RJMP _0x122
          _0x121:
000dca 37e5      	CPI  R30,LOW(0x75)
000dcb f431      	BRNE _0x123
          _0x122:
000dcc ece2      	LDI  R30,LOW(_tbl10_G8*2)
000dcd e0f1      	LDI  R31,HIGH(_tbl10_G8*2)
000dce 83ee      	STD  Y+6,R30
000dcf 83ff      	STD  Y+6+1,R31
000dd0 e005      	LDI  R16,LOW(5)
000dd1 c00c      	RJMP _0x124
          _0x123:
000dd2 35e8      	CPI  R30,LOW(0x58)
000dd3 f411      	BRNE _0x126
000dd4 6018      	ORI  R17,LOW(8)
000dd5 c003      	RJMP _0x127
          _0x126:
000dd6 37e8      	CPI  R30,LOW(0x78)
000dd7 f009      	BREQ PC+2
000dd8 c0be      	RJMP _0x155
          _0x127:
000dd9 ecec      	LDI  R30,LOW(_tbl16_G8*2)
000dda e0f1      	LDI  R31,HIGH(_tbl16_G8*2)
000ddb 83ee      	STD  Y+6,R30
000ddc 83ff      	STD  Y+6+1,R31
000ddd e004      	LDI  R16,LOW(4)
          _0x124:
000dde ff12      	SBRS R17,2
000ddf c017      	RJMP _0x129
000de0 85ae      	LDD  R26,Y+14
000de1 85bf      	LDD  R27,Y+14+1
000de2 9714      	SBIW R26,4
000de3 87ae      	STD  Y+14,R26
000de4 87bf      	STD  Y+14+1,R27
000de5 9614      	ADIW R26,4
000de6 d108      	RCALL __GETW1P
000de7 87ea      	STD  Y+10,R30
000de8 87fb      	STD  Y+10+1,R31
000de9 85aa      	LDD  R26,Y+10
000dea 85bb      	LDD  R27,Y+10+1
000deb 9710      	SBIW R26,0
000dec f424      	BRGE _0x12A
000ded d0e8      	RCALL __ANEGW1
000dee 87ea      	STD  Y+10,R30
000def 87fb      	STD  Y+10+1,R31
000df0 e25d      	LDI  R21,LOW(45)
          _0x12A:
000df1 3050      	CPI  R21,0
000df2 f011      	BREQ _0x12B
000df3 5f0f      	SUBI R16,-LOW(1)
000df4 c001      	RJMP _0x12C
          _0x12B:
000df5 7f1b      	ANDI R17,LOW(251)
          _0x12C:
000df6 c009      	RJMP _0x12D
          _0x129:
000df7 85ae      	LDD  R26,Y+14
000df8 85bf      	LDD  R27,Y+14+1
000df9 9714      	SBIW R26,4
000dfa 87ae      	STD  Y+14,R26
000dfb 87bf      	STD  Y+14+1,R27
000dfc 9614      	ADIW R26,4
000dfd d0f1      	RCALL __GETW1P
000dfe 87ea      	STD  Y+10,R30
000dff 87fb      	STD  Y+10+1,R31
          _0x12D:
          _0x11D:
000e00 fd10      	SBRC R17,0
000e01 c015      	RJMP _0x12E
          _0x12F:
000e02 1704      	CP   R16,R20
000e03 f498      	BRSH _0x131
000e04 ff17      	SBRS R17,7
000e05 c008      	RJMP _0x132
000e06 ff12      	SBRS R17,2
000e07 c004      	RJMP _0x133
000e08 7f1b      	ANDI R17,LOW(251)
000e09 2f35      	MOV  R19,R21
000e0a 5001      	SUBI R16,LOW(1)
000e0b c001      	RJMP _0x134
          _0x133:
000e0c e330      	LDI  R19,LOW(48)
          _0x134:
000e0d c001      	RJMP _0x135
          _0x132:
000e0e e230      	LDI  R19,LOW(32)
          _0x135:
000e0f 933a      	ST   -Y,R19
000e10 85ed      	LDD  R30,Y+13
000e11 85fe      	LDD  R31,Y+13+1
000e12 93fa      	ST   -Y,R31
000e13 93ea      	ST   -Y,R30
000e14 df15      	RCALL __put_G8
000e15 5041      	SUBI R20,LOW(1)
000e16 cfeb      	RJMP _0x12F
          _0x131:
          _0x12E:
000e17 2f20      	MOV  R18,R16
000e18 ff11      	SBRS R17,1
000e19 c01e      	RJMP _0x136
          _0x137:
000e1a 3020      	CPI  R18,0
000e1b f0d9      	BREQ _0x139
000e1c ff13      	SBRS R17,3
000e1d c009      	RJMP _0x13A
000e1e 81ee      	LDD  R30,Y+6
000e1f 81ff      	LDD  R31,Y+6+1
000e20 9631      	ADIW R30,1
000e21 83ee      	STD  Y+6,R30
000e22 83ff      	STD  Y+6+1,R31
000e23 9731      	SBIW R30,1
000e24 95c8      	LPM
000e25 2de0      	MOV  R30,R0
000e26 c005      	RJMP _0x172
          _0x13A:
000e27 81ae      	LDD  R26,Y+6
000e28 81bf      	LDD  R27,Y+6+1
000e29 91ed      	LD   R30,X+
000e2a 83ae      	STD  Y+6,R26
000e2b 83bf      	STD  Y+6+1,R27
          _0x172:
000e2c 93ea      	ST   -Y,R30
000e2d 85ed      	LDD  R30,Y+13
000e2e 85fe      	LDD  R31,Y+13+1
000e2f 93fa      	ST   -Y,R31
000e30 93ea      	ST   -Y,R30
000e31 def8      	RCALL __put_G8
000e32 3040      	CPI  R20,0
000e33 f009      	BREQ _0x13C
000e34 5041      	SUBI R20,LOW(1)
          _0x13C:
000e35 5021      	SUBI R18,LOW(1)
000e36 cfe3      	RJMP _0x137
          _0x139:
000e37 c052      	RJMP _0x13D
          _0x136:
          _0x13F:
000e38 e330      	LDI  R19,LOW(48)
000e39 81ee      	LDD  R30,Y+6
000e3a 81ff      	LDD  R31,Y+6+1
000e3b 9632      	ADIW R30,2
000e3c 83ee      	STD  Y+6,R30
000e3d 83ff      	STD  Y+6+1,R31
000e3e 9732      	SBIW R30,2
000e3f d0b3      	RCALL __GETW1PF
000e40 87e8      	STD  Y+8,R30
000e41 87f9      	STD  Y+8+1,R31
000e42 85aa                                            ldd  r26,y+10  ;R26,R27=n
000e43 85bb                                            ldd  r27,y+11
                                            calc_digit:
000e44 17ae                                            cp   r26,r30
000e45 07bf                                            cpc  r27,r31
000e46 f020                                            brlo calc_digit_done
000e47 5f3f      	SUBI R19,-LOW(1)
000e48 1bae      	                                  sub  r26,r30
000e49 0bbf      	                                  sbc  r27,r31
000e4a f7c9      	                                  brne calc_digit
                                            calc_digit_done:
000e4b 87aa                                            std  Y+10,r26 ;n=R26,R27
000e4c 87bb                                            std  y+11,r27
000e4d e3e9      	LDI  R30,LOW(57)
000e4e 17e3      	CP   R30,R19
000e4f f428      	BRSH _0x141
000e50 ff13      	SBRS R17,3
000e51 c002      	RJMP _0x142
000e52 5f39      	SUBI R19,-LOW(7)
000e53 c001      	RJMP _0x143
          _0x142:
000e54 5d39      	SUBI R19,-LOW(39)
          _0x143:
          _0x141:
000e55 fd14      	SBRC R17,4
000e56 c021      	RJMP _0x145
000e57 e3e0      	LDI  R30,LOW(48)
000e58 17e3      	CP   R30,R19
000e59 f030      	BRLO _0x147
000e5a 85a8      	LDD  R26,Y+8
000e5b 85b9      	LDD  R27,Y+8+1
000e5c 30a1      	CPI  R26,LOW(0x1)
000e5d e0e0      	LDI  R30,HIGH(0x1)
000e5e 07be      	CPC  R27,R30
000e5f f411      	BRNE _0x146
          _0x147:
000e60 6110      	ORI  R17,LOW(16)
000e61 c00a      	RJMP _0x149
          _0x146:
000e62 1742      	CP   R20,R18
000e63 f010      	BRLO _0x14B
000e64 ff10      	SBRS R17,0
000e65 c001      	RJMP _0x14C
          _0x14B:
000e66 c01a      	RJMP _0x14A
          _0x14C:
000e67 e230      	LDI  R19,LOW(32)
000e68 ff17      	SBRS R17,7
000e69 c00e      	RJMP _0x14D
000e6a e330      	LDI  R19,LOW(48)
000e6b 6110      	ORI  R17,LOW(16)
          _0x149:
000e6c ff12      	SBRS R17,2
000e6d c00a      	RJMP _0x14E
000e6e 7f1b      	ANDI R17,LOW(251)
000e6f 935a      	ST   -Y,R21
000e70 85ed      	LDD  R30,Y+13
000e71 85fe      	LDD  R31,Y+13+1
000e72 93fa      	ST   -Y,R31
000e73 93ea      	ST   -Y,R30
000e74 deb5      	RCALL __put_G8
000e75 3040      	CPI  R20,0
000e76 f009      	BREQ _0x14F
000e77 5041      	SUBI R20,LOW(1)
          _0x14F:
          _0x14E:
          _0x14D:
          _0x145:
000e78 933a      	ST   -Y,R19
000e79 85ed      	LDD  R30,Y+13
000e7a 85fe      	LDD  R31,Y+13+1
000e7b 93fa      	ST   -Y,R31
000e7c 93ea      	ST   -Y,R30
000e7d deac      	RCALL __put_G8
000e7e 3040      	CPI  R20,0
000e7f f009      	BREQ _0x150
000e80 5041      	SUBI R20,LOW(1)
          _0x150:
          _0x14A:
000e81 5021      	SUBI R18,LOW(1)
000e82 85a8      	LDD  R26,Y+8
000e83 85b9      	LDD  R27,Y+8+1
000e84 e0e1      	LDI  R30,LOW(1)
000e85 e0f0      	LDI  R31,HIGH(1)
000e86 17ea      	CP   R30,R26
000e87 07fb      	CPC  R31,R27
000e88 f408      	BRSH _0x140
000e89 cfae      	RJMP _0x13F
          _0x140:
          _0x13D:
000e8a ff10      	SBRS R17,0
000e8b c00b      	RJMP _0x151
          _0x152:
000e8c 3040      	CPI  R20,0
000e8d f049      	BREQ _0x154
000e8e 5041      	SUBI R20,LOW(1)
000e8f e2e0      	LDI  R30,LOW(32)
000e90 93ea      	ST   -Y,R30
000e91 85ed      	LDD  R30,Y+13
000e92 85fe      	LDD  R31,Y+13+1
000e93 93fa      	ST   -Y,R31
000e94 93ea      	ST   -Y,R30
000e95 de94      	RCALL __put_G8
000e96 cff5      	RJMP _0x152
          _0x154:
          _0x151:
          _0x155:
          _0x117:
000e97 e000      	LDI  R16,LOW(0)
          _0x102:
000e98 cea6      	RJMP _0xFD
          _0xFF:
000e99 d074      	RCALL __LOADLOCR6
000e9a 9662      	ADIW R28,18
000e9b 9508      	RET
          _printf:
000e9c 92ff      	PUSH R15
000e9d 2ef8      	MOV  R15,R24
000e9e 9722      	SBIW R28,2
000e9f d06b      	RCALL __SAVELOCR2
000ea0 2fac      	MOV  R26,R28
000ea1 2fbd      	MOV  R27,R29
000ea2 d02f      	RCALL __ADDW2R15
000ea3   +  	__PUTW2R 16,17
000ea5 e0e0      	LDI  R30,0
000ea6 83ea      	STD  Y+2,R30
000ea7 83eb      	STD  Y+2+1,R30
000ea8 2fac      	MOV  R26,R28
000ea9 2fbd      	MOV  R27,R29
000eaa 9614      	ADIW R26,4
000eab d026      	RCALL __ADDW2R15
000eac d042      	RCALL __GETW1P
000ead 93fa      	ST   -Y,R31
000eae 93ea      	ST   -Y,R30
000eaf 931a      	ST   -Y,R17
000eb0 930a      	ST   -Y,R16
000eb1 2fec      	MOV  R30,R28
000eb2 2ffd      	MOV  R31,R29
000eb3 9636      	ADIW R30,6
000eb4 93fa      	ST   -Y,R31
000eb5 93ea      	ST   -Y,R30
000eb6 de85      	RCALL __print_G8
000eb7 d05a      	RCALL __LOADLOCR2
000eb8 9624      	ADIW R28,4
000eb9 90ff      	POP  R15
000eba 9508      	RET
         
          _strlen:
000ebb 91a9      	ld   r26,y+
000ebc 91b9      	ld   r27,y+
000ebd 27ee      	clr  r30
000ebe 27ff      	clr  r31
          __strlen0:
000ebf 916d      	ld   r22,x+
000ec0 2366      	tst  r22
000ec1 f011      	breq __strlen1
000ec2 9631      	adiw r30,1
000ec3 cffb      	rjmp __strlen0
          __strlen1:
000ec4 9508      	ret
         
          _strlenf:
000ec5 27aa      	clr  r26
000ec6 27bb      	clr  r27
000ec7 91e9      	ld   r30,y+
000ec8 91f9      	ld   r31,y+
          __strlenf0:
000ec9 95c8      	lpm 
000eca 2000      	tst  r0
000ecb f019      	breq __strlenf1
000ecc 9611      	adiw r26,1
000ecd 9631      	adiw r30,1
000ece cffa      	rjmp __strlenf0
          __strlenf1:
000ecf 2fea      	mov  r30,r26
000ed0 2ffb      	mov  r31,r27
000ed1 9508      	ret
         
          __ADDW2R15:
000ed2 2400      	CLR  R0
000ed3 0daf      	ADD  R26,R15
000ed4 1db0      	ADC  R27,R0
000ed5 9508      	RET
         
          __ANEGW1:
000ed6 95e0      	COM  R30
000ed7 95f0      	COM  R31
000ed8 9631      	ADIW R30,1
000ed9 9508      	RET
         
          __CWD1:
000eda 2f6f      	MOV  R22,R31
000edb 0f66      	ADD  R22,R22
000edc 0b66      	SBC  R22,R22
000edd 2f76      	MOV  R23,R22
000ede 9508      	RET
         
          __MULW12U:
000edf 2e0a      	MOV  R0,R26
000ee0 2e1b      	MOV  R1,R27
000ee1 e181      	LDI  R24,17
000ee2 27aa      	CLR  R26
000ee3 1bbb      	SUB  R27,R27
000ee4 c005      	RJMP __MULW12U1
          __MULW12U3:
000ee5 f410      	BRCC __MULW12U2
000ee6 0da0      	ADD  R26,R0
000ee7 1db1      	ADC  R27,R1
          __MULW12U2:
000ee8 95b6      	LSR  R27
000ee9 95a7      	ROR  R26
          __MULW12U1:
000eea 95f7      	ROR  R31
000eeb 95e7      	ROR  R30
000eec 958a      	DEC  R24
000eed f7b9      	BRNE __MULW12U3
000eee 9508      	RET
         
          __GETW1P:
000eef 91ed      	LD   R30,X+
000ef0 91fc      	LD   R31,X
000ef1 9711      	SBIW R26,1
000ef2 9508      	RET
         
          __GETW1PF:
000ef3 95c8      	LPM
000ef4 9631      	ADIW R30,1
000ef5 2c10      	MOV  R1,R0
000ef6 95c8      	LPM 
000ef7 2df0      	MOV  R31,R0
000ef8 2de1      	MOV  R30,R1
000ef9 9508      	RET
         
          __PUTPARD1:
000efa 937a      	ST   -Y,R23
000efb 936a      	ST   -Y,R22
000efc 93fa      	ST   -Y,R31
000efd 93ea      	ST   -Y,R30
000efe 9508      	RET
         
          __CPW02:
000eff 2400      	CLR  R0
000f00 160a      	CP   R0,R26
000f01 060b      	CPC  R0,R27
000f02 9508      	RET
         
          __LSLB3:
000f03 0fee      	LSL  R30
000f04 0fee      	LSL  R30
000f05 0fee      	LSL  R30
000f06 9508      	RET
         
          __SAVELOCR6:
000f07 935a      	ST   -Y,R21
          __SAVELOCR5:
000f08 934a      	ST   -Y,R20
          __SAVELOCR4:
000f09 933a      	ST   -Y,R19
          __SAVELOCR3:
000f0a 932a      	ST   -Y,R18
          __SAVELOCR2:
000f0b 931a      	ST   -Y,R17
000f0c 930a      	ST   -Y,R16
000f0d 9508      	RET
         
          __LOADLOCR6:
000f0e 815d      	LDD  R21,Y+5
          __LOADLOCR5:
000f0f 814c      	LDD  R20,Y+4
          __LOADLOCR4:
000f10 813b      	LDD  R19,Y+3
          __LOADLOCR3:
000f11 812a      	LDD  R18,Y+2
          __LOADLOCR2:
000f12 8119      	LDD  R17,Y+1
000f13 8108      	LD   R16,Y
000f14 9508      	RET
         
          __LOADLOCR2P:
000f15 9109      	LD   R16,Y+
000f16 9119      	LD   R17,Y+
000f17 9508      	RET
         
          __INITLOCB:
          __INITLOCW:
000f18 0fac      	ADD R26,R28
000f19 1fbd      	ADC R27,R29
          __INITLOC0:
000f1a 95c8      	LPM
000f1b 9631      	ADIW R30,1
000f1c 920d      	ST   X+,R0
000f1d 958a      	DEC  R24
000f1e f7d9      	BRNE __INITLOC0
000f1f 9508      	RET
         
         ;END OF CODE MARKER
          __END_OF_CODE:

Assembly complete with no errors.
