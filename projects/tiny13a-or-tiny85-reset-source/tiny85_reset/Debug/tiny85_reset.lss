
tiny85_reset.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e6  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000017a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008df  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000028b  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000189  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000875  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000068  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000a62d  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000db  00000000  00000000  0000bc75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000028  00000000  00000000  0000bd50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00002318  00000000  00000000  0000bd78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	55 c0       	rjmp	.+170    	; 0xc0 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:
//	board_init();

	// Insert application code here, after the board has been initialized.

	// save and clear MCUSR
	reset_source = MCUSR;					// store reset source information
  40:	84 b7       	in	r24, 0x34	; 52
  42:	80 93 61 00 	sts	0x0061, r24
	MCUSR = 0x00;							// clear register
  46:	14 be       	out	0x34, r1	; 52
	
	// configure CPU clock
	CLKPR = 0x80;							// CLKPCE
  48:	80 e8       	ldi	r24, 0x80	; 128
  4a:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x07;							// divide by 128 = 62.5 kHz CPU clock
  4c:	87 e0       	ldi	r24, 0x07	; 7
  4e:	86 bd       	out	0x26, r24	; 38
	
	// set up 2 second timer for LED delay
	TCNT0 = 0;								// reset timer
  50:	12 be       	out	0x32, r1	; 50
	TCCR0A = (1 << WGM01);					// Clear Timer on Compare (CTC) mode
  52:	82 e0       	ldi	r24, 0x02	; 2
  54:	8a bd       	out	0x2a, r24	; 42
	OCR0A = 122;							// Compare A : 2 seconds at 61 Hz clock
  56:	8a e7       	ldi	r24, 0x7A	; 122
  58:	89 bd       	out	0x29, r24	; 41
	TIMSK = (1 << OCIE0A);					// interrupt on compare A
  5a:	80 e1       	ldi	r24, 0x10	; 16
  5c:	89 bf       	out	0x39, r24	; 57
	TCCR0B = (1 << CS02) | (1 << CS00);		// Start timer : CPU clock / 1024 = 61 Hz counter clock
  5e:	85 e0       	ldi	r24, 0x05	; 5
  60:	83 bf       	out	0x33, r24	; 51
	
	// set up GPIO output for LEDs
	PORTB |= (1 << PB3) | (1 << PB4);		// Set PB3 and PB4 high for LED to be off
  62:	88 b3       	in	r24, 0x18	; 24
  64:	88 61       	ori	r24, 0x18	; 24
  66:	88 bb       	out	0x18, r24	; 24
	DDRB |= (1 << PB3) | (1 << PB4);		// Enable outputs
  68:	87 b3       	in	r24, 0x17	; 23
  6a:	88 61       	ori	r24, 0x18	; 24
  6c:	87 bb       	out	0x17, r24	; 23
	
	Enable_global_interrupt();
  6e:	78 94       	sei
	
	while (1)
	{
		if(triggered)						// indicate source by blinking PB4
  70:	80 91 60 00 	lds	r24, 0x0060
  74:	88 23       	and	r24, r24
  76:	e1 f3       	breq	.-8      	; 0x70 <main+0x30>
		{
			if (reset_source == ((1<<BORF) | (1<<PORF)))	// both bits set on power on if BOD fuse is enabled
  78:	80 91 61 00 	lds	r24, 0x0061
  7c:	85 30       	cpi	r24, 0x05	; 5
  7e:	29 f4       	brne	.+10     	; 0x8a <main+0x4a>
			{
				reset_source = reset_source & ~(1<<BORF);	// so clear brown out flag
  80:	80 91 61 00 	lds	r24, 0x0061
  84:	8b 7f       	andi	r24, 0xFB	; 251
  86:	80 93 61 00 	sts	0x0061, r24
			}
			for(uint8_t x = reset_source; x > 0; x = x >> 1)
  8a:	80 91 61 00 	lds	r24, 0x0061
  8e:	88 23       	and	r24, r24
  90:	81 f0       	breq	.+32     	; 0xb2 <main+0x72>
			{
				PORTB &= ~(1 << PB4);		// turn LED on
  92:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	fc e0       	ldi	r31, 0x0C	; 12
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x58>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x5e>
  9e:	00 00       	nop
				_delay_ms(200);				// 
				PORTB |= (1 << PB4);		// turn LED off
  a0:	c4 9a       	sbi	0x18, 4	; 24
  a2:	e4 e3       	ldi	r30, 0x34	; 52
  a4:	fc e0       	ldi	r31, 0x0C	; 12
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x66>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x6c>
  ac:	00 00       	nop
		{
			if (reset_source == ((1<<BORF) | (1<<PORF)))	// both bits set on power on if BOD fuse is enabled
			{
				reset_source = reset_source & ~(1<<BORF);	// so clear brown out flag
			}
			for(uint8_t x = reset_source; x > 0; x = x >> 1)
  ae:	86 95       	lsr	r24
  b0:	81 f7       	brne	.-32     	; 0x92 <main+0x52>
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	9d e3       	ldi	r25, 0x3D	; 61
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x76>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x7c>
  bc:	00 00       	nop
  be:	d8 cf       	rjmp	.-80     	; 0x70 <main+0x30>

000000c0 <__vector_10>:
		}
	}
}

ISR(TIMER0_COMPA_vect)					// 2 second timer compare
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	PORTB &= ~(1 << PB3);				// Clear to turn on LED
  cc:	c3 98       	cbi	0x18, 3	; 24
	TCCR0B = 0x00;						// Stop 2 second timer
  ce:	13 be       	out	0x33, r1	; 51
	triggered = true;					// 
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 60 00 	sts	0x0060, r24
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
