
cp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000238  2**0
                  ALLOC
  3 .noinit       00000000  00800062  00800062  00000238  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000238  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000080  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000208  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000000f4  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000001c5  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000000d5  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a <__vector_5>
  18:	0c 94 bb 00 	jmp	0x176 <__vector_6>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 69 00 	jmp	0xd2 <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <vInit_Input_Cap>:
}

void vInit_Input_Cap(void)
{
	TCCR1A = 0X00;
  8e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = FALL_EDGE_TRIGGER;
  90:	8d e8       	ldi	r24, 0x8D	; 141
  92:	8e bd       	out	0x2e, r24	; 46
	TIMSK  = DISABLE_OCI;//Only ICP is enabled
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	89 bf       	out	0x39, r24	; 57
	OCR1A  = Time_out;//Set for Max Packet
  98:	8f ea       	ldi	r24, 0xAF	; 175
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	9b bd       	out	0x2b, r25	; 43
  9e:	8a bd       	out	0x2a, r24	; 42
	TIFR   = 0X00;
  a0:	18 be       	out	0x38, r1	; 56
  a2:	08 95       	ret

000000a4 <vInit_Serial>:
}

/* BAUD 115200 */
void vInit_Serial(void)
{
	UBRRH = 0;
  a4:	10 bc       	out	0x20, r1	; 32
	UBRRL = 3;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	89 b9       	out	0x09, r24	; 9
	UCSRB = _BV(RXEN) | _BV(TXEN);
  aa:	88 e1       	ldi	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
	UCSRC = _BV(URSEL) | 6;
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	80 bd       	out	0x20, r24	; 32
  b2:	08 95       	ret

000000b4 <bigdelay>:
}

void send(unsigned char dta)
{
	while( !( UCSRA & (1<<UDRE)) );
	UDR = dta;
}

void bigdelay(void)
{
	unsigned int i,j;
	for(i=0;i<32000;i++)
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(j=0;j<6;j++)
		{
			asm("nop");
  bc:	00 00       	nop
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	97 ff       	sbrs	r25, 7
  c2:	fc cf       	rjmp	.-8      	; 0xbc <bigdelay+0x8>
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	8d e7       	ldi	r24, 0x7D	; 125
  ca:	20 30       	cpi	r18, 0x00	; 0
  cc:	38 07       	cpc	r19, r24
  ce:	a0 f3       	brcs	.-24     	; 0xb8 <bigdelay+0x4>
  d0:	08 95       	ret

000000d2 <main>:
  d2:	cf e5       	ldi	r28, 0x5F	; 95
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	0e 94 47 00 	call	0x8e <vInit_Input_Cap>
  de:	0e 94 52 00 	call	0xa4 <vInit_Serial>
  e2:	8e ef       	ldi	r24, 0xFE	; 254
  e4:	28 22       	and	r2, r24
  e6:	10 92 61 00 	sts	0x0061, r1
  ea:	10 92 60 00 	sts	0x0060, r1
  ee:	33 24       	eor	r3, r3
  f0:	8f 9a       	sbi	0x11, 7	; 17
  f2:	78 94       	sei
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	90 e8       	ldi	r25, 0x80	; 128
  f8:	89 27       	eor	r24, r25
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	0e 94 5a 00 	call	0xb4 <bigdelay>
 100:	f9 cf       	rjmp	.-14     	; 0xf4 <main+0x22>

00000102 <send>:
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <send>
 106:	8c b9       	out	0x0c, r24	; 12
 108:	08 95       	ret

0000010a <__vector_5>:
		}
	}
}

ISR(TIMER1_CAPT_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
	cli();
 118:	f8 94       	cli
	TCCR1B = STOP_CLOCK;
 11a:	88 e8       	ldi	r24, 0x88	; 136
 11c:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0X00;
 11e:	1d bc       	out	0x2d, r1	; 45
 120:	1c bc       	out	0x2c, r1	; 44

	if(start){
 122:	82 2d       	mov	r24, r2
 124:	81 70       	andi	r24, 0x01	; 1
 126:	20 fe       	sbrs	r2, 0
 128:	15 c0       	rjmp	.+42     	; 0x154 <__vector_5+0x4a>
		uiTimer = ICR1;
 12a:	86 b5       	in	r24, 0x26	; 38
 12c:	97 b5       	in	r25, 0x27	; 39
 12e:	90 93 61 00 	sts	0x0061, r25
 132:	80 93 60 00 	sts	0x0060, r24
		UDR = (unsigned char)uiTimer;
 136:	80 91 60 00 	lds	r24, 0x0060
 13a:	8c b9       	out	0x0c, r24	; 12
		ucBit_Count++;
 13c:	33 94       	inc	r3
		
		if(ucBit_Count == 13){
 13e:	8d e0       	ldi	r24, 0x0D	; 13
 140:	38 16       	cp	r3, r24
 142:	79 f4       	brne	.+30     	; 0x162 <__vector_5+0x58>
			start = 0;
 144:	9e ef       	ldi	r25, 0xFE	; 254
 146:	29 22       	and	r2, r25
			TIMSK=DISABLE_OCI;//Clear the OCR Interrrupt Flag
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	89 bf       	out	0x39, r24	; 57
			TIFR=B(OCF1A);//Clear the OCRI Flag
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	88 bf       	out	0x38, r24	; 56
			TCCR1B = FALL_EDGE_TRIGGER;
 150:	8d e8       	ldi	r24, 0x8D	; 141
 152:	08 c0       	rjmp	.+16     	; 0x164 <__vector_5+0x5a>
		}else{
			TCCR1B = RISE_EDGE_TRIGGER;
		}
	}else{
		start = 1;
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	29 2a       	or	r2, r25
		ucBit_Count = 0;
 158:	38 2e       	mov	r3, r24
		TIFR=B(OCF1A);//Clear the Flag
 15a:	80 e1       	ldi	r24, 0x10	; 16
 15c:	88 bf       	out	0x38, r24	; 56
		TIMSK=ENABLE_OCI;//Set the OCR Interrrupt Flag
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	89 bf       	out	0x39, r24	; 57
		TCCR1B = RISE_EDGE_TRIGGER;
 162:	8d ec       	ldi	r24, 0xCD	; 205
 164:	8e bd       	out	0x2e, r24	; 46
	}
	sei();
 166:	78 94       	sei
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_6>:
}

ISR(TIMER1_COMPA_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
	TCCR1B = STOP_CLOCK;
 182:	88 e8       	ldi	r24, 0x88	; 136
 184:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0X00;
 186:	1d bc       	out	0x2d, r1	; 45
 188:	1c bc       	out	0x2c, r1	; 44
	start = 0;
 18a:	8e ef       	ldi	r24, 0xFE	; 254
 18c:	28 22       	and	r2, r24
	ucBit_Count = 0;
 18e:	33 24       	eor	r3, r3
	TIMSK=DISABLE_OCI;//Clear the OCR Interrrupt Flag
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	89 bf       	out	0x39, r24	; 57
	//send(0xBA);
	TCCR1B = FALL_EDGE_TRIGGER;
 194:	8d e8       	ldi	r24, 0x8D	; 141
 196:	8e bd       	out	0x2e, r24	; 46
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti
