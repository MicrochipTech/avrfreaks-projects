
R347.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000502  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000042  00800100  00800100  00000576  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000eb  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000334  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001c1  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078e  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019f  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d4  00000000  00000000  00001cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_13>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 34       	cpi	r26, 0x42	; 66
  94:	b1 07       	cpc	r27, r17
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  9c:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <Init_Ports>:
volatile int Timeout_counter;
unsigned char String_Buffer[64];

void Init_Ports (void)
{
    on(LED_DDR);
  a4:	22 9a       	sbi	0x04, 2	; 4
    on(RFD_M0_DDR);
  a6:	3a 9a       	sbi	0x07, 2	; 7
    on(RFD_M1_DDR);
  a8:	3b 9a       	sbi	0x07, 3	; 7
    on(RFD_M2_DDR);
  aa:	3c 9a       	sbi	0x07, 4	; 7
    on(RFD_FAC_PROG_DDR);
  ac:	3d 9a       	sbi	0x07, 5	; 7
    on(RFD_LEARN_DDR);
  ae:	3e 9a       	sbi	0x07, 6	; 7
    off(RFD_RESET);
  b0:	5c 9a       	sbi	0x0b, 4	; 11
    on(RFD_RESET_DDR);
  b2:	54 9a       	sbi	0x0a, 4	; 10
    on(RFD_PWR_DDR);
  b4:	56 9a       	sbi	0x0a, 6	; 10
    on(RFD_LOGIC_IO_DDR);
  b6:	57 9a       	sbi	0x0a, 7	; 10
} // End proc
  b8:	08 95       	ret

000000ba <Init_USART>:

void Init_USART (unsigned int ubrr)
{
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr>>8);
  ba:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char)ubrr;
  be:	80 93 c4 00 	sts	0x00C4, r24
    // Enable RX Complete Interrupt, Receiver and Transmitter
    //UCSR0B = (unsigned char)((1 << RXCIE0)|(1 << RXEN0)|(1 << TXEN0));
	UCSR0B =  ( (1 << RXEN0)|(1 << TXEN0) );
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	80 93 c1 00 	sts	0x00C1, r24
    // Asynchronous USART, Parity Disable, Stop Bit 1, Set frame format: 8data
    UCSR0C = (unsigned char)(3 << UCSZ00);
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	80 93 c2 00 	sts	0x00C2, r24
} // End proc
  ce:	08 95       	ret

000000d0 <Init_Timer1>:

void Init_Timer1 (void)
{
    OCR1A = 1000;
  d0:	88 ee       	ldi	r24, 0xE8	; 232
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	90 93 89 00 	sts	0x0089, r25
  d8:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
  dc:	10 92 8b 00 	sts	0x008B, r1
  e0:	10 92 8a 00 	sts	0x008A, r1
    ICR1 = 0;
  e4:	10 92 87 00 	sts	0x0087, r1
  e8:	10 92 86 00 	sts	0x0086, r1
    TCNT1 = 0;
  ec:	10 92 85 00 	sts	0x0085, r1
  f0:	10 92 84 00 	sts	0x0084, r1
    TCCR1A = 0;                                              // CTC mode
  f4:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = (unsigned char)((1 << WGM12)|(1 << CS11));      // clk = fclk/8 (T = 1ms with 1,0MHz fclk)
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	80 93 81 00 	sts	0x0081, r24
    TCCR1C = 0;
  fe:	10 92 82 00 	sts	0x0082, r1
    TIMSK1 |= (unsigned char)(1 << OCIE1A);                    // Output Compare A Match Interrupt Enable
 102:	ef e6       	ldi	r30, 0x6F	; 111
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
    TIFR1 |= (unsigned char)((1 << ICF1)|(1 << OCF1A)|(1 << OCF1B)|(1 << TOV1));  // Reset all interrupt vectors
 10c:	86 b3       	in	r24, 0x16	; 22
 10e:	87 62       	ori	r24, 0x27	; 39
 110:	86 bb       	out	0x16, r24	; 22
	sei();
 112:	78 94       	sei
} // End proc
 114:	08 95       	ret

00000116 <__vector_13>:
//__interrupt void timer1_compa_isr (void)
//////////////////////////////////////////////////////////////////////////////////////////////////////
//  gnu interrupt service routine syntax  This worked on the ATmega128 with the Init_Timer using sei()
//////////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER1_COMPA_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
    if (Timeout_counter > 0)
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	18 16       	cp	r1, r24
 12e:	19 06       	cpc	r1, r25
 130:	4c f4       	brge	.+18     	; 0x144 <__vector_13+0x2e>
    {
        Timeout_counter--;
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	90 91 01 01 	lds	r25, 0x0101
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	90 93 01 01 	sts	0x0101, r25
 140:	80 93 00 01 	sts	0x0100, r24
    }
} // End proc
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <RFD_Set_Mode>:

void RFD_Set_Mode (unsigned char Mode)
{
    on(RFD_RESET);  // Reset RFD
 152:	5c 98       	cbi	0x0b, 4	; 11
    switch(Mode)
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	e1 f0       	breq	.+56     	; 0x190 <RFD_Set_Mode+0x3e>
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	28 f4       	brcc	.+10     	; 0x166 <RFD_Set_Mode+0x14>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	81 f0       	breq	.+32     	; 0x180 <RFD_Set_Mode+0x2e>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	90 f4       	brcc	.+36     	; 0x188 <RFD_Set_Mode+0x36>
 164:	09 c0       	rjmp	.+18     	; 0x178 <RFD_Set_Mode+0x26>
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	d9 f0       	breq	.+54     	; 0x1a0 <RFD_Set_Mode+0x4e>
 16a:	85 30       	cpi	r24, 0x05	; 5
 16c:	a8 f0       	brcs	.+42     	; 0x198 <RFD_Set_Mode+0x46>
 16e:	86 30       	cpi	r24, 0x06	; 6
 170:	d9 f0       	breq	.+54     	; 0x1a8 <RFD_Set_Mode+0x56>
 172:	87 30       	cpi	r24, 0x07	; 7
 174:	01 f5       	brne	.+64     	; 0x1b6 <RFD_Set_Mode+0x64>
 176:	1c c0       	rjmp	.+56     	; 0x1b0 <RFD_Set_Mode+0x5e>
    {
    case 0:
        off(RFD_M0);
 178:	42 98       	cbi	0x08, 2	; 8
        off(RFD_M1);
 17a:	43 98       	cbi	0x08, 3	; 8
        off(RFD_M2);
 17c:	44 98       	cbi	0x08, 4	; 8
        break;
 17e:	1b c0       	rjmp	.+54     	; 0x1b6 <RFD_Set_Mode+0x64>
    case 1:
        on(RFD_M0);
 180:	42 9a       	sbi	0x08, 2	; 8
        off(RFD_M1);
 182:	43 98       	cbi	0x08, 3	; 8
        off(RFD_M2);
 184:	44 98       	cbi	0x08, 4	; 8
        break;
 186:	17 c0       	rjmp	.+46     	; 0x1b6 <RFD_Set_Mode+0x64>
    case 2:
        off(RFD_M0);
 188:	42 98       	cbi	0x08, 2	; 8
        on(RFD_M1);
 18a:	43 9a       	sbi	0x08, 3	; 8
        off(RFD_M2);
 18c:	44 98       	cbi	0x08, 4	; 8
        break;
 18e:	13 c0       	rjmp	.+38     	; 0x1b6 <RFD_Set_Mode+0x64>
    case 3:
        on(RFD_M0);
 190:	42 9a       	sbi	0x08, 2	; 8
        on(RFD_M1);
 192:	43 9a       	sbi	0x08, 3	; 8
        off(RFD_M2);
 194:	44 98       	cbi	0x08, 4	; 8
        break;
 196:	0f c0       	rjmp	.+30     	; 0x1b6 <RFD_Set_Mode+0x64>
    case 4:
        off(RFD_M0);
 198:	42 98       	cbi	0x08, 2	; 8
        off(RFD_M1);
 19a:	43 98       	cbi	0x08, 3	; 8
        on(RFD_M2);
 19c:	44 9a       	sbi	0x08, 4	; 8
        break;
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <RFD_Set_Mode+0x64>
    case 5:
        on(RFD_M0);
 1a0:	42 9a       	sbi	0x08, 2	; 8
        off(RFD_M1);
 1a2:	43 98       	cbi	0x08, 3	; 8
        on(RFD_M2);
 1a4:	44 9a       	sbi	0x08, 4	; 8
        break;
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <RFD_Set_Mode+0x64>
    case 6:
        off(RFD_M0);
 1a8:	42 98       	cbi	0x08, 2	; 8
        on(RFD_M1);
 1aa:	43 9a       	sbi	0x08, 3	; 8
        on(RFD_M2);
 1ac:	44 9a       	sbi	0x08, 4	; 8
        break;
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <RFD_Set_Mode+0x64>
    case 7:
        on(RFD_M0);
 1b0:	42 9a       	sbi	0x08, 2	; 8
        on(RFD_M1);
 1b2:	43 9a       	sbi	0x08, 3	; 8
        on(RFD_M2);
 1b4:	44 9a       	sbi	0x08, 4	; 8
        break;
    }
    off(RFD_RESET);  // Release Reset RFD
 1b6:	5c 9a       	sbi	0x0b, 4	; 11
} // End proc
 1b8:	08 95       	ret

000001ba <USART_Receive_Byte>:
#define F_BYTE_RECEIVE_ERROR 0
#define F_BYTE_RECEIVE_OK    1
unsigned char USART_Receive_Byte (unsigned char* byte)
{
    // Wait for data to be received
    Timeout_counter = 100; // Timeout 100ms
 1ba:	24 e6       	ldi	r18, 0x64	; 100
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	30 93 01 01 	sts	0x0101, r19
 1c2:	20 93 00 01 	sts	0x0100, r18
    while ( !(UCSR0A & (1<<RXC0)) )
 1c6:	e0 ec       	ldi	r30, 0xC0	; 192
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <USART_Receive_Byte+0x20>
    {
        if (Timeout_counter == 0)
 1cc:	20 91 00 01 	lds	r18, 0x0100
 1d0:	30 91 01 01 	lds	r19, 0x0101
 1d4:	21 15       	cp	r18, r1
 1d6:	31 05       	cpc	r19, r1
 1d8:	49 f0       	breq	.+18     	; 0x1ec <USART_Receive_Byte+0x32>
#define F_BYTE_RECEIVE_OK    1
unsigned char USART_Receive_Byte (unsigned char* byte)
{
    // Wait for data to be received
    Timeout_counter = 100; // Timeout 100ms
    while ( !(UCSR0A & (1<<RXC0)) )
 1da:	20 81       	ld	r18, Z
 1dc:	22 23       	and	r18, r18
 1de:	b4 f7       	brge	.-20     	; 0x1cc <USART_Receive_Byte+0x12>
        {
            return(F_BYTE_RECEIVE_ERROR);
        }
    }
    // Get and return received data from buffer
    *byte = UDR0;
 1e0:	20 91 c6 00 	lds	r18, 0x00C6
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
    return(F_BYTE_RECEIVE_OK);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret
    Timeout_counter = 100; // Timeout 100ms
    while ( !(UCSR0A & (1<<RXC0)) )
    {
        if (Timeout_counter == 0)
        {
            return(F_BYTE_RECEIVE_ERROR);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    // Get and return received data from buffer
    *byte = UDR0;
    return(F_BYTE_RECEIVE_OK);
} // End proc
 1ee:	08 95       	ret

000001f0 <USART_Transmit_Byte>:
#define F_BYTE_TRANSMIT_ERROR 0
#define F_BYTE_TRANSMIT_OK    1
unsigned char USART_Transmit_Byte (unsigned char* byte)
{
    // Wait for empty transmit buffer
    Timeout_counter = 100; // Timeout 100ms
 1f0:	24 e6       	ldi	r18, 0x64	; 100
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	30 93 01 01 	sts	0x0101, r19
 1f8:	20 93 00 01 	sts	0x0100, r18
    while ( !( UCSR0A & (1<<UDRE0)))
 1fc:	e0 ec       	ldi	r30, 0xC0	; 192
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	07 c0       	rjmp	.+14     	; 0x210 <USART_Transmit_Byte+0x20>
    {
        if (Timeout_counter == 0)
 202:	20 91 00 01 	lds	r18, 0x0100
 206:	30 91 01 01 	lds	r19, 0x0101
 20a:	21 15       	cp	r18, r1
 20c:	31 05       	cpc	r19, r1
 20e:	49 f0       	breq	.+18     	; 0x222 <USART_Transmit_Byte+0x32>
#define F_BYTE_TRANSMIT_OK    1
unsigned char USART_Transmit_Byte (unsigned char* byte)
{
    // Wait for empty transmit buffer
    Timeout_counter = 100; // Timeout 100ms
    while ( !( UCSR0A & (1<<UDRE0)))
 210:	20 81       	ld	r18, Z
 212:	25 ff       	sbrs	r18, 5
 214:	f6 cf       	rjmp	.-20     	; 0x202 <USART_Transmit_Byte+0x12>
        {
            return(F_BYTE_TRANSMIT_ERROR);
        }
    }
    // Put data into buffer, sends the data
    UDR0 = *byte;
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	80 93 c6 00 	sts	0x00C6, r24
    return(F_BYTE_TRANSMIT_OK);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret
    Timeout_counter = 100; // Timeout 100ms
    while ( !( UCSR0A & (1<<UDRE0)))
    {
        if (Timeout_counter == 0)
        {
            return(F_BYTE_TRANSMIT_ERROR);
 222:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    // Put data into buffer, sends the data
    UDR0 = *byte;
    return(F_BYTE_TRANSMIT_OK);
} // End proc
 224:	08 95       	ret

00000226 <RFD_Read_ESN>:

#define F_ESN_READ_ERROR 0
#define F_ESN_READ_OK    1
unsigned char RFD_Read_ESN (unsigned char* str)
{
 226:	df 92       	push	r13
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	0f 92       	push	r0
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	e8 2e       	mov	r14, r24
 23c:	d9 2e       	mov	r13, r25
    unsigned char chr;
    on(RFD_RESET);
 23e:	5c 98       	cbi	0x0b, 4	; 11
    on(RFD_LEARN);
 240:	46 9a       	sbi	0x08, 6	; 8
    off(RFD_RESET);
 242:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	8f e7       	ldi	r24, 0x7F	; 127
 246:	9a e1       	ldi	r25, 0x1A	; 26
 248:	a6 e0       	ldi	r26, 0x06	; 6
 24a:	81 50       	subi	r24, 0x01	; 1
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	a0 40       	sbci	r26, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <RFD_Read_ESN+0x24>
 252:	00 c0       	rjmp	.+0      	; 0x254 <RFD_Read_ESN+0x2e>
 254:	00 00       	nop
	_delay_ms(250);
   // __delay_cycles(250*(MCLK/1000));   // Wait 250ms
    off(RFD_LEARN);
 256:	46 98       	cbi	0x08, 6	; 8
    chr = 'R'; USART_Transmit_Byte(&chr);
 258:	82 e5       	ldi	r24, 0x52	; 82
 25a:	89 83       	std	Y+1, r24	; 0x01
 25c:	8e 01       	movw	r16, r28
 25e:	0f 5f       	subi	r16, 0xFF	; 255
 260:	1f 4f       	sbci	r17, 0xFF	; 255
 262:	c8 01       	movw	r24, r16
 264:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = 'E'; USART_Transmit_Byte(&chr);
 268:	0f 2e       	mov	r0, r31
 26a:	f5 e4       	ldi	r31, 0x45	; 69
 26c:	ff 2e       	mov	r15, r31
 26e:	f0 2d       	mov	r31, r0
 270:	f9 82       	std	Y+1, r15	; 0x01
 272:	c8 01       	movw	r24, r16
 274:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = 'A'; USART_Transmit_Byte(&chr);
 278:	81 e4       	ldi	r24, 0x41	; 65
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	c8 01       	movw	r24, r16
 27e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = 'D'; USART_Transmit_Byte(&chr);
 282:	84 e4       	ldi	r24, 0x44	; 68
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	c8 01       	movw	r24, r16
 288:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = ' '; USART_Transmit_Byte(&chr);
 28c:	80 e2       	ldi	r24, 0x20	; 32
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	c8 01       	movw	r24, r16
 292:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = 'E'; USART_Transmit_Byte(&chr);
 296:	f9 82       	std	Y+1, r15	; 0x01
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = 'S'; USART_Transmit_Byte(&chr);
 29e:	83 e5       	ldi	r24, 0x53	; 83
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	c8 01       	movw	r24, r16
 2a4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
    chr = 'N'; USART_Transmit_Byte(&chr);
 2a8:	8e e4       	ldi	r24, 0x4E	; 78
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	c8 01       	movw	r24, r16
 2ae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
 2b2:	0e 2d       	mov	r16, r14
 2b4:	1d 2d       	mov	r17, r13
    while (*str != '$')
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <RFD_Read_ESN+0x9a>
    {
        if (USART_Receive_Byte(str++) == F_BYTE_RECEIVE_ERROR)
 2b8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_Receive_Byte>
 2bc:	88 23       	and	r24, r24
 2be:	49 f0       	breq	.+18     	; 0x2d2 <RFD_Read_ESN+0xac>
 2c0:	80 2f       	mov	r24, r16
 2c2:	91 2f       	mov	r25, r17
    chr = 'D'; USART_Transmit_Byte(&chr);
    chr = ' '; USART_Transmit_Byte(&chr);
    chr = 'E'; USART_Transmit_Byte(&chr);
    chr = 'S'; USART_Transmit_Byte(&chr);
    chr = 'N'; USART_Transmit_Byte(&chr);
    while (*str != '$')
 2c4:	d8 01       	movw	r26, r16
 2c6:	2d 91       	ld	r18, X+
 2c8:	8d 01       	movw	r16, r26
 2ca:	24 32       	cpi	r18, 0x24	; 36
 2cc:	a9 f7       	brne	.-22     	; 0x2b8 <RFD_Read_ESN+0x92>
        if (USART_Receive_Byte(str++) == F_BYTE_RECEIVE_ERROR)
        {
            return(F_ESN_READ_ERROR);
        }
    }
    return(F_ESN_READ_OK);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <RFD_Read_ESN+0xae>
    chr = 'N'; USART_Transmit_Byte(&chr);
    while (*str != '$')
    {
        if (USART_Receive_Byte(str++) == F_BYTE_RECEIVE_ERROR)
        {
            return(F_ESN_READ_ERROR);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return(F_ESN_READ_OK);
} // End proc
 2d4:	0f 90       	pop	r0
 2d6:	cf 91       	pop	r28
 2d8:	df 91       	pop	r29
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	08 95       	ret

000002e6 <WDT_off>:

void WDT_off (void)
{
    //__disable_interrupt();
	cli();
 2e6:	f8 94       	cli
    //__watchdog_reset();
	wdt_reset();
 2e8:	a8 95       	wdr
    /* Clear WDRF in MCUSR */
    MCUSR &= ~(1<<WDRF);
 2ea:	84 b7       	in	r24, 0x34	; 52
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	84 bf       	out	0x34, r24	; 52
    /* Write logical one to WDCE and WDE */
    /* Keep old prescaler setting to prevent unintentional time-out */
    WDTCSR |= (1<<WDCE) | (1<<WDE);
 2f0:	e0 e6       	ldi	r30, 0x60	; 96
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	88 61       	ori	r24, 0x18	; 24
 2f8:	80 83       	st	Z, r24
    /* Turn off WDT */
    WDTCSR = 0x00;
 2fa:	10 82       	st	Z, r1
} // End proc
 2fc:	08 95       	ret

000002fe <Power_Down>:

void Power_Down (void)
{
    WDT_off();
 2fe:	0e 94 73 01 	call	0x2e6	; 0x2e6 <WDT_off>
    //__disable_interrupt();
	cli();
 302:	f8 94       	cli
    DDRA = 0x00;
 304:	11 b8       	out	0x01, r1	; 1
    DDRB = 0x00;
 306:	14 b8       	out	0x04, r1	; 4
    DDRC = 0x00;
 308:	17 b8       	out	0x07, r1	; 7
    DDRD = 0x00;
 30a:	1a b8       	out	0x0a, r1	; 10
    PORTA = 0x00;
 30c:	12 b8       	out	0x02, r1	; 2
    PORTB = 0x00;
 30e:	15 b8       	out	0x05, r1	; 5
    PORTC = 0x00;
 310:	18 b8       	out	0x08, r1	; 8
    PORTD = 0x00;
 312:	1b b8       	out	0x0b, r1	; 11
    ADCSRA = 0x00; // Disable ADC
 314:	10 92 7a 00 	sts	0x007A, r1
    ACSR = (unsigned char)(1 << ACD); // Disable Analog comparator
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	80 bf       	out	0x30, r24	; 48
    DIDR1 = (unsigned char)((1 << AIN1D)|(1 << AIN0D)); // AIN1:AIN0 Digital Input Disable
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	80 93 7f 00 	sts	0x007F, r24
    DIDR0 = 0xFF; // ADC7:0 Digital Input Disable
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	80 93 7e 00 	sts	0x007E, r24
    UCSR0B &= ~((1 << RXCIE0)|(1 << RXEN0)|(1 << TXEN0));
 328:	e1 ec       	ldi	r30, 0xC1	; 193
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	87 76       	andi	r24, 0x67	; 103
 330:	80 83       	st	Z, r24
    SMCR = (unsigned char)((1 << SM1)|(1 << SE)); // Power Down Mode
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
 336:	83 b7       	in	r24, 0x33	; 51
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	83 bf       	out	0x33, r24	; 51
} // End proc
 33c:	08 95       	ret

0000033e <main>:

void main (void)
{
 33e:	2f 92       	push	r2
 340:	3f 92       	push	r3
 342:	4f 92       	push	r4
 344:	5f 92       	push	r5
 346:	6f 92       	push	r6
 348:	7f 92       	push	r7
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	00 d0       	rcall	.+0      	; 0x364 <main+0x26>
 364:	0f 92       	push	r0
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
    unsigned char byte, i, chr;
	unsigned char testbyte = 'Z';
 36a:	8a e5       	ldi	r24, 0x5A	; 90
 36c:	8b 83       	std	Y+3, r24	; 0x03
    Init_Ports();
 36e:	0e 94 52 00 	call	0xa4	; 0xa4 <Init_Ports>
    Init_USART(MYUBRR);
 372:	83 e3       	ldi	r24, 0x33	; 51
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 5d 00 	call	0xba	; 0xba <Init_USART>
    Init_Timer1();
 37a:	0e 94 68 00 	call	0xd0	; 0xd0 <Init_Timer1>
    on(RFD_PWR);  // Power ON RFD module
 37e:	5e 9a       	sbi	0x0b, 6	; 11
    RFD_Set_Mode(2);
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 a9 00 	call	0x152	; 0x152 <RFD_Set_Mode>
   //__enable_interrupt();
	sei();
 386:	78 94       	sei
    for(;;)
    {
        // LED and Button testing
        if (signal(SW))
        {			
			Timeout_counter = 5000;
 388:	0f 2e       	mov	r0, r31
 38a:	f8 e8       	ldi	r31, 0x88	; 136
 38c:	af 2e       	mov	r10, r31
 38e:	f3 e1       	ldi	r31, 0x13	; 19
 390:	bf 2e       	mov	r11, r31
 392:	f0 2d       	mov	r31, r0
			while(Timeout_counter > 0)
			{
				on(LED);
			}
			off(LED);
			USART_Transmit_Byte(&testbyte);
 394:	0f 2e       	mov	r0, r31
 396:	f3 e0       	ldi	r31, 0x03	; 3
 398:	8f 2e       	mov	r8, r31
 39a:	99 24       	eor	r9, r9
 39c:	f0 2d       	mov	r31, r0
 39e:	8c 0e       	add	r8, r28
 3a0:	9d 1e       	adc	r9, r29
        {
            off(LED);
        }
        // Radio testing
					
        if (USART_Receive_Byte(&byte) == F_BYTE_RECEIVE_OK)
 3a2:	6e 01       	movw	r12, r28
 3a4:	08 94       	sec
 3a6:	c1 1c       	adc	r12, r1
 3a8:	d1 1c       	adc	r13, r1
        {
            if ( (byte == 'e') || (byte == 'E') )
            { // Send ESN mode
                if (RFD_Read_ESN(String_Buffer) == F_ESN_READ_OK)
 3aa:	0f 2e       	mov	r0, r31
 3ac:	f2 e0       	ldi	r31, 0x02	; 2
 3ae:	4f 2e       	mov	r4, r31
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	5f 2e       	mov	r5, r31
 3b4:	f0 2d       	mov	r31, r0
                         USART_Transmit_Byte(String_Buffer + i);
                    }
                }
                else
                {
                    chr = 'E'; USART_Transmit_Byte(&chr);
 3b6:	0f 2e       	mov	r0, r31
 3b8:	f5 e4       	ldi	r31, 0x45	; 69
 3ba:	3f 2e       	mov	r3, r31
 3bc:	f0 2d       	mov	r31, r0
 3be:	66 24       	eor	r6, r6
 3c0:	77 24       	eor	r7, r7
 3c2:	68 94       	set
 3c4:	61 f8       	bld	r6, 1
 3c6:	6c 0e       	add	r6, r28
 3c8:	7d 1e       	adc	r7, r29
                    chr = 'S'; USART_Transmit_Byte(&chr);
                    chr = 'N'; USART_Transmit_Byte(&chr);
                    chr = ' '; USART_Transmit_Byte(&chr);
                    chr = 'E'; USART_Transmit_Byte(&chr);
                    chr = 'R'; USART_Transmit_Byte(&chr);
 3ca:	0f 2e       	mov	r0, r31
 3cc:	f2 e5       	ldi	r31, 0x52	; 82
 3ce:	2f 2e       	mov	r2, r31
 3d0:	f0 2d       	mov	r31, r0
   //__enable_interrupt();
	sei();
    for(;;)
    {
        // LED and Button testing
        if (signal(SW))
 3d2:	1c 9b       	sbis	0x03, 4	; 3
 3d4:	18 c0       	rjmp	.+48     	; 0x406 <main+0xc8>
        {			
			Timeout_counter = 5000;
 3d6:	b0 92 01 01 	sts	0x0101, r11
 3da:	a0 92 00 01 	sts	0x0100, r10
			while(Timeout_counter > 0)
 3de:	80 91 00 01 	lds	r24, 0x0100
 3e2:	90 91 01 01 	lds	r25, 0x0101
 3e6:	18 16       	cp	r1, r24
 3e8:	19 06       	cpc	r1, r25
 3ea:	44 f4       	brge	.+16     	; 0x3fc <main+0xbe>
			{
				on(LED);
 3ec:	2a 9a       	sbi	0x05, 2	; 5
    {
        // LED and Button testing
        if (signal(SW))
        {			
			Timeout_counter = 5000;
			while(Timeout_counter > 0)
 3ee:	80 91 00 01 	lds	r24, 0x0100
 3f2:	90 91 01 01 	lds	r25, 0x0101
 3f6:	18 16       	cp	r1, r24
 3f8:	19 06       	cpc	r1, r25
 3fa:	c4 f3       	brlt	.-16     	; 0x3ec <main+0xae>
			{
				on(LED);
			}
			off(LED);
 3fc:	2a 98       	cbi	0x05, 2	; 5
			USART_Transmit_Byte(&testbyte);
 3fe:	c4 01       	movw	r24, r8
 400:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
 404:	01 c0       	rjmp	.+2      	; 0x408 <main+0xca>
        }
        else
        {
            off(LED);
 406:	2a 98       	cbi	0x05, 2	; 5
        }
        // Radio testing
					
        if (USART_Receive_Byte(&byte) == F_BYTE_RECEIVE_OK)
 408:	c6 01       	movw	r24, r12
 40a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_Receive_Byte>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	01 f7       	brne	.-64     	; 0x3d2 <main+0x94>
        {
            if ( (byte == 'e') || (byte == 'E') )
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	85 36       	cpi	r24, 0x65	; 101
 416:	19 f0       	breq	.+6      	; 0x41e <main+0xe0>
 418:	85 34       	cpi	r24, 0x45	; 69
 41a:	09 f0       	breq	.+2      	; 0x41e <main+0xe0>
 41c:	42 c0       	rjmp	.+132    	; 0x4a2 <main+0x164>
            { // Send ESN mode
                if (RFD_Read_ESN(String_Buffer) == F_ESN_READ_OK)
 41e:	c2 01       	movw	r24, r4
 420:	0e 94 13 01 	call	0x226	; 0x226 <RFD_Read_ESN>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	e9 f4       	brne	.+58     	; 0x462 <main+0x124>
                { // Send ESN
                    for (i = 0; ( (String_Buffer[i] != '$') && (i < sizeof(String_Buffer)) ); i++)
 428:	f2 01       	movw	r30, r4
 42a:	80 81       	ld	r24, Z
 42c:	84 32       	cpi	r24, 0x24	; 36
 42e:	89 f2       	breq	.-94     	; 0x3d2 <main+0x94>
 430:	0f 2e       	mov	r0, r31
 432:	f3 e0       	ldi	r31, 0x03	; 3
 434:	ef 2e       	mov	r14, r31
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	ff 2e       	mov	r15, r31
 43a:	f0 2d       	mov	r31, r0
 43c:	00 e0       	ldi	r16, 0x00	; 0
 43e:	10 e0       	ldi	r17, 0x00	; 0
                    {
                         USART_Transmit_Byte(String_Buffer + i);
 440:	c8 01       	movw	r24, r16
 442:	8e 5f       	subi	r24, 0xFE	; 254
 444:	9e 4f       	sbci	r25, 0xFE	; 254
 446:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
        {
            if ( (byte == 'e') || (byte == 'E') )
            { // Send ESN mode
                if (RFD_Read_ESN(String_Buffer) == F_ESN_READ_OK)
                { // Send ESN
                    for (i = 0; ( (String_Buffer[i] != '$') && (i < sizeof(String_Buffer)) ); i++)
 44a:	f7 01       	movw	r30, r14
 44c:	81 91       	ld	r24, Z+
 44e:	7f 01       	movw	r14, r30
 450:	84 32       	cpi	r24, 0x24	; 36
 452:	09 f4       	brne	.+2      	; 0x456 <main+0x118>
 454:	be cf       	rjmp	.-132    	; 0x3d2 <main+0x94>
 456:	0f 5f       	subi	r16, 0xFF	; 255
 458:	1f 4f       	sbci	r17, 0xFF	; 255
 45a:	00 34       	cpi	r16, 0x40	; 64
 45c:	11 05       	cpc	r17, r1
 45e:	81 f7       	brne	.-32     	; 0x440 <main+0x102>
 460:	b8 cf       	rjmp	.-144    	; 0x3d2 <main+0x94>
                         USART_Transmit_Byte(String_Buffer + i);
                    }
                }
                else
                {
                    chr = 'E'; USART_Transmit_Byte(&chr);
 462:	3a 82       	std	Y+2, r3	; 0x02
 464:	c3 01       	movw	r24, r6
 466:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
                    chr = 'S'; USART_Transmit_Byte(&chr);
 46a:	f3 e5       	ldi	r31, 0x53	; 83
 46c:	fa 83       	std	Y+2, r31	; 0x02
 46e:	c3 01       	movw	r24, r6
 470:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
                    chr = 'N'; USART_Transmit_Byte(&chr);
 474:	8e e4       	ldi	r24, 0x4E	; 78
 476:	8a 83       	std	Y+2, r24	; 0x02
 478:	c3 01       	movw	r24, r6
 47a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
                    chr = ' '; USART_Transmit_Byte(&chr);
 47e:	e0 e2       	ldi	r30, 0x20	; 32
 480:	ea 83       	std	Y+2, r30	; 0x02
 482:	c3 01       	movw	r24, r6
 484:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
                    chr = 'E'; USART_Transmit_Byte(&chr);
 488:	3a 82       	std	Y+2, r3	; 0x02
 48a:	c3 01       	movw	r24, r6
 48c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
                    chr = 'R'; USART_Transmit_Byte(&chr);
 490:	2a 82       	std	Y+2, r2	; 0x02
 492:	c3 01       	movw	r24, r6
 494:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
                    chr = 'R'; USART_Transmit_Byte(&chr);
 498:	2a 82       	std	Y+2, r2	; 0x02
 49a:	c3 01       	movw	r24, r6
 49c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
 4a0:	98 cf       	rjmp	.-208    	; 0x3d2 <main+0x94>
                }
            }
            else if ( (byte == 'r') || (byte == 'R') )
 4a2:	82 37       	cpi	r24, 0x72	; 114
 4a4:	11 f0       	breq	.+4      	; 0x4aa <main+0x16c>
 4a6:	82 35       	cpi	r24, 0x52	; 82
 4a8:	41 f4       	brne	.+16     	; 0x4ba <main+0x17c>
            { // Radio off mode
                off(RFD_M0);
 4aa:	42 98       	cbi	0x08, 2	; 8
                off(RFD_M1);
 4ac:	43 98       	cbi	0x08, 3	; 8
                off(RFD_M2);
 4ae:	44 98       	cbi	0x08, 4	; 8
                off(RFD_FAC_PROG);
 4b0:	45 98       	cbi	0x08, 5	; 8
                off(RFD_LEARN);
 4b2:	46 98       	cbi	0x08, 6	; 8
                on(RFD_RESET);
 4b4:	5c 98       	cbi	0x0b, 4	; 11
                off(RFD_PWR);  // Power OFF RFD module
 4b6:	5e 98       	cbi	0x0b, 6	; 11
 4b8:	8c cf       	rjmp	.-232    	; 0x3d2 <main+0x94>
            }
            else if ( (byte == 's') || (byte == 'S') )
 4ba:	83 37       	cpi	r24, 0x73	; 115
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <main+0x184>
 4be:	83 35       	cpi	r24, 0x53	; 83
 4c0:	19 f4       	brne	.+6      	; 0x4c8 <main+0x18a>
            { // Sleep mode
                Power_Down();
 4c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Power_Down>
 4c6:	85 cf       	rjmp	.-246    	; 0x3d2 <main+0x94>
            }
            else
            { // Echo mode
				if(byte == 'Z')
 4c8:	8a 35       	cpi	r24, 0x5A	; 90
 4ca:	09 f0       	breq	.+2      	; 0x4ce <main+0x190>
 4cc:	82 cf       	rjmp	.-252    	; 0x3d2 <main+0x94>
				{
					Timeout_counter = 5000;
 4ce:	b0 92 01 01 	sts	0x0101, r11
 4d2:	a0 92 00 01 	sts	0x0100, r10
					while(Timeout_counter > 0)
 4d6:	80 91 00 01 	lds	r24, 0x0100
 4da:	90 91 01 01 	lds	r25, 0x0101
 4de:	18 16       	cp	r1, r24
 4e0:	19 06       	cpc	r1, r25
 4e2:	44 f4       	brge	.+16     	; 0x4f4 <main+0x1b6>
					{
						on(LED);
 4e4:	2a 9a       	sbi	0x05, 2	; 5
            else
            { // Echo mode
				if(byte == 'Z')
				{
					Timeout_counter = 5000;
					while(Timeout_counter > 0)
 4e6:	80 91 00 01 	lds	r24, 0x0100
 4ea:	90 91 01 01 	lds	r25, 0x0101
 4ee:	18 16       	cp	r1, r24
 4f0:	19 06       	cpc	r1, r25
 4f2:	c4 f3       	brlt	.-16     	; 0x4e4 <main+0x1a6>
					{
						on(LED);
					}
					off(LED);
 4f4:	2a 98       	cbi	0x05, 2	; 5
					USART_Transmit_Byte(&byte);
 4f6:	c6 01       	movw	r24, r12
 4f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <USART_Transmit_Byte>
 4fc:	6a cf       	rjmp	.-300    	; 0x3d2 <main+0x94>

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
