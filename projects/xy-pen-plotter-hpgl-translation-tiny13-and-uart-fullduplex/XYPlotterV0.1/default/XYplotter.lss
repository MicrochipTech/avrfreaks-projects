
XYplotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003be  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800062  00800062  00000454  2**0
                  ALLOC
  3 .noinit       00000000  0080006f  0080006f  00000454  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000454  2**0
                  CONTENTS
  5 .stab         00000354  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000ea  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000002d7  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000000b3  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000275  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000029  00000000  00000000  00000f29  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
	.section .vectors,"ax",@progbits
	.global	__vectors
	.func	__vectors
__vectors:
	XJMP	__init
   0:	2b c0       	rjmp	.+86     	; 0x58 <__init>
	vector	__vector_1
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
	vector	__vector_2
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
	vector	__vector_3
   6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
	vector	__vector_4
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
	vector	__vector_5
   a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
	vector	__vector_6
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
	vector	__vector_7
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
	vector	__vector_8
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
	vector	__vector_9
  12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>

00000014 <__ctors_end>:
	vector	__vector_10
	vector	__vector_11
	vector	__vector_12
	vector	__vector_13
	vector	__vector_14
	vector	__vector_15
	vector	__vector_16
	vector	__vector_17
	vector	__vector_18
	vector	__vector_19
	vector	__vector_20
	vector	__vector_21
	vector	__vector_22
	vector	__vector_23
	vector	__vector_24
	vector	__vector_25
	vector	__vector_26
	vector	__vector_27
	vector	__vector_28
	vector	__vector_29
	vector	__vector_30
	vector	__vector_31
	vector	__vector_32
	vector	__vector_33
	vector	__vector_34
	vector	__vector_35
	vector	__vector_36
	vector	__vector_37
	vector	__vector_38
	vector	__vector_39
	vector	__vector_40
	vector	__vector_41
	vector	__vector_42
	vector	__vector_43
	vector	__vector_44
	vector	__vector_45
	vector	__vector_46
	vector	__vector_47
	vector	__vector_48
	vector	__vector_49
	vector	__vector_50
	vector	__vector_51
	vector	__vector_52
	vector	__vector_53
	vector	__vector_54
	vector	__vector_55
	vector	__vector_56
  14:	3b 0d       	add	r19, r11
  16:	0a 00       	.word	0x000a	; ????

00000018 <__c.1>:
  18:	49 4e 3b 49 50 3b 44 49 3b 53 50 31 3b 53 43 00     IN;IP;DI;SP1;SC.

00000028 <__c.2>:
  28:	58 59 50 6c 6f 74 74 65 72 20 42 79 20 45 6d 69     XYPlotter By Emi
  38:	6c 65 20 76 61 6e 20 64 65 72 20 4c 61 61 6e 20     le van der Laan 
  48:	77 77 77 2e 65 6d 73 69 67 6e 2e 6e 6c 0d 0a 00     www.emsign.nl...

00000058 <__init>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e9       	ldi	r28, 0x9F	; 159
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	03 c0       	rjmp	.+6      	; 0x72 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	c8 95       	lpm
  6e:	31 96       	adiw	r30, 0x01	; 1
  70:	0d 92       	st	X+, r0

00000072 <.do_copy_data_start>:
  72:	a2 36       	cpi	r26, 0x62	; 98
  74:	b1 07       	cpc	r27, r17
  76:	d1 f7       	brne	.-12     	; 0x6c <.do_copy_data_loop>

00000078 <__do_clear_bss>:
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	a2 e6       	ldi	r26, 0x62	; 98
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	af 36       	cpi	r26, 0x6F	; 111
  84:	b1 07       	cpc	r27, r17
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e c1       	rjmp	.+540    	; 0x2a6 <main>

0000008a <__bad_interrupt>:
	.endfunc

	/* Handle unexpected interrupts (enabled and no handler), which
	   usually indicate a bug.  Jump to the __vector_default function
	   if defined by the user, otherwise jump to the reset address.

	   This must be in a different section, otherwise the assembler
	   will resolve "rjmp" offsets and there will be no relocs.  */

	.text
	.global	__bad_interrupt
	.func	__bad_interrupt
__bad_interrupt:
	.weak	__vector_default
	.set	__vector_default, __vectors
	XJMP	__vector_default
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <PutDec>:
unsigned char Idel_Mode;


void PutDec()
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	24 97       	sbiw	r28, 0x04	; 4
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	f8 94       	cli
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	cd bf       	out	0x3d, r28	; 61
unsigned char c;
unsigned char DecStarted=0;
  a0:	1a 82       	std	Y+2, r1	; 0x02
unsigned int Devider=10000;
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	97 e2       	ldi	r25, 0x27	; 39
  a6:	9c 83       	std	Y+4, r25	; 0x04
  a8:	8b 83       	std	Y+3, r24	; 0x03

	while (Devider>1)
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	9c 81       	ldd	r25, Y+4	; 0x04
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	91 05       	cpc	r25, r1
  b2:	88 f1       	brcs	.+98     	; 0x116 <BaudDelay+0x74>
	{
		c=dec_out/Devider;
  b4:	80 91 66 00 	lds	r24, 0x0066
  b8:	90 91 67 00 	lds	r25, 0x0067
  bc:	2b 81       	ldd	r18, Y+3	; 0x03
  be:	3c 81       	ldd	r19, Y+4	; 0x04
  c0:	73 2f       	mov	r23, r19
  c2:	62 2f       	mov	r22, r18
  c4:	66 d1       	rcall	.+716    	; 0x392 <__udivmodhi4>
  c6:	97 2f       	mov	r25, r23
  c8:	86 2f       	mov	r24, r22
  ca:	89 83       	std	Y+1, r24	; 0x01
		if(c!=0 || DecStarted)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	88 23       	and	r24, r24
  d0:	21 f4       	brne	.+8      	; 0xda <BaudDelay+0x38>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	88 23       	and	r24, r24
  d6:	09 f4       	brne	.+2      	; 0xda <BaudDelay+0x38>
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <BaudDelay+0x42>
			{
				PutChar('0'+c);
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	80 5d       	subi	r24, 0xD0	; 208
  de:	2e d1       	rcall	.+604    	; 0x33c <PutChar>
				DecStarted=1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8a 83       	std	Y+2, r24	; 0x02
			}
			dec_out%=Devider;
  e4:	80 91 66 00 	lds	r24, 0x0066
  e8:	90 91 67 00 	lds	r25, 0x0067
  ec:	2b 81       	ldd	r18, Y+3	; 0x03
  ee:	3c 81       	ldd	r19, Y+4	; 0x04
  f0:	73 2f       	mov	r23, r19
  f2:	62 2f       	mov	r22, r18
  f4:	4e d1       	rcall	.+668    	; 0x392 <__udivmodhi4>
  f6:	90 93 67 00 	sts	0x0067, r25
  fa:	80 93 66 00 	sts	0x0066, r24
			Devider/=10;
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	2a e0       	ldi	r18, 0x0A	; 10
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	73 2f       	mov	r23, r19
 108:	62 2f       	mov	r22, r18
 10a:	43 d1       	rcall	.+646    	; 0x392 <__udivmodhi4>
 10c:	97 2f       	mov	r25, r23
 10e:	86 2f       	mov	r24, r22
 110:	9c 83       	std	Y+4, r25	; 0x04
 112:	8b 83       	std	Y+3, r24	; 0x03
 114:	ca cf       	rjmp	.-108    	; 0xaa <BaudDelay+0x8>
	}
	PutChar((unsigned char)'0'+dec_out);
 116:	80 91 66 00 	lds	r24, 0x0066
 11a:	80 5d       	subi	r24, 0xD0	; 208
 11c:	0f d1       	rcall	.+542    	; 0x33c <PutChar>
 11e:	24 96       	adiw	r28, 0x04	; 4
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <PutSemicolom>:
}


void PutSemicolom(void )
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
	Puts(PSTR(";\r\n")); //Semicolom;
 138:	84 e1       	ldi	r24, 0x14	; 20
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	f9 d0       	rcall	.+498    	; 0x330 <Puts>
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <PutLastXY>:
}

void PutLastXY(void )
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
		Last_ADC_X = ADC_X;
 14c:	80 91 6c 00 	lds	r24, 0x006C
 150:	90 91 6d 00 	lds	r25, 0x006D
 154:	90 93 65 00 	sts	0x0065, r25
 158:	80 93 64 00 	sts	0x0064, r24
		Last_ADC_Y = ADC_Y;
 15c:	80 91 62 00 	lds	r24, 0x0062
 160:	90 91 63 00 	lds	r25, 0x0063
 164:	90 93 6a 00 	sts	0x006A, r25
 168:	80 93 69 00 	sts	0x0069, r24
		dec_out=Last_ADC_X;
 16c:	80 91 64 00 	lds	r24, 0x0064
 170:	90 91 65 00 	lds	r25, 0x0065
 174:	90 93 67 00 	sts	0x0067, r25
 178:	80 93 66 00 	sts	0x0066, r24
		PutDec();
 17c:	87 df       	rcall	.-242    	; 0x8c <PutDec>
		PutChar(',');
 17e:	8c e2       	ldi	r24, 0x2C	; 44
 180:	dd d0       	rcall	.+442    	; 0x33c <PutChar>
		dec_out=Last_ADC_Y;
 182:	80 91 69 00 	lds	r24, 0x0069
 186:	90 91 6a 00 	lds	r25, 0x006A
 18a:	90 93 67 00 	sts	0x0067, r25
 18e:	80 93 66 00 	sts	0x0066, r24
		PutDec();
 192:	7c df       	rcall	.-264    	; 0x8c <PutDec>
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <Wait_For_Char_End>:
}

void Wait_For_Char_End(void)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	21 97       	sbiw	r28, 0x01	; 1
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
	char t;
	for(t=0;t<25;t++)
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	89 31       	cpi	r24, 0x19	; 25
 1b4:	2c f4       	brge	.+10     	; 0x1c0 <Wait_For_Char_End+0x26>
		UART_delay(); // This is to sync the RS232 25 * 0.5 Bit time = 12.5 Bits 
 1b6:	de d0       	rcall	.+444    	; 0x374 <UART_delay>
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	f8 cf       	rjmp	.-16     	; 0x1b0 <Wait_For_Char_End+0x16>
 1c0:	21 96       	adiw	r28, 0x01	; 1
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <PutPlotterInitalization>:
}

void PutPlotterInitalization(void)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	//IN;  			Initialize, start a plotting job
	//IP;			Set the initial point (origin), in this case the default 0,0
	//DI;
	//SP1;			Select pen 1
	//SC0,1024,0,1024;	Set the scale so the page is 1024 to 1024 in both X and Y directions
	Puts(PSTR("IN;IP;DI;SP1;SC"));
 1da:	88 e1       	ldi	r24, 0x18	; 24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	a8 d0       	rcall	.+336    	; 0x330 <Puts>
	ADC_X=0;
 1e0:	10 92 6d 00 	sts	0x006D, r1
 1e4:	10 92 6c 00 	sts	0x006C, r1
	ADC_Y=1024;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	90 93 63 00 	sts	0x0063, r25
 1f0:	80 93 62 00 	sts	0x0062, r24
	PutLastXY();
 1f4:	a7 df       	rcall	.-178    	; 0x144 <PutLastXY>
	PutChar(',');
 1f6:	8c e2       	ldi	r24, 0x2C	; 44
 1f8:	a1 d0       	rcall	.+322    	; 0x33c <PutChar>
	PutLastXY();
 1fa:	a4 df       	rcall	.-184    	; 0x144 <PutLastXY>
	PutSemicolom();
 1fc:	99 df       	rcall	.-206    	; 0x130 <PutSemicolom>
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <PutDiffrentXY>:
}

void PutDiffrentXY()
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	if(PINB & (1 << PB2))
 20c:	80 91 36 00 	lds	r24, 0x0036
 210:	99 27       	eor	r25, r25
 212:	84 70       	andi	r24, 0x04	; 4
 214:	90 70       	andi	r25, 0x00	; 0
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	21 f0       	breq	.+8      	; 0x222 <PutDiffrentXY+0x1e>
	{
		Pen='U';
 21a:	85 e5       	ldi	r24, 0x55	; 85
 21c:	80 93 6b 00 	sts	0x006B, r24
 220:	03 c0       	rjmp	.+6      	; 0x228 <PutDiffrentXY+0x24>
	}
	else 
	{
		Pen='D';
 222:	84 e4       	ldi	r24, 0x44	; 68
 224:	80 93 6b 00 	sts	0x006B, r24
	}
	Get_adc(2); // X
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	a8 d0       	rcall	.+336    	; 0x37c <Get_adc>
	ADC_X=ADCW;
 22c:	80 91 24 00 	lds	r24, 0x0024
 230:	90 91 25 00 	lds	r25, 0x0025
 234:	90 93 6d 00 	sts	0x006D, r25
 238:	80 93 6c 00 	sts	0x006C, r24
	Get_adc(3); // Y
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	9e d0       	rcall	.+316    	; 0x37c <Get_adc>
	ADC_Y=ADCW;
 240:	80 91 24 00 	lds	r24, 0x0024
 244:	90 91 25 00 	lds	r25, 0x0025
 248:	90 93 63 00 	sts	0x0063, r25
 24c:	80 93 62 00 	sts	0x0062, r24
	if ( Last_ADC_X != ADC_X || Last_ADC_Y != ADC_Y || Last_Pen != Pen )
 250:	20 91 64 00 	lds	r18, 0x0064
 254:	30 91 65 00 	lds	r19, 0x0065
 258:	80 91 6c 00 	lds	r24, 0x006C
 25c:	90 91 6d 00 	lds	r25, 0x006D
 260:	28 17       	cp	r18, r24
 262:	39 07       	cpc	r19, r25
 264:	91 f4       	brne	.+36     	; 0x28a <PutDiffrentXY+0x86>
 266:	20 91 69 00 	lds	r18, 0x0069
 26a:	30 91 6a 00 	lds	r19, 0x006A
 26e:	80 91 62 00 	lds	r24, 0x0062
 272:	90 91 63 00 	lds	r25, 0x0063
 276:	28 17       	cp	r18, r24
 278:	39 07       	cpc	r19, r25
 27a:	39 f4       	brne	.+14     	; 0x28a <PutDiffrentXY+0x86>
 27c:	90 91 6e 00 	lds	r25, 0x006E
 280:	80 91 6b 00 	lds	r24, 0x006B
 284:	98 17       	cp	r25, r24
 286:	09 f4       	brne	.+2      	; 0x28a <PutDiffrentXY+0x86>
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <PutDiffrentXY+0x9c>
	{
		// The Pen Up of Down Commands are Send
		Last_Pen = Pen;
 28a:	80 91 6b 00 	lds	r24, 0x006B
 28e:	80 93 6e 00 	sts	0x006E, r24
		PutChar('P');
 292:	80 e5       	ldi	r24, 0x50	; 80
 294:	53 d0       	rcall	.+166    	; 0x33c <PutChar>
		PutChar(Pen);
 296:	80 91 6b 00 	lds	r24, 0x006B
 29a:	50 d0       	rcall	.+160    	; 0x33c <PutChar>

		// The X,Y; Is send acording to the AD value
		PutLastXY();		
 29c:	53 df       	rcall	.-346    	; 0x144 <PutLastXY>
		PutSemicolom();
 29e:	48 df       	rcall	.-368    	; 0x130 <PutSemicolom>
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <main>:
	}
}

int main()
{
 2a6:	cf e9       	ldi	r28, 0x9F	; 159
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	cd bf       	out	0x3d, r28	; 61
PORTB	= 0x00;
 2ae:	10 92 38 00 	sts	0x0038, r1
DDRB	= 0x01; //
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 37 00 	sts	0x0037, r24
MCUCR	= ( 1<< PUD) | (1 << SE ) | (1 << SM1) ;  	// PULLUP DISABLE, Sleep Enable Power-down
 2b8:	80 e7       	ldi	r24, 0x70	; 112
 2ba:	80 93 55 00 	sts	0x0055, r24
TCCR0B  = ( 1 << CS01) | ( 1 << CS00) ; 			// clkI/O/64 (From prescaler)
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	80 93 53 00 	sts	0x0053, r24
TIMSK0  = ( 1 << TOIE0);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 59 00 	sts	0x0059, r24

// The CKDIV8 Fuse determines the initial value of the CLKPS bits. 
CLKPR  = 0x80;
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	80 93 46 00 	sts	0x0046, r24
CLKPR  = 0x00; // Set devide by 1 Hi Speed 9.6 MC
 2d0:	10 92 46 00 	sts	0x0046, r1
PCMSK  = (1 << PCINT1);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 35 00 	sts	0x0035, r24
Idel_Mode=1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 68 00 	sts	0x0068, r24

Puts(PSTR("XYPlotter By Emile van der Laan www.emsign.nl\r\n")); 
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	25 d0       	rcall	.+74     	; 0x330 <Puts>

	for(;;)
	{
		if ( GIFR &(1<<PCIF))				// Has it detected a start bit or other bits
 2e6:	80 91 5a 00 	lds	r24, 0x005A
 2ea:	99 27       	eor	r25, r25
 2ec:	80 72       	andi	r24, 0x20	; 32
 2ee:	90 70       	andi	r25, 0x00	; 0
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	c1 f0       	breq	.+48     	; 0x324 <main+0x7e>
		{ 
			Wait_For_Char_End();			// This will prevent that it start and stops in the same character
 2f4:	52 df       	rcall	.-348    	; 0x19a <Wait_For_Char_End>
			if(Idel_Mode)
 2f6:	80 91 68 00 	lds	r24, 0x0068
 2fa:	88 23       	and	r24, r24
 2fc:	69 f0       	breq	.+26     	; 0x318 <main+0x72>
			{
				PutPlotterInitalization();
 2fe:	69 df       	rcall	.-302    	; 0x1d2 <PutPlotterInitalization>
				Pen='?';					// As we do noet the Current Pen status
 300:	8f e3       	ldi	r24, 0x3F	; 63
 302:	80 93 6b 00 	sts	0x006B, r24
				Last_ADC_X=0xffff;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	9f ef       	ldi	r25, 0xFF	; 255
 30a:	90 93 65 00 	sts	0x0065, r25
 30e:	80 93 64 00 	sts	0x0064, r24
				Idel_Mode=0;				// set not in idle mode or run mode
 312:	10 92 68 00 	sts	0x0068, r1
 316:	03 c0       	rjmp	.+6      	; 0x31e <main+0x78>
			}
			else
			{			
				Idel_Mode=1;				// In idle mode it will only wait
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 68 00 	sts	0x0068, r24
			}
			GIFR = (1<<PCIF); 				// Clear the interupt flag, Not that i used the Interupt only the Flag.
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	80 93 5a 00 	sts	0x005A, r24
		}
		if(!Idel_Mode)
 324:	80 91 68 00 	lds	r24, 0x0068
 328:	88 23       	and	r24, r24
 32a:	e9 f6       	brne	.-70     	; 0x2e6 <main+0x40>
		{
			PutDiffrentXY();				// This will only print if the XY or Pen is diffrent to reduce the file size
 32c:	6b df       	rcall	.-298    	; 0x204 <PutDiffrentXY>
 32e:	db cf       	rjmp	.-74     	; 0x2e6 <main+0x40>

00000330 <Puts>:
 330:	fc 01       	movw	r30, r24

00000332 <Puts1>:
 332:	85 91       	lpm	r24, Z+
 334:	88 23       	and	r24, r24
 336:	79 f0       	breq	.+30     	; 0x356 <putcharend>
 338:	01 d0       	rcall	.+2      	; 0x33c <PutChar>
 33a:	fb cf       	rjmp	.-10     	; 0x332 <Puts1>

0000033c <PutChar>:
 33c:	0b e0       	ldi	r16, 0x0B	; 11
 33e:	80 95       	com	r24
 340:	08 94       	sec

00000342 <putchar0>:
 342:	10 f0       	brcs	.+4      	; 0x348 <putchar1>
 344:	c0 98       	cbi	0x18, 0	; 24
 346:	02 c0       	rjmp	.+4      	; 0x34c <putchar2>

00000348 <putchar1>:
 348:	c0 9a       	sbi	0x18, 0	; 24
	...

0000034c <putchar2>:
 34c:	13 d0       	rcall	.+38     	; 0x374 <UART_delay>
 34e:	12 d0       	rcall	.+36     	; 0x374 <UART_delay>
 350:	86 95       	lsr	r24
 352:	0a 95       	dec	r16
 354:	b1 f7       	brne	.-20     	; 0x342 <putchar0>

00000356 <putcharend>:
 356:	08 95       	ret

00000358 <GetChar>:
 358:	09 e0       	ldi	r16, 0x09	; 9

0000035a <getchar1>:
 35a:	b1 9b       	sbis	0x16, 1	; 22
 35c:	fe cf       	rjmp	.-4      	; 0x35a <getchar1>
 35e:	0a d0       	rcall	.+20     	; 0x374 <UART_delay>

00000360 <getchar2>:
 360:	09 d0       	rcall	.+18     	; 0x374 <UART_delay>
 362:	08 d0       	rcall	.+16     	; 0x374 <UART_delay>
 364:	08 94       	sec
 366:	b1 99       	sbic	0x16, 1	; 22
 368:	88 94       	clc
 36a:	0a 95       	dec	r16
 36c:	11 f0       	breq	.+4      	; 0x372 <getchar3>
 36e:	87 95       	ror	r24
 370:	f7 cf       	rjmp	.-18     	; 0x360 <getchar2>

00000372 <getchar3>:
 372:	08 95       	ret

00000374 <UART_delay>:
 374:	12 ea       	ldi	r17, 0xA2	; 162

00000376 <UART_delay1>:
 376:	1a 95       	dec	r17
 378:	f1 f7       	brne	.-4      	; 0x376 <UART_delay1>
 37a:	08 95       	ret

0000037c <Get_adc>:
 37c:	80 64       	ori	r24, 0x40	; 64
 37e:	80 93 27 00 	sts	0x0027, r24
 382:	87 ed       	ldi	r24, 0xD7	; 215
 384:	80 93 26 00 	sts	0x0026, r24

00000388 <WaitForADC>:
 388:	80 91 26 00 	lds	r24, 0x0026
 38c:	80 71       	andi	r24, 0x10	; 16
 38e:	e1 f3       	breq	.-8      	; 0x388 <WaitForADC>
 390:	08 95       	ret

00000392 <__udivmodhi4>:
 392:	aa 1b       	sub	r26, r26
 394:	bb 1b       	sub	r27, r27
 396:	51 e1       	ldi	r21, 0x11	; 17
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <__udivmodhi4_ep>

0000039a <__udivmodhi4_loop>:
 39a:	aa 1f       	adc	r26, r26
 39c:	bb 1f       	adc	r27, r27
 39e:	a6 17       	cp	r26, r22
 3a0:	b7 07       	cpc	r27, r23
 3a2:	10 f0       	brcs	.+4      	; 0x3a8 <__udivmodhi4_ep>
 3a4:	a6 1b       	sub	r26, r22
 3a6:	b7 0b       	sbc	r27, r23

000003a8 <__udivmodhi4_ep>:
 3a8:	88 1f       	adc	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	5a 95       	dec	r21
 3ae:	a9 f7       	brne	.-22     	; 0x39a <__udivmodhi4_loop>
 3b0:	80 95       	com	r24
 3b2:	90 95       	com	r25
 3b4:	68 2f       	mov	r22, r24
 3b6:	79 2f       	mov	r23, r25
 3b8:	8a 2f       	mov	r24, r26
 3ba:	9b 2f       	mov	r25, r27
 3bc:	08 95       	ret
